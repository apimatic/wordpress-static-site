
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Postman Archives - APIMatic</title>
	<atom:link href="/blog/tag/postman/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Fri, 24 Dec 2021 08:18:04 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.4</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>Postman Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Curating Postman Collections To Generate Quality API Documentation &#038; SDKs</title>
		<link>/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/</link>
					<comments>/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Thu, 08 Apr 2021 10:00:45 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Postman]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Api Description]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[postman collections]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic-blog.000webhostapp.com/?p=140</guid>

					<description><![CDATA[<p>Are you looking to provide a smooth developer experience with your APIs and as a result maximize API consumption? Then, you can’t really afford to put off API documentation as a last thought. After all, it is one of the critical pieces of any good developer experience program along with platform SDKs, code samples etc. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/">Curating Postman Collections To Generate Quality API Documentation &#038; SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="140" class="elementor elementor-140">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-18c89b1c elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="18c89b1c" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-7cf44855" data-id="7cf44855" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-3be71a1f elementor-widget elementor-widget-text-editor" data-id="3be71a1f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.1 - 23-03-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Are you looking to provide a smooth developer experience with your APIs and as a result maximize API consumption? Then, you can’t really afford to put off API documentation as a last thought. After all, it is one of the critical pieces of any good developer experience program along with platform SDKs, code samples etc.</p>
<p class="">Who are the end-users of a documentation, really? <strong>Humans</strong>. So, naturally, your API documentation can only be termed “good quality” if it comes with a human element in it— easy to read, navigate and comprehend. Similarly, a good quality SDK is one which is usable, idiomatic, comes bundled with language-specific documentation and is simple enough to be used by any average developer. This implies that <strong>user-friendliness</strong> is a key factor in determining the quality of your API developer experience program.</p>
<p class=""><a href="https://www.postman.com/" target="_blank" rel="noreferrer noopener">Postman</a> is a tool widely used by developers for API testing and for collaborating over APIs with teams. You can then easily export your API requests in the form of a Postman Collection file and use it to generate complete API documentation as well as SDKs. In this blog, I share a few tips to gear your API documentation and SDKs towards your developers from as early as your starting point — Postman requests and the resulting Postman Collection.</p>
<h2 class="">1. Assign a User Friendly and Unique Name to Your Postman&nbsp;Requests</h2>
<p class="">Let’s say you create a new request in Postman Collection and set its URL to something like <code>&lt;a href=&quot;http://i-am-just-an-example.com/dummy&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;http://i-am-just-an-example.com/dummy&lt;/a&gt;</code>&nbsp;.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/17MzqF90_GLGOfw3t7uso4w.png" alt="Where to set a request’s URL in Postman"></p>
<figcaption>Specify your request’s URL in Postman’s request&nbsp;UI</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Now, when you proceed to save this request, you’ll notice that Postman sets the request URL as the default name for your request. You can go ahead and save your request without changing this name and Postman won’t complain.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1ZpJ_c7rH5Ju8sVlsvRlSfA.png" alt="The dialog box that appears if you try to save your request in Postman"></p>
<figcaption>The dialog box that appears if you try to save your request in&nbsp;Postman</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Imagine having 50+ such requests in your Postman Collection, each with a name set as the request’s URL. Look how hard it is to locate a particular request in the left bar or in the documentation preview navigation:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1R3H8f2vXzAYd_MDq6pT0mw.png" alt="How a Postman Collection with lots of requests looks like if the requests’ default names are not changed"></p>
<figcaption>How a Postman Collection with lots of requests looks like if the requests’ default names are not&nbsp;changed</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">If you, as an API provider, are having trouble looking for a request, imagine how hard it will be for a completely new user looking to consume your API.</p>
<p class="">So, while Postman sets the request URL as your default name for a request to save you some time, it is highly recommended that you <strong>replace</strong> those names with ones which are more <strong>meaningful</strong>, <strong>short</strong> and <strong>user-friendly</strong>. Here is an example of <a href="https://www.apimatic.io/apidocs/apimatic/" target="_blank" rel="noreferrer noopener">APIMatic’s API</a> (ungrouped version) that I imported into Postman which makes better use of request naming:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/18hAcSdqQJ0bSIskfmG3QqA.png" alt="How a Postman Collection with lots of requests looks like if the requests’ default names are changed to more meaningful ones"></p>
<figcaption>How a Postman Collection with lots of requests looks like if the requests’ default names are changed to more meaningful ones</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>A good request name will, therefore:</p>
<ul class="">
<li>Be short and sweet — ideally less than 30 characters.</li>
<li>Ideally not contain any special characters/symbols.</li>
<li>Indicate the API resource you are trying to access/modify e.g. for APIMatic’s API this could be an “SDK”.</li>
<li>Indicate the action being performed on the API resource e.g. creating/generating an SDK.</li>
</ul>
<p class="">Of course, a good name is highly dependent on a good API design as well. However, generally speaking, your request name must at least clearly indicate to the user what he/she can achieve upon making this request.</p>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<h2 id="c437" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">2. Increase Discoverability ? — Group Related Requests</h2>
<p id="a218" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">In the previous section, you saw that the requests were thrown directly into a Collection without any grouping. To improve developer experience, you need to reduce the time it takes for your users to find a particular request/endpoint. Since Postman supports nesting, you should group related requests into&nbsp;<strong class="il jh">folders</strong>. Generally, all requests/endpoints dealing with a particular resource or feature should be grouped together. Here is what the&nbsp;<a class="cd ji" href="https://www.apimatic.io/apidocs/apimatic/" rel="noopener">APIMatic’s API</a>&nbsp;looks like after grouping:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep lp">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/15qhFoCGvNQnb8_OnEfhbbg.png" alt="What grouping requests in a folder in Postman looks like" width="1000" height="274"><figcaption class="wp-caption-text">What grouping requests in a folder in Postman looks like</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<h2 id="0594" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">3. Add Plenty of Descriptive Content in Your Postman Collections</h2>
<p id="ac80" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Your end-users are new to your API and know nothing about your offerings. Therefore, your documentation must be very clear and descriptive about everything. As a starting point, make sure that you have descriptions set for each of your important components in your Postman Collection.</p>
<p id="35cd" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Postman&nbsp;<a class="cd ji" href="https://learning.postman.com/docs/publishing-your-api/authoring-your-documentation/" rel="noopener">supports GitHub flavored Markdown syntax</a>so you can easily add any kind of descriptive content (lists, images, tables, etc.) pretty much everywhere including (but not limited to):</p>
<h3 id="782a" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.1. API Itself</h3>
<p id="98a8" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">A good place to inform your users what your API offers and how they can quickly gain access to its endpoints. Here is how Postman describes its API in its Postman Collection:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep mh">
<div class="mm s bz kk">
<div class="mn mo s">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1eKoeKSSAkYzStm2omxWsPw.png" alt="How descriptive content at API level is rendered in documentation" width="700" height="593"><figcaption class="wp-caption-text">How descriptive content at API level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="fa90" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.2. Folder Level</h3>
<p id="444e" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">When you click on a folder in the collection, you can add/edit its description (or documentation for newer Postman App versions). Here you can tell users more about what gels together the requests in this particular folder, e.g., which common feature they target or what common resource they are related to.</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep ms">
<div class="mm s bz kk">
<div class="mt mo s">
<div class="bv mi t u v mj aj dk mk ml">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1cRc_XuhnRHWsfHcAXP4_5Q.png" alt="How descriptive content at API level is rendered in documentation" width="700" height="239"><figcaption class="wp-caption-text">How descriptive content at folder level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="0c00" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.3. Request Level</h3>
<p id="a6ac" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">You can save a request’s description when saving/editing the request or later in the documentation section if you are using the latest Postman app. For request descriptions, tell users what the particular request/endpoint is expected to do, e.g., the kind of inputs it will accept and what it will return.</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep mu">
<div class="mm s bz kk">
<div class="mv mo s">
<div class="bv mi t u v mj aj dk mk ml">
<p class="mod-reset">&nbsp;</p>
</div>
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1tQMekQgXb9s3ZnTgUkEeHg.png" alt="How descriptive content at request level is rendered in documentation" width="700" height="265"><figcaption class="wp-caption-text">How descriptive content at request level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="9314" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.4. Request Parameters Level</h3>
<p id="2d0e" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">You can specify descriptions for your request parameters including query parameters and path variables. You can comment about what information that parameter stores and optionally any details related to the expected type of the parameter (a number, object or string, etc.) or any restrictions to its value, etc.</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep mw">
<div class="mm s bz kk">
<div class="mx mo s">
<div class="bv mi t u v mj aj dk mk ml">
<p class="mod-reset">&nbsp;</p>
</div>
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1A1R6_J_APXsxBjzBC-Jqsw.png" alt="How descriptive content at request params level is rendered in documentation" width="700" height="402"><figcaption class="wp-caption-text">How descriptive content at request params level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h2 id="d582" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">4. Don’t Forget the Examples!</h2>
<h3 id="2f63" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">4.1. Request Parameter Values</h3>
<p id="ecd4" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">During an API testing session, you must have provided some input values to the request parameters in order to get the response. If you have saved and published your collection with those values, they will show up in your documentation as examples, as can be seen below:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep my">
<div class="mm s bz kk">
<div class="mz mo s">
<div class="bv mi t u v mj aj dk mk ml">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1cOOkc3cv1pZEk1tdZ3edTQ.png" alt="How request params input values are rendered in documentation" width="700" height="266"><figcaption class="wp-caption-text">How request params’ input values are rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="7414" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">4.2. Request-Response Examples</h3>
<p id="4dfa" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Setting request values is not enough for giving a full picture of the capabilities of your particular request to your user. What happens if the user doesn’t send a required parameter? What happens if the parameter value is wrong? What happens if the user doesn’t authenticate the request? Luckily, Postman Collections have a<a class="cd ji" href="https://learning.postman.com/docs/sending-requests/examples/" rel="noopener">request-response example pair feature</a>&nbsp;where you can represent these scenarios easily. It is a bit hidden in the Postman app so it is quite likely that you probably missed it before. Click on the three dots next to the request’s name and choose “Add example”:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep na">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1p2tkfKricy8lxJO_YO3y8A.png" alt="How to add a request-response example from the request UI in Postman" width="1000" height="166"><figcaption class="wp-caption-text">How to add a request-response example from the request UI in Postman</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<p id="cef9" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">OR you can also save an example when you receive a response from your request in Postman, using the “Save an example” option:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nb">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1tc0XNxStG3dRSkougAVJKA.png" alt="How to add a request-response example from real response data in Postman" width="1000" height="263"><figcaption class="wp-caption-text">How to add a request-response example from real response data in Postman</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<p id="ee37" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Remember, that these examples are essentially request-response pairs which means that each response is tied to a particular request. To make the best use of this feature, there are a few things to keep in mind:</p>
<h4 id="f528" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx"><strong class="il jh">Examples Should Cover All Possible Response Status Codes</strong></h4>
<p id="175d" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Ideally, your examples should cover all possible response status codes<strong class="il jh">&nbsp;</strong>that your API request can return e.g. success codes in the range 2XX and error codes in the ranges 4XX and 5XX.</p>
<h4 id="a3da" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx"><strong class="il jh">Assign Unique Identifiers</strong></h4>
<p id="8b50" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Don’t forget to assign a short meaningful identifier to each request-response example pair. The identifier should summarize what scenario this example represents e.g. a success/error case. Postman groups together the examples tied to a particular request using these identifiers as you can see below:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nc">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1l4Rsv_8rPDiurLqJeXOkGQ.png" alt="Examples belonging to the same request can be navigated using the dropdown menu in documentation" width="700" height="593"><figcaption class="wp-caption-text">Examples belonging to the same request can be navigated using the dropdown menu in documentation.</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h2 id="9073" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">5. Setup Authentication Properly ?</h2>
<p id="ef39" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">For API testing, plenty of developers tend to pass the&nbsp;<code class="kk kl km kn ko b">Authorization</code>&nbsp;header directly for authenticating their requests. This is not recommended unless you have a really custom authentication flow. Postman&nbsp;<a class="cd ji" href="https://learning.postman.com/docs/sending-requests/authorization/" rel="noopener">natively supports various authentication types</a> that can be applied globally at API level and can also be overridden in individual requests e.g. OAuth 2.0 flows, Basic authentication, API keys etc. Setting up the right authentication flow for your API and requests within Postman helps configure your Postman Collection correctly. This in turn improves the documentation by enabling documentation generators to generate relevant authentication sections as shown below:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nd">
<div class="mm s bz kk">
<div class="ne mo s">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1hBSxhv2TkaVbCU94Uu5dhg.png" alt="Auto-generated sections in Postman if authentication is properly setup" width="700" height="433"><figcaption class="wp-caption-text">Auto-generated sections in Postman if authentication is properly setup</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h2 id="6705" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx"><strong class="bc">Taking Your Postman Collection Beyond API Documentation via&nbsp;</strong>APIMatic ?</h2>
<p id="6b40" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph=""><a class="cd ji" href="https://apimatic.io/" rel="noopener">APIMatic</a> offers a customizable&nbsp;<a class="cd ji" href="https://www.apimatic.io/developer-experience-portal" rel="noopener">developer experience solution</a>&nbsp;that comes bundled with rich features like SDKs, reactive code samples, API explorer, API description transformations and much more beyond simple API docs. If you are looking to generate your API documentation and SDKs in APIMatic from a Postman Collection, there are a few additional trips and tricks to improve the quality of generated documentation:</p>
<h3 id="80ea" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Make Your Request Names Code Generation Friendly</h3>
<p id="fa5f" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Since APIMatic’s documentation comes bundled with language-specific features like SDKs and reactive code samples in addition to the HTTP reference documentation, we expect users to take extra care of request naming conventions. This is because the request names from your Postman file are used for generating controller names and SDK components as part of the portal generation process. Therefore, names that are too long (greater than 50 characters) or use special characters are not recommended.</p>
<h3 id="e767" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Tweak Imported Models If Necessary ?</h3>
<p id="18a3" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">A unique feature of APIMatic is that we infer complex models from your request/response example values (at the time of importing the Postman Collection) to improve your experience with our SDKs/portal. To ensure that the models generated are a true representation of your API, here are a few additional recommendations:</p>
<ul class="">
<li id="8f32" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Examples must be valid and thorough</strong></li>
</ul>
<p id="04cc" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">The examples provided in the Postman Collection must be valid, thorough and ideally cover all possible properties in case complex objects are involved.</p>
<ul class="">
<li id="d278" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Fine-tune model information that can’t be deduced from examples</strong></li>
</ul>
<p id="f815" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Deducing models from examples may not always result in complete type information and may also not be 100% accurate every time. For example, it is not always apparent whether a particular property in the object is required or optional, whether a numeric property allows only integers or bigger values like long, double as well, etc. This is one big reason why formats like OpenAPI, RAML and others have a proper type system which Postman does not have. However, after your models are imported, you can always fine-tune<strong class="il jh">&nbsp;</strong>them in&nbsp;<a class="cd ji" href="https://www.apimatic.io/dashboard" rel="noopener">APIMatic’s API editor</a>&nbsp;to get the same behavior.</p>
<ul class="">
<li id="83a6" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Deduplicate models</strong></li>
</ul>
<p id="ebfc" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Since it is quite possible that two different components have very similar examples, therefore, the generated models may be, e.g., a subset of each other. While detecting this during the import process is not exactly possible, you can, however, deduplicate the models in the editor after the import process to improve the quality of the output documentation/SDKs.</p>
<ul class="">
<li id="68ee" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Improve generated model names</strong></li>
</ul>
<p id="133b" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">The names of the generated models are assigned based on the names of the component for which the example was provided. To prevent model name duplication in such cases, a number may be appended with the model names. For example, if you have a parameter named “status” in two requests A and B where both these parameters have different examples, it is possible that the generated models from these examples can end up with names like “status1” and “status2” respectively. To improve the output for such cases, you can upload our&nbsp;<a class="cd ji" href="https://docs.apimatic.io/advanced/apimatic-metadata" rel="noopener">Metadata file</a>&nbsp;along with your Postman Collection in the form of a ZIP file during import, with the “AppendParentNameForClashes”&nbsp;<a class="cd ji" href="https://docs.apimatic.io/advanced/apimatic-metadata/#import-settings" rel="noopener">import setting</a>&nbsp;enabled. As the name suggests, this will append the parent component’s name instead of a number at the end of the model name which will add more context and improve the overall output.</p>
<h3 id="4ff8" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Upload Environment Files</h3>
<p id="af69" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">If your Postman Collection makes use of environment variables, it is highly recommended that you upload your environment files along with your Postman Collection in the form of a ZIP file at the time of importing your file into APIMatic. These variables have no meaning in an API documentation, therefore, providing these files will help us resolve their values and display them properly.</p>
<h3 id="972b" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Add Markdown Guides</h3>
<p id="e11d" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Once you generate the API documentation in APIMatic from your Postman Collection, feel free to add additional quick-start&nbsp;<a class="cd ji" href="https://docs.apimatic.io/developer-experience-portal/customizing-your-portal/#guides" rel="noopener">custom Markdown guides</a>.</p>
<h2 id="4568" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">Generating Documentation from Postman Collection in APIMatic — A Quick Demo ?</h2>
<p id="ba7a" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Generating documentation in APIMatic involves a few quick steps which are explained below:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nf">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1EA0ELZNUDGgotEjR5h2Z6A.gif" alt="Curating Postman Collections To Generate Quality API Documentation &amp;&nbsp;SDKs. Workflow for previewing a portal from your Postman Collection in APIMatic with just a few clicks" width="1000" height="563"><figcaption class="wp-caption-text">Workflow for previewing a portal from your API description file in APIMatic with just a few clicks</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<ul class="">
<li id="bc4c" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><a class="cd ji" href="https://apimatic.io/account/register" rel="noopener">Sign up to APIMatic</a>, if you haven’t already.</li>
<li id="0b27" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph=""><a class="cd ji" href="https://docs.apimatic.io/getting-started/manage-apis/#add-an-api" rel="noopener">Import</a>&nbsp;your Postman Collection to the&nbsp;<a class="cd ji" href="https://apimatic.io/dashboard" rel="noopener">APIMatic Dashboard</a>&nbsp;by either uploading the file from your local system or providing a public URL.</li>
<li id="40e1" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">Your file will be validated. If there are any errors found during validation, you may need to resolve the issues before proceeding ahead.</li>
<li id="60f7" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">Once your file gets imported, click on the “Generate” button on the imported API entity.</li>
<li id="1202" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">Click on “Preview API Portal”.</li>
<li id="fda7" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">You will then be taken to the preview of your portal.</li>
</ul>
<p id="6df9" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">From there onwards, you can play around with your portal, generate SDKs or publish and customize the portal to suit your needs better. Please check out our documentation on&nbsp;<a class="cd ji" href="https://docs.apimatic.io/getting-started/previewing-your-first-portal/" rel="noopener">generating feature-packed API documentation</a>&nbsp;to learn more. Happy documenting! ?</p>
</div>
</div>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/">Curating Postman Collections To Generate Quality API Documentation &#038; SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>API Transformer Recipes: Enabling Postman’s Team Sharing Features for OpenAPI Users</title>
		<link>/blog/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users/</link>
					<comments>/blog/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Thu, 22 Nov 2018 10:53:46 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[OpenAPI]]></category>
		<category><![CDATA[Postman]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[OpenApi]]></category>
		<category><![CDATA[Team Collaboration]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=579</guid>

					<description><![CDATA[<p>This blog is first of the many to come as part of my new series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&#160;API Transformer&#160;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users/">API Transformer Recipes: Enabling Postman’s Team Sharing Features for OpenAPI Users</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="579" class="elementor elementor-579">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-787f8752 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="787f8752" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-7ae21081" data-id="7ae21081" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-64199452 elementor-widget elementor-widget-text-editor" data-id="64199452" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="alignnone wp-image-580" src="/wp-content/uploads/2021/12/1_2lEC0iYnVTvZGXa7gZ00sg-1024x683.jpg" alt="API Transformer Recipes: Enabling Postman’s Team Sharing Features for OpenAPI Users" width="1024" height="683"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="81d0" class=""><em>This blog is first of the many to come as part of my new series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&nbsp;</em><a href="http://apimatic.io/transformer"><em>API Transformer</em></a><em>&nbsp;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted to a particular set of tools just because they use a certain API specification format.</em></p>
<p id="486c" class="">Are you an <a href="http://swagger.io/specification/">OpenAPI</a> user looking to use&nbsp;<a href="https://www.getpostman.com/">Postman</a>&nbsp;somewhere in your development pipeline but don’t really know how? Well, then, you are in the right place. In this blog, I will show you how being an&nbsp;&nbsp;OpenAPI&nbsp;&nbsp;user (or a Swagger one if you prefer the old name) should not stop you from taking advantage of some of the very powerful team collaboration&nbsp;&nbsp;Postman&nbsp;&nbsp;features.</p>
<h2 id="a655" class="">Postman Team Collaboration Features</h2>
<p id="4438" class="">Postman’s easy-to-use and rich interface attracts a large number of users. If you have a team working on APIs, it offers team workspaces to let your team efficiently and effectively collaborate over those APIs while establishing a single source of truth.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-581 aligncenter" src="/wp-content/uploads/2021/12/1_pnc_7FATLxmRqVEBsBWpLA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3f36" class="">Postman has also exposed their <a href="https://docs.api.getpostman.com/">API</a>&nbsp;using which you and your team members can easily push latest collections/API specifications from within your applications.</p>
<h2 id="afc3" class="">From OpenAPI to Postman</h2>
<p id="51a8" class="">&nbsp;OpenAPI is a preferred choice of majority of the users out there due to its extensive support of a wide range of APIs and a strong community. While there are tools out there that support team collaboration for OpenAPI files e.g.&nbsp;<a href="https://swagger.io/tools/swaggerhub/"> SwaggerHub</a>, it may be that you are on the lookout for alternatives. The reasons to that are purely dependant on personal preferences, the type of project you are working on or the size of your team. So if you maintain your specs in&nbsp;&nbsp;OpenAPI but are looking to use&nbsp; Postman, simply including <a href="http://apimatic.io/transformer">API Transformer</a>&nbsp;in your workflow will help achieve your goal.</p>
<p id="e358" class="">One of our customers Phil Sturgeon, who works at <a href="https://www.wework.com/">WeWork</a>, maintains specs in OpenAPI&nbsp;&nbsp;but uses Postman to share them with his team. To streamline this workflow, he makes use of&nbsp;&nbsp;API Transformer. You can check out his blog <a href="https://engineering.wework.com/our-api-specification-workflow-9337448d6ee6">here</a>&nbsp;to learn more.</p>
<h2 id="1bec" class="">Deep Dive Into the Flow</h2>
<p id="eb32" class=""><em>The steps discussed below demonstrate the use of APIs for converting your files and pushing them to</em>&nbsp;<em>Postman</em><em>. However, if you have quite a few files that needs processing you can opt to use the GUIs instead. It is entirely up to you.</em></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-582 aligncenter" src="/wp-content/uploads/2021/12/1_lLs3msYrocpEm3VPWCC9Cw-1024x448.png" alt=""></p>
<figcaption>From OpenAPI to Postman: Complete Workflow</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="d73b" class="">The steps involved for you to convert your OpenAPI files to a Postman compatible format are simply:</p>
<h3 id="6cdb"><strong>Step 1: Collect your OpenAPI files</strong></h3>
<p id="7b42" class="">Collect all OpenAPI files you intend to use in&nbsp;&nbsp;Postman. These can be new or updated versions of the existing ones. Pass them one by one as input to the next step.</p>
<h3 id="2420" class=""><strong>Step 2: Transform each file using API Transformer</strong></h3>
<p id="0ccb" class="">The&nbsp;&nbsp;Postman&nbsp;&nbsp;app and&nbsp;&nbsp;API&nbsp;&nbsp;accepts&nbsp;<a href="https://schema.getpostman.com/">Postman schema files</a> as import formats. To use an&nbsp;&nbsp;OpenAPI&nbsp;&nbsp;file in&nbsp;&nbsp;Postman&nbsp;&nbsp;you would, therefore, need to convert it to an appropriate version of the&nbsp;&nbsp;Postman schema file. This is where&nbsp;&nbsp;API Transformer&nbsp;&nbsp;comes into play which supports both schema versions 1.0 and 2.0 .</p>
<p id="c158" class="">So as part of this step, to convert your file, you will need to use the appropriate API Transformer endpoint from the <a href="https://www.apimatic.io/apidocs/apimatic/">CodeGen and Transformer API</a>. Pass&nbsp;&nbsp;OpenAPI&nbsp;&nbsp;file as input along with Postman chosen as the output format (v1.0 or v2.0). If the file is valid, the&nbsp;&nbsp;API&nbsp;&nbsp;will respond with the Postman file which you can then pass on to the next step.</p>
<h3 id="a26f"><strong>Step 3: Push each Postman Schema File to Postman</strong></h3>
<p id="b813" class="">This step involves the use of Postman API to push each of the transformed files into&nbsp;&nbsp;Postman . Once that is done, Postman will automatically sync this file for all the team members giving them the latest view instantly.</p>
<p id="9318" class="">And that’s about it. It is as simple to enable Postman&#8217;s team sharing features for OpenAPI users.</p>
<p id="939e" class="">Continue reading:<br>a) <a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest">Part 2 of API Transformer Recipes — Facilitating Migration from SOAP to REST</a><br>b) <a href="https://apimatic.io/blog/2019/01/api-transformer-recipes-opening-ways-into-ibm-api-connect">Part 3 of API Transformer Recipes — Opening ways into IBM API Connect</a><br>c) <a href="https://apimatic.io/blog/2019/07/moving-to-graphql-from-soap-or-rest">Part 4 of API Transformer Recipes — Moving to GraphQL from SOAP or REST</a><br>d) <a href="https://apimatic.io/blog/2020/06/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api">Part 5 of API Transformer Recipes — The Whys and Hows of Exposing a SOAP Service Using Your REST API</a></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users/">API Transformer Recipes: Enabling Postman’s Team Sharing Features for OpenAPI Users</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Unlocking API formats for Postman Collections</title>
		<link>/blog/unlocking-api-formats-for-postman-collections/</link>
					<comments>/blog/unlocking-api-formats-for-postman-collections/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Tue, 17 Jan 2017 11:02:53 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api Description Formats]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[Apimatic Partners]]></category>
		<category><![CDATA[Postman]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=495</guid>

					<description><![CDATA[<p>The post <a rel="nofollow" href="/blog/unlocking-api-formats-for-postman-collections/">Unlocking API formats for Postman Collections</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="495" class="elementor elementor-495">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-5e2fdd25 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="5e2fdd25" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-5621ff59" data-id="5621ff59" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4ab79915 elementor-widget elementor-widget-text-editor" data-id="4ab79915" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><!-- wp:image --></p>
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-496 aligncenter" src="/wp-content/uploads/2021/12/1_FQ_LE80hlKmCJMsqjO9nZQ.jpg" alt="Unlocking API formats for Postman Collections using APIMatic" width="1000" height="400"></p>
</figure>
<p class="mod-reset"><!-- /wp:image -->

<!-- wp:paragraph --></p>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8c1c" class="">It would be surprising to know if you are reading this and have not heard of or used Postman before. Postman is one of the most commonly used tools for API development and testing. We at APIMatic, along with a growing community of more than 3 Million people, have been using Postman on a daily basis for the past couple of years.</p>
<p id="a30e" class="">One of the most useful features of Postman is collections. A Collection allows you to group together different endpoints in an API description format. Aptly named the Postman Collection, it is a shareable entity that can be exported from and imported into the Postman ecosystem.</p>
<p id="892f" class="">APIMatic’s API Transformer allows conversions of API descriptions to and from both the stable versions of the Postman Collection Format. Postman is planning to add the API Transformer as an integration to its Postman Pro platform. We recently talked to Ankit, Postman’s CTO, about these integrations and would like to share with you what he had to say.</p>
<p id="28ea" class=""><em>What is Postman using API Transformer for?</em></p>
<p id="c09c" class=""><strong>Ankit:</strong> The&nbsp;<a href="https://www.getpostman.com/products">Postman Pro</a>&nbsp;platform integrates with repository hosting services like GitHub to backup and synchronize Postman Collections. We are in the process of adding an integration with APIMatic’s API Transformer to store a Collection in formats like Swagger, API Blueprint, RAML among others in a repository of the user’s choice.</p>
<p id="a4bc" class=""><em>Why do you need support for multiple API description formats?</em></p>
<p id="4e31" class=""><strong>Ankit:</strong> We’ve always envisioned and aspired for Postman to be an open ecosystem and 3rd party Integrations allow us to move one step forward in that direction. We’re happy to support any API description format that fits into our users’ workflow and improves their productivity.</p>
<p id="c2ca" class=""><em>How did you discover API Transformer?</em></p>
<p id="432d" class=""><strong>Ankit:</strong> We’ve been following API Transformer for a while now since learning about it from Kin Lane at API Evangelist. When Kartik, from your team, reached out with news of Postman Collection support, I realized that it would be a great addition to our platform adding immense value to our users.</p>
<p id="366c" class=""><em>What monetary or temporal benefit did you get from API Transformer?</em></p>
<p id="e53d" class=""><strong>Ankit:</strong> Off the top of my head, API Transformer saves us tens of thousands of dollars in development and upkeep costs. I’m quite confident that our fantastic partner, APIMatic, would stay abreast of all the latest developments in the API description formats landscape, providing us frequent updates while allowing us to focus on myriad aspects of development workflow.</p>
<p id="5e76" class=""><em>What are your future plans for use of API Transformer?</em></p>
<p id="157c" class=""><strong>Ankit:</strong> With this integration, APIMatic and API Transformer become first-class citizens of the Postman Pro platform. Going forward, we intend to allow users to configure their own APIMatic accounts with this integration to enjoy the benefit of Real-time sync with the repository hosting service and the API description format of their choice!</p>
<p id="aaf4" class="">We are really excited to have Postman on board with us and are hopeful that other big players in the API space will also start making use of API Transformer soon to save costs and time. Stay tuned for further updates and get in touch if you would like to find out how you can incorporate API Transformer in your product.</p>
</div>
</div>
</div>
</div>
<p class="mod-reset"><!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /--></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/unlocking-api-formats-for-postman-collections/">Unlocking API formats for Postman Collections</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/unlocking-api-formats-for-postman-collections/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Introducing New Supported Formats: RAML 1.0, Postman 2.0</title>
		<link>/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/</link>
					<comments>/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 25 Nov 2016 10:53:46 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Api Description]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Postman]]></category>
		<category><![CDATA[Raml]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=469</guid>

					<description><![CDATA[<p>The wait is over! We have added RAML 1.0 and Postman 2.0 to our list of &#160;supported API formats. So grab your RAML 1.0 or Postman 2.0 APIs and start converting them to other formats of your choice or convert your existing APIs to these new formats. Unlike before, you can now also convert your [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/">Introducing New Supported Formats: RAML 1.0, Postman 2.0</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="469" class="elementor elementor-469">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-22a9c99d elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="22a9c99d" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-3452a568" data-id="3452a568" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-b371405 elementor-widget elementor-widget-text-editor" data-id="b371405" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="f95e" class="">The wait is over! We have added RAML 1.0 and Postman 2.0 to our list of &nbsp;supported API formats. So grab your RAML 1.0 or Postman 2.0 APIs and start converting them to other formats of your choice or convert your existing APIs to these new formats. Unlike before, you can now also convert your APIs to Postman 1.0.</p>
<p id="03ae" class="">For this blog, we will be using the APIMatic Calculator API description file as an example. You can grab this file when you export this API from the APIMatic Dashboard to APIMATIC format.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="alignnone wp-image-470" src="/wp-content/uploads/2021/12/1__9vtGsvibJsI-8DJ9T9TmA.png" alt="APIMatic now supports API Formats RAML 1.0, Postman 2.0  " width="348" height="399"></p>
<figcaption>Export API Description</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="cad9" class="">RAML 1.0</h2>
<p id="2b03" class="">You can import your RAML 1.0 APIs from the Dashboard or you can use our Transformer to convert RAML 1.0 files to other supported API formats. You can even generate RAML 1.0 files from APIs in other API formats using the Transformer.</p>
<p id="ae17">Navigate to the Transformer and using the Calculator API convert it to RAML 1.0 as follows:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="alignnone wp-image-471" src="/wp-content/uploads/2021/12/1_GVnuShzdGUdth4cBFAfDnQ.png" alt="API Conversion" width="700" height="441"></p>
<figcaption>API Conversion</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="a871" class="">After successful conversion, you will get your converted file in RAML 1.0 format.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-472" src="/wp-content/uploads/2021/12/1_HEea_w9CtqEk_gJ4lWN7ng.png" alt=""></p>
<figcaption>API Transformer</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:preformatted -->
<pre class=""><code class="language-yaml">#%RAML 1.0
title: APIMATIC Calculator
version: 1.0
baseUri: http://examples.devapi.dream.press/apps/calculator
documentation:
- title: APIMATIC Calculator
content: Simple calculator API hosted on APIMATIC
/{operation}:
get:
 displayName: Calculate
 description: Calculates the expression using the specified  
 operation.
 queryParameters:
    x:
     required: true
     displayName: x
     description: The LHS value
     type: number
     format: double
    y:
     required: true
     displayName: y
     description: The RHS value
     type: number
     format: double
    responses:
     200:
    description: Success
    body:
     text/plain:
      displayName: response
      type: number
      format: double
    uriParameters:
     operation:
      required: true
      displayName: operation
      description: The operator to apply on the variables
      type: string
      enum:
      - SUM
      - SUBTRACT
      - MULTIPLY
      - DIVIDE</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="7d07">You can also convert from RAML 1.0 back to other formats as required.</p>
<h2 id="db8d" class="">Postman</h2>
<p id="3aa4" class="">You can now convert back and forth from Postman 2.0 files. Support for converting from Postman 1.0 to other formats has been there for a while. But now we offer support for Postman 1.0 export as well. You can import your Postman 2.0 APIs from the Dashboard or you can use our <a href="https://docs.devapi.dream.press/api-transformer/overview-transformer">Transformer</a> to convert Postman 2.0 files to other supported formats.</p>
<p id="fb60" class="">Go to Transformer and convert your Calculator API to Postman 1.0 or Postman 2.0 as per your choice. For our example we will be converting to Postman 2.0.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-474" src="/wp-content/uploads/2021/12/1_9PNn2GIzIZ4pDdU27gE9uw.png" alt=""></p>
<figcaption>API Conversion in Postman</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="c7b2">After successful conversion, you will get your converted file in Postman 2.0 format</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">{
  &quot;info&quot;: {
    &quot;name&quot;: &quot;APIMATIC Calculator&quot;,
    &quot;_postman_id&quot;: &quot;a2022ecc-bc18–42bc-9fd4-ccd964606911&quot;,
    &quot;description&quot;: &quot;Simple calculator API hosted on APIMATIC&quot;,
    &quot;schema&quot;: &quot;https://schema.getpostman.com/json/collection/v2.0.0/&quot;
  },
  &quot;item&quot;: [
    {
      &quot;name&quot;: &quot;Simple Calculator&quot;,
      &quot;item&quot;: [
        {
          &quot;id&quot;: &quot;e95fc07e-85eb-40f3-a59a-99e57a808c0e&quot;,
          &quot;name&quot;: &quot;Calculate&quot;,
          &quot;request&quot;: {
            &quot;url&quot;: {
              &quot;protocol&quot;: &quot;http&quot;,
              &quot;host&quot;: &quot;examples.devapi.dream.press&quot;,
              &quot;path&quot;: [
                &quot;apps&quot;,
                &quot;calculator&quot;,
                &quot;:operation&quot;
              ],
              &quot;port&quot;: &quot;80&quot;,
              &quot;query&quot;: [
                {
                  &quot;key&quot;: &quot;x&quot;,
                  &quot;value&quot;: &quot;undefined&quot;
                },
                {
                  &quot;key&quot;: &quot;y&quot;,
                  &quot;value&quot;: &quot;undefined&quot;
                }
              ],
              &quot;variable&quot;: [
                {
                  &quot;id&quot;: &quot;operation&quot;,
                  &quot;value&quot;: &quot;&quot;
                }
              ]
            },
            &quot;method&quot;: &quot;GET&quot;,
            &quot;body&quot;: {
              &quot;mode&quot;: &quot;raw&quot;
            }
          },
          &quot;response&quot;: [
            {
              &quot;code&quot;: 200
            }
          ]}]}]}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="c378">You can directly import this file into your Postman app.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-476" src="/wp-content/uploads/2021/12/1_kdKijfORq8rs8iIVibfgMg.png" alt=""></p>
<figcaption>Postman App</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="6598" class="">After successful conversion, you will get your converted file in RAML 1.0 format.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-477" src="/wp-content/uploads/2021/12/1_3ecP0GAtLc-LKTGTycd2wg.png" alt=""></p>
<figcaption>Postman App</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Do you have an APIMatic API definition that also includes test cases? Good news! Exporting to Postman will create completely ready-to-test collection of requests.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/">Introducing New Supported Formats: RAML 1.0, Postman 2.0</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
