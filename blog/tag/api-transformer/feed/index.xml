
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>API Transformer Archives - APIMatic</title>
	<atom:link href="/blog/tag/api-transformer/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Tue, 21 Dec 2021 07:08:08 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.4</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>API Transformer Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>A GitHub Action for Transforming APIs</title>
		<link>/blog/a-github-action-for-transforming-apis/</link>
					<comments>/blog/a-github-action-for-transforming-apis/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 30 Nov 2020 09:42:40 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[GitHub Actions]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[automation]]></category>
		<category><![CDATA[Github]]></category>
		<category><![CDATA[github actions]]></category>
		<guid isPermaLink="false">https://apimatic-blog.000webhostapp.com/?p=128</guid>

					<description><![CDATA[<p>How does it work? This Github Action uploads and converts any API Specification into one of the supported formats listed here, The user just need to use the GitHub action in their repository on GitHub and provide the API Specification URL and export format as the arguments to the action. It provides the URL to [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/a-github-action-for-transforming-apis/">A GitHub Action for Transforming APIs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="128" class="elementor elementor-128" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-fe52aa3 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="fe52aa3" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-458ce4a4" data-id="458ce4a4" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-63d0add elementor-widget elementor-widget-text-editor" data-id="63d0add" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.5.6 - 28-02-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-129" src="/wp-content/uploads/2021/12/1_1tkLbPa_i4tXkimSG-PrUA.png" alt="A GitHub Action for Transforming APIs" width="800" height="320"></p>
</figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Recently, there has been a lot of talk around <a href="https://github.com/features/actions" target="_blank" rel="noreferrer noopener">GitHub Actions</a>, and the wide range of features it can offer with just a simple YAML based workflow file!</p>
<h2 class=""><strong>What are GitHub Actions?</strong></h2>
<p class="">GitHub Actions connect all of your tools to automate every step of your development workflow. Easily deploy to any cloud, create tickets in Jira, or publish a package to npm. If you want to understand how GitHub actions work and how to set up existing actions from the <a href="https://github.com/marketplace?type=actions" target="_blank" rel="noreferrer noopener">GitHub marketplace</a> then you should look at this <a href="https://gabrieltanner.org/blog/an-introduction-to-github-actions" target="_blank" rel="noreferrer noopener">guide</a>.</p>
<p class="">In this article, we will use a&nbsp;<a href="https://github.com/marketplace/actions/apimatic-transformer" target="_blank" rel="noreferrer noopener">GitHub Action for API Transformer</a> for transforming API’s to the <a href="https://www.apimatic.io/transformer/#supported-formats" target="_blank" rel="noreferrer noopener">supported formats</a> by APIMatic.</p>
<h2 class=""><strong>What is APIMatic Transformer?</strong></h2>
<p class="">APIMatic Transformer allows its users to convert between different API description formats e.g. Swagger, RAML, etc. This enables the user to benefit from a wide range of tools available associated with any format, not just one.</p>
<h2 class=""><strong>APIMatic Transformer GitHub Action</strong></h2>
<p class="">We at APIMatic have created a GitHub action for our users that lets them use APIMatic Transformer through a GitHub action available on the GitHub marketplace to help them establish CI/CD pipelines and automating their workflows.</p>
</div>
</div>
</div>
</div>
<!-- /wp:image -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1zfsvPTFhptMO64pIVBLO-g.png" alt=""></p>
<figcaption>Workflow file using APIMatic Transformer GitHub&nbsp;action</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2><strong>How does it work?</strong></h2>
<p class="">This <a href="https://github.com/actions" target="_blank" rel="noreferrer noopener">Github Action</a> uploads and converts any API Specification into one of the supported formats listed <a href="https://www.apimatic.io/transformer/#supported-formats" target="_blank" rel="noreferrer noopener">here</a>, The user just need to use the GitHub action in their repository on GitHub and provide the API Specification URL and export format as the arguments to the action. It provides the URL to the converted API specification in the format specified by the user.</p>
<p>Here is an example workflow file that explains how you can use it with your GitHub repository:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:prismatic/blocks -->
<pre class=""><code class="language-yaml">steps:
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
      - name: APIMatic Transformer
        uses: apimatic/apimatic-transformer-action@v0.1
        id: transform
        with:
         auth: ${{ secrets.Test }}
         inputURL: &#039;https://petstore.swagger.io/v2/swagger.json&#039;
         exportFormat: &#039;raml&#039;
     # Use the Transformed API Spec as output from our action (id:transform)
      - name: Get the API Spec URL
        run: echo &quot;${{ steps.transform.outputs.specurl }}&quot;</code></pre>
<!-- /wp:prismatic/blocks -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>Now let me explain how this is working by directing each of the above-mentioned steps.</p>
<p class="">We are using <code>steps:</code> to let actions know that we are creating a step below with the name <code>Checkout</code></p>
<p>We are using <code>uses: actionscheckout@v2</code> which means that our step <code>Checkout</code> is using another action called <code>checkout</code> that checks out the current repository and use it.</p>
<p class="">Then we have the Transform API Spec step which is actually transforming the API Spec, Here <code>apimatic-transformer-action</code> is the name of the action, and <code>id:transform</code> is just a unique id assigned to this step so we can use output generated through this step in later steps. We are passing <code>auth: ${{ secrets.Test }}</code> that actually uses the secret Test stored in the current repository’s secrets, It is recommended to create an <a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets" target="_blank" rel="noreferrer noopener">encrypted secret</a> for the APIMatic API token (<code>auth</code>).</p>
<h3 class=""><strong>How to create a Basic Authorization token using your APIMatic account?</strong></h3>
<ul class="">
<li>You need to sign up for APIMatic <a href="https://www.apimatic.io/account/register" target="_blank" rel="noreferrer noopener">here</a> using your company email address.</li>
<li>Purchase subscription for APIMatic as per your relevant requirement, details of pricing mentioned <a href="https://www.apimatic.io/pricing" target="_blank" rel="noreferrer noopener">here</a>.</li>
<li>Visit <a href="https://www.blitter.se/utils/basic-authentication-header-generator/" target="_blank" rel="noreferrer noopener">Basic AUTH generator</a>, Enter your email and password to generate the Basic Authorization token which will look like this: Authorization: Basic dGVzdEB0ZXN0LmNvbTpyYW5kb20=</li>
<li>Now visit the repository on GitHub where you want to use this GitHub action, Select settings &gt; secrets and Add a new secret and fill in the details as shown below:</li>
</ul>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1KGipCwDXL7ZHhU3qBvWhaQ.png" alt=""></p>
<figcaption>Adding a secret to the GitHub repository</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">We are also passing inputURL and exportFormatas the other arguments for this step and they are corresponding to the API Specification URL and the required format by the user.</p>
<p>In the last step, we are just getting the URL for the generated API Spec in the required format so we can download it and use it as required.</p>
<p>Here is a complete workflow file with multiple steps generating different formats of API using the same APIMatic Transformer GitHub action:</p>
</div>
</div>
</div>
</div>
<pre class=""><code class="language-yaml">name: APITransformer
on: [push]
jobs:
  Test_Transformer:
    runs-on: ubuntu-latest
    name: Testing API Transformer Action
    steps:
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: APIMatic Transformer
        uses: apimatic/apimatic-transformer-action@v0.1
        id: raml
        with:
         auth: ${{ secrets.Test }}
         inputURL: &#039;https://github.com/mujjazi/apimatic-transformer-action/blob/master/bookingpal.json&#039;
         exportFormat: &#039;raml&#039;
     # Use the Transformed API Spec as output from our action (id:raml)
      - name: Get the API Spec URL
        run: echo &quot;${{ steps.raml.outputs.specurl }}&quot;
        
      - name: APIMatic Transformer
        uses: apimatic/apimatic-transformer-action@v0.1
        id: wsdl
        with:
         auth: ${{ secrets.Test }}
         inputURL: &#039;https://github.com/mujjazi/apimatic-transformer-action/blob/master/bookingpal.json&#039;
         exportFormat: &#039;wsdl&#039;
     # Use the Transformed API Spec as output from our action (id:wsdl)
      - name: Get the API Spec URL
        run: echo &quot;${{ steps.wsdl.outputs.specurl }}&quot;</code><code></code></pre>
<!-- /wp:paragraph -->

<!-- wp:preformatted /-->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">After adding all these details, save the main.yml file and commit the changes to the repository.</p>
<p class="">Now we will make some changes to our API Specification and commit those changes to the repository so that this action is triggered and generate the URL to download the updated API Specification in the required format as shown below:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1quKQkSlhXp_MiRw6RpVvjA.gif" alt=""></p>
<figcaption>Downloading the latest API Specification in the required&nbsp;format</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 class=""><strong>Summary</strong></h2>
<p class="">The GitHub actions are definitely going to be useful in the long term specifically with respect to the CI/CD benefits they offer and it can be really helpful for those maintaining API Specifications on GitHub. With the advancements in technology, you have to make sure that you are equipped with the latest tools for automation and CI/CD so that you can keep up with the market competition and ensure faster release times with excellent quality.</p>
<p class="">We have created this action as per the requests from the customers that they need to use APIMatic Transformer with GitHub actions, Stay tuned and we will be offering more features through GitHub actions in the future.</p>
<p class="">Feel free to use this action and share your feedback, You can always <a href="https://www.apimatic.io/contact" target="_blank" rel="noreferrer noopener">reach out to our team</a> to discuss further regarding APIMatic and its products.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/a-github-action-for-transforming-apis/">A GitHub Action for Transforming APIs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/a-github-action-for-transforming-apis/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The Whys and Hows of Exposing a SOAP Service Using Your REST API</title>
		<link>/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/</link>
					<comments>/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Mon, 22 Jun 2020 13:12:15 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SOAP]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[Rest]]></category>
		<category><![CDATA[Soap]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=1183</guid>

					<description><![CDATA[<p>This blog is the fifth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&#160;API Transformer&#160;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it should eliminate any assumptions that they might have about being restricted to [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/">The Whys and Hows of Exposing a SOAP Service Using Your REST API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1183" class="elementor elementor-1183" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-29e95da2 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="29e95da2" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-76519aca" data-id="76519aca" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-6585503a elementor-widget elementor-widget-text-editor" data-id="6585503a" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12"><!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column" style="flex-basis: 100%;"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_2SKA02w5_032Y4Yg5SEvTw-1024x682.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column" style="flex-basis: 100%;"><!-- wp:paragraph -->
<p class=""><em>This blog is the fifth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&nbsp;</em><a href="https://www.apimatic.io/transformer"><em>API Transformer</em></a><em>&nbsp;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it should eliminate any assumptions that they might have about being restricted to a particular set of tools just because they use a certain API specification format.</em></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns --></div>
</div>
<!-- /wp:group -->

<!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p id="3e6f" class="">You can find numerous debates out there on the topic of “SOAP vs REST” including those that believe&nbsp; REST is the new SOAP.&nbsp;Depending on your service and its target consumers, it might actually be a good idea (albeit rarely) to provide that service in the form of both SOAP and REST APIs. Sounds like an awful load of work? Perhaps not. Let’s dig deeper.</p>
<!-- /wp:paragraph --></div>
</div>
<!-- /wp:group -->

<!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p id="3dcb" class="">You can also check out one of my earlier blogs on a similar topic where I shared some tips on<a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest">migrating your SOAP APIs to REST</a>.</p>
<!-- /wp:paragraph --></div>
</div>
<!-- /wp:group -->

<!-- wp:paragraph -->
<h2 class=""><strong>Is REST not enough?</strong></h2>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="e560" class="">A lot of businesses today have adapted the RESTful approach for their services as it provides a more flexible, lightweight, and efficient solution as compared to the other available alternatives. While this holds true for most cases, there can be times when you’ll find your clients (especially enterprises) seeking a SOAP service to integrate with. Some of the reasons for that can be:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="">
<li>Being slow adopters, enterprise clients might be reluctant to shift to REST since it is still a relatively newer approach to things and differs greatly from the rigid contract-based approach used by SOAP.</li>
<li>Tools and infrastructure used by enterprise clients may not yet support REST well.</li>
</ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p id="0855">Keeping this in mind, it may be useful to expose your REST service partially/completely in the form of a SOAP service as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h2 class=""><strong>Real-life Use Cases</strong></h2>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d89b" class=""><a href="https://www.salesforce.com/in/?ir=1">Salesforce</a>&nbsp;provides some APIs as both SOAP and REST allowing developers to integrate in a way that suits them best e.g. check out their&nbsp;<a href="https://developer.salesforce.com/docs/atlas.en-us.api_tooling.meta/api_tooling/intro_api_tooling.htm">Tooling API</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7b09" class="">One of our clients at APIMatic,&nbsp;<a href="https://www.cdq.ch/">CDQ AG</a>, is a data centric company. Their RESTful services provide a link between their cloud services and business applications. To facilitate smooth integration for enterprise customers, whose infrastructure does not support REST well, they have exposed the same APIs as SOAP services/WSDL interfaces too. This WSDL serves as a contract for both parties. To keep their REST and SOAP APIs in sync, they have integrated&nbsp;<a href="https://www.apimatic.io/transformer/">API Transformer</a>&nbsp;into their workflow which helps generate a new version of the WSDL for every change in their REST API (more on this later). With the newer WSDL, they update their SOAP service accordingly and in order to access the latest changes their service consumers also eventually update their applications based on this latest WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>SOAP and WSDL</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="076c" class="">While it is not mandatory for every SOAP service to have a WSDL file associated with it, it is widely used as a contract between the SOAP service provider and its consumer. This file provides a complete definition of how the service works, the various operations involved and other fine grain details of all elements and attributes involved. Many tools exist that lets you generate method stubs in almost any language if you have the WSDL file with you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3><strong>From REST to SOAP, Using API Transformer</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="1af0" class="">One of the less obvious but distinctive features of&nbsp;<a href="https://www.apimatic.io/transformer/">API Transformer</a>&nbsp;is its ability to convert REST APIs to SOAP by generating WSDL files from popular formats used to describe REST APIs like OpenAPI/Swagger, RAML, API Blueprint, etc. We’ve seen, on average, over 50 unique transformations (unique per user) to WSDL every month for the past three years since this feature was launched.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure style="width: 700px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2021/12/1__B0qfzhhuvta5UoEBWqIWw.png" alt="API Transformer WSDL Export Trend (Jun 2017 — Jun 2020)" width="700" height="292"><figcaption class="wp-caption-text">API Transformer WSDL Export Trend (Jun 2017 — Jun 2020)</figcaption></figure>
<figcaption></figcaption>
Note, however, that the REST APIs spoken of here include not only APIs that completely follow REST architecture style but also those that follow more of a hybrid approach between REST and RPC style.</figure>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h2><strong>Generating WSDL from REST &#8212; How does this work?</strong></h2>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7341" class="">I went ahead and created a sample OpenAPI&nbsp;<code>v3.0</code>&nbsp;file which I then converted to WSDL using&nbsp;<a href="https://www.apimatic.io/transformer/">API Transformer</a>. Using these files, I will now show you the inner workings of the conversion below. If you are interested to see the complete files, you can find them<a href="https://github.com/fariadev22/api-transformer-recipes/tree/master/Exposing%20a%20SOAP%20API%20Using%20REST">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>1. API Information</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="14f8">During the conversion, details related to the API like its identifying title, description and server URLs are extracted from the OpenAPI file and placed in the relevant service metadata of WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p class=""><strong><em>OpenAPI:</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<pre class=""><code class="language-json">openapi: 3.0.0
info:
  title: HelloService
  description: Swagger file for generating WSDL
version: &#039;1.0&#039;
servers:
  - url: https://www.example.com/SayHello/</code></pre>
<!-- /wp:paragraph -->

<!-- wp:paragraph --><strong><em>WSDL:</em></strong> <!-- /wp:paragraph -->

<!-- wp:paragraph -->
<pre class=""><code class="language-xml">&lt;service name=&quot;HelloService&quot;&gt;
  &lt;documentation&gt;Swagger file for generating WSDL&lt;/documentation&gt;
  &lt;port name=&quot;default_Port&quot; binding=&quot;wsdl:HelloService_Binding&quot;&gt;
    &lt;soap:address location=&quot;https://www.example.com/SayHello/&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
  &lt;/port&gt;
&lt;/service&gt;</code></pre>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>2. OpenAPI Paths</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p class="">Generally, the relative paths in OpenAPI help identify RESTful resources and associated with each of these paths are the various operations possible on these resources. However, these paths have no significance in SOAP/WSDL because the concept of resources is restricted to RESTful APIs only. Only their associated operations are converted to WSDL operations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>3. OpenAPI Operations vs WSDL Operations</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->WSDL operations are defined in an abstract way inside the port types and their concrete details are provided in the bindings. Information from OpenAPI operations is loaded into both these port types and binding operations. <!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p class=""><em><strong>OpenAPI</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<pre class=""><code class="language-json">/message:
   get:
     tags:
      - Messages
     description: View message entry
     operationId: GetMessage
     parameters:
       - name: messageId
         in: query
         required: true
         schema:
           type: string
     responses:
       200:
         description: Message object against the id, if found
         content:
           application/json:
             schema:
               $ref: &#039;#/components/schemas/Message&#039;
       404:
         description: No messages found
         content:
           application/json:
             schema:
               $ref: &#039;#/components/schemas/Error&#039;</code></pre>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="4899" class=""><em><strong>WSDL</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;portType name=&quot;HelloService_PortType&quot;&gt;
  &lt;operation name=&quot;GET_GetMessage&quot;&gt;
    &lt;documentation&gt;View message entry&lt;/documentation&gt;
    &lt;input message=&quot;wsdl:GET_GetMessage_InputMessage&quot; /&gt;
    &lt;output message=&quot;wsdl:GET_GetMessage_OutputMessage&quot;&gt;
        &lt;documentation&gt;Message object against the id, if found&lt;/documentation&gt;
    &lt;/output&gt;
    &lt;fault name=&quot;GET_GetMessage_404&quot; message=&quot;wsdl:GET_GetMessage_404&quot;&gt;
        &lt;documentation&gt;No messages found&lt;/documentation&gt;
    &lt;/fault&gt;
    &lt;/operation&gt;
&lt;/portType&gt;
&lt;binding name=&quot;HelloService_Binding&quot; type=&quot;wsdl:HelloService_PortType&quot;&gt;
  &lt;soap:binding transport=&quot;http://schemas.xmlsoap.org/soap/http&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
  &lt;operation name=&quot;GET_GetMessage&quot;&gt;
    &lt;soap:operation soapAction=&quot;GET_GetMessage&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;input&gt;
      &lt;soap:body use=&quot;literal&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;/input&gt;
    &lt;output&gt;
      &lt;soap:body use=&quot;literal&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;/output&gt;
    &lt;fault name=&quot;GET_GetMessage_404&quot;&gt;
      &lt;soap:fault use=&quot;literal&quot; name=&quot;GET_GetMessage_404&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;/fault&gt;
  &lt;/operation&gt;
&lt;/binding&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<h4 id="1625"><strong>HTTP Verb</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="53c0" class="">An OpenAPI operation has a distinct HTTP verb associated with it e.g.&nbsp;<code>GET</code>,&nbsp;<code>POST</code>,&nbsp;<code>DELETE</code>, etc. indicating the type of functionality that is expected to be performed on the resource. All OpenAPI operations are converted to&nbsp;<code>POST</code>&nbsp;methods for SOAP/WSDL conversion.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h4 id="722f" class=""><strong>WSDL Operation Name</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="2f34" class="">The operation name for WSDL is generated by combining the HTTP verb and operation id/name from the OpenAPI operation and serves as a unique identifier.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h4 id="ee27"><strong>Request Parameters</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large is-resized">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/0_WZXzYl_m6KZQWtpE-1.jpg" alt="" width="500" height="505"></p>
<figcaption>Input parameters are wrapped and sent in SOAP body</figcaption>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p id="4d93">All associated request parameters of an OpenAPI operation are wrapped in a single new input type and sent in the form of an&nbsp;<strong>input message</strong>&nbsp;in the SOAP body. The wrapper input type’s name is generated by combining the original HTTP verb of the operation with the operation’s id and a postfix indicating it as the input type.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="cd0f" class="">Unlike JSON, a root XML element cannot be an array. So even if only a single parameter is involved, a wrapper type helps preserve all type related information of it including array representations that would otherwise be lost.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->In the WSDL example above, note the use of the&nbsp;<code>message</code>&nbsp;attribute in&nbsp;<code class="">&lt;input&gt;</code>&nbsp;that provides a link to the concrete&nbsp;<code>&lt;message&gt;</code>&nbsp;definition in WSDL. <!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<h4 id="3f92"><strong>Operation Responses</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7661">The first success response definition (of the range 2XX) is also wrapped in a new output type which defines the body of the&nbsp;<strong>output message</strong>&nbsp;received. The type name is generated in a similar fashion as that of the input type except for the postfix which indicates it as an output type.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="5e1e" class="">Error responses of the range 400 and above are considered SOAP&nbsp;<strong>faults</strong>. Note, however, that response code has no significance in WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="6fa3">Again, note the use of the&nbsp;<code>message</code>&nbsp;attribute in&nbsp;<code>&lt;output&gt;</code>&nbsp;and&nbsp;<code>&lt;fault&gt;</code>&nbsp;that provides a link to the concrete&nbsp;<code>&lt;message&gt;</code>&nbsp;definition in WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h4 id="0c7e"><strong>SOAP Binding Transport Protocol</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="739a" class="">SOAP binding transport protocol is assumed to be HTTP for the conversion. Since SOAP supports other transport protocols as well, this can be modified manually if required.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3><strong>4. WSDL Messages</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="ae44" class="">WSDL messages defined using the&nbsp;<code>&lt;message&gt;</code>&nbsp;tag help describe the data being exchanged between the service provider and the client. Request messages are associated with the&nbsp;<code>&lt;input&gt;</code>&nbsp;tag while response messages are associated with the&nbsp;<code>&lt;output&gt;</code>&nbsp;or&nbsp;<code>&lt;fault&gt;</code>&nbsp;tag. Different parts of a message define its components and help provide a link to their concrete type schema definitions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="796f" class=""><em><strong>WSDL</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;message name=&quot;GET_GetMessage_InputMessage&quot;&gt;
  &lt;part name=&quot;GET_GetMessage_InputMessage&quot; element=&quot;schemas:GET_GetMessage_InputMessage&quot; /&gt;
&lt;/message&gt;
&lt;message name=&quot;GET_GetMessage_OutputMessage&quot;&gt;
  &lt;part name=&quot;GET_GetMessage_OutputMessage&quot; element=&quot;schemas:GET_GetMessage_OutputMessage&quot; /&gt;
&lt;/message&gt;
&lt;message name=&quot;GET_GetMessage_404&quot;&gt;
  &lt;part name=&quot;GET_GetMessage_404&quot; element=&quot;schemas:GET_GetMessage_404&quot; /&gt;
&lt;/message&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<h3><strong>5. OpenAPI Schema and XML Schema</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="5503">Schema definitions from OpenAPI are added to the XML schema(s) in WSDL&nbsp;<code>&lt;types&gt;</code>&nbsp;section. These not only include the types defined globally in OpenAPI&nbsp;<code>schema</code>&nbsp;definitions but also additional types that represent the wrapped request/response messages.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="490a" class="">In OpenAPI, you can fine-tune your schema definitions to represent XML types by adding<a href="https://swagger.io/docs/specification/data-models/representing-xml/">XML metadata</a>&nbsp;like information about namespace, prefix, XML node name, whether the property is an attribute or not, etc. Let’s have a look at how an OpenAPI schema defined with these attributes translates to a type in WSDL during the conversion.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="62f3" class=""><em><strong>OpenAPI</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">Message:
  title: Message
  required:
    - from
    - to
    - text
    - date
  type: object
  properties:
    from:
      type: string
    to:
      type: string
    text:
      type: string
    date:
      type: string
      format: date-time
    id:
      type: string
      xml:
        name: id
        attribute: true
  xml:
    name: MessageEntry
    namespace: https://www.example.com/message
    prefix: m</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p id="f2c3"><em>WSDL:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;types&gt;
  &lt;xs:schema xmlns:tns=&quot;https://www.example.com/message&quot; targetNamespace=&quot;https://www.example.com/message&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
    &lt;xs:complexType name=&quot;MessageEntry&quot;&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;from&quot; type=&quot;xs:string&quot; /&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;to&quot; type=&quot;xs:string&quot; /&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;text&quot; type=&quot;xs:string&quot; /&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;date&quot; type=&quot;xs:dateTime&quot; /&gt;
      &lt;/xs:sequence&gt;
      &lt;xs:attribute name=&quot;id&quot; type=&quot;xs:string&quot; /&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:schema&gt;
&lt;/types&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<ul class="">
<li>The XML name&nbsp;<code>MessageEntry</code>&nbsp;specified in the OpenAPI schema overrides the schema’s original name&nbsp;<code>Message</code>&nbsp;and is used instead, when creating the XML schema type in WSDL.</li>
<li>The boolean&nbsp;<code>attribute</code>&nbsp;flag in property&nbsp;<code>id</code>&nbsp;helped create an XML attribute of the same name as can be seen from the above example.</li>
<li>Furthermore, notice how in the example above, the&nbsp;<code>namespace</code>&nbsp;information from the OpenAPI schema helped us place the type definition in&nbsp;<code>&lt;schema&gt;</code>&nbsp;of the same namespace in WSDL. The prefix assigned to this namespace&nbsp;<code>m</code>&nbsp;is also preserved in the root tag of WSDL.</li>
</ul>
<!-- /wp:list -->

<!-- wp:preformatted -->
<pre><code class="language-xml">&lt;definitions 
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
  xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
  xmlns:schemas=&quot;https://www.example.com/SayHello/schemas&quot; 
  xmlns:wsdl=&quot;https://www.example.com/SayHello/wsdl&quot; 
  xmlns:m=&quot;https://www.example.com/message&quot; 
  xmlns:e=&quot;https://www.example.com/error&quot; 
  targetNamespace=&quot;https://www.example.com/SayHello/wsdl&quot; xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot;&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p id="693a" class="">Let’s now see how XML metadata specified in request/response schema translate to a type in WSDL:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d63d" class=""><em><strong>OpenAPI</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">responses:
  200:
    description: List of all message objects
    content:
      application/json:
        schema:
          type: array
          items:
            $ref: &#039;#/components/schemas/Message&#039;
          description: List of all message objects
          xml:
            name: Messages
            wrapped: true</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p id="c37b" class=""><em><strong>WSDL</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;types&gt;
  &lt;xs:schema xmlns:tns=&quot;https://www.example.com/SayHello/schemas&quot; targetNamespace=&quot;https://www.example.com/SayHello/schemas&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;  
    &lt;xs:complexType name=&quot;GET_GetMessages_OutputMessage&quot;&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name=&quot;Messages&quot;&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element minOccurs=&quot;1&quot; maxOccurs=&quot;unbounded&quot; name=&quot;response&quot; type=&quot;m:MessageEntry&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;List of all message objects&lt;/xs:documentation&gt;
                &lt;/xs:annotation&gt;
              &lt;/xs:element&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:schema&gt;
&lt;/types&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2 id="b148">You have the WSDL — What next?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="6f9f" class="">Having a WSDL basically means, you have a skeleton of what your SOAP service will look like. Various tools and frameworks can then help you accelerate actual implementation of the SOAP service by generating stubs. However, before you start implementing, you need to decide whether you plan to keep the SOAP service independent from your existing REST service or not. The former case will have bigger maintenance cost and it will be difficult to keep both services in sync when changes occur. The recommended way is to implement this SOAP service more as a proxy service that handles SOAP payloads but converts them to those compatible with your existing REST service. This way your actual service will still be the REST service while the SOAP service will help facilitate the smaller chunk of your customers like enterprises. What option you pick is something you are the best judge of.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image">
<figure style="width: 700px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2021/12/1_zo53IiiN0ricDCXce6IvNw-2.png" alt="From REST to SOAP, using API Transformer" width="700" height="466"><figcaption class="wp-caption-text">From REST to SOAP, using API Transformer</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 id="0df0" class="">Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="1aae" class="">REST or SOAP or both? I hope this article offered some clarification in this regard. Ultimately the choice really depends on your service and your target customers. Once you’ve made the decision, there are various tools like&nbsp;<a href="https://www.apimatic.io/transformer/" target="_blank" rel="noreferrer noopener">API Transformer</a>&nbsp;available to help you get started.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="4e4f" class="">Continue reading more API Transformer Recipes:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="">
<li><a href="https://apimatic.io/blog/2018/11/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users" target="_blank" rel="noreferrer noopener">Enabling Postman’s Team Sharing Features for OpenAPI Users</a></li>
<li><a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest" target="_blank" rel="noreferrer noopener">Facilitating Migration from SOAP to REST</a></li>
<li><a href="https://apimatic.io/blog/2019/01/api-transformer-recipes-opening-ways-into-ibm-api-connect" target="_blank" rel="noreferrer noopener">Opening ways into IBM API Connect</a></li>
<li><a href="https://apimatic.io/blog/2019/07/moving-to-graphql-from-soap-or-rest" target="_blank" rel="noreferrer noopener">Moving to GraphQL from SOAP or REST</a></li>
</ul>
<!-- /wp:list --></div>
</div>
<!-- /wp:group --></div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/">The Whys and Hows of Exposing a SOAP Service Using Your REST API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Moving to GraphQL from SOAP or REST</title>
		<link>/blog/moving-to-graphql-from-soap-or-rest/</link>
					<comments>/blog/moving-to-graphql-from-soap-or-rest/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 12 Jul 2019 11:27:02 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Blog]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SOAP]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[GraphQL]]></category>
		<category><![CDATA[Graphql Schema]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=624</guid>

					<description><![CDATA[<p>This blog is the fourth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&#160;API Transformer into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/moving-to-graphql-from-soap-or-rest/">Moving to GraphQL from SOAP or REST</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="624" class="elementor elementor-624" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-5fc28771 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="5fc28771" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1d7582c7" data-id="1d7582c7" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4f627216 elementor-widget elementor-widget-text-editor" data-id="4f627216" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-625" src="/wp-content/uploads/2021/12/1_R4yFQi_9PINp_LHuwRsVag-1024x512.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e10f" class=""><em>This blog is the fourth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&nbsp;</em><a href="https://www.apimatic.io/transformer"><em>API Transformer</em></a><em> into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted to a particular set of tools just because they use a certain API specification format.&nbsp;</em></p>
<h2 id="8e77" class="">Announcing support for GraphQL Schema</h2>
<p id="4d39" class="">Oh yes, you heard it right. You can now&nbsp;<a href="https://docs.apimatic.io/changelog/support-for-exporting-graphql-schema-files-now-available/">export GraphQL Schema from APIMatic</a>&nbsp;using&nbsp; API Transformer! Previously, we provided our users means of&nbsp;<a href="https://blog.apimatic.io/api-transformer-recipes-facilitating-migration-from-soap-to-rest-72b8248432d8">migrating from SOAP to REST</a>, and now also aim to facilitate those SOAP/REST users looking to migrate to GraphQL.</p>
<p id="c99b" class="">Why GraphQL, you wonder? Without going into details, GraphQL is known for being simpler, faster and efficient allowing users to fetch exactly the data they need. Many strongly believe that GraphQL is the future of APIs. So if you are one of them and are considering moving to GraphQL, read on.</p>
<p id="2a57" class="">Our support for GraphQL schema is currently in beta so we are open to any feedback/suggestions that you might have.</p>
<h2 id="512e" class="">Role of GraphQL Schema</h2>
<p id="7f3a" class="">GraphQL schemas for a service are defined using&nbsp;<a href="https://graphql.org/learn/schema/">GraphQL SDL</a>&nbsp;(schema definition language) having a pretty simple syntax for defining various components like types, queries, mutations etc. We’ll take a look at some examples later in this blog.</p>
<p id="50c9">A GraphQL schema is at the core of any GraphQL server implementation. It describes the functionality available to the client applications that connect to it. So having this schema file will serve as a key starting point for migrating your API to GraphQL. You can then easily generate server code, resolver signatures, etc. from it using various tools available out there.</p>
<h2 id="109f">Export GraphQL Schema Files with API Transformer</h2>
<p id="d41a" class="">Bring your API files and export them to GraphQL schema using&nbsp;<a href="https://www.apimatic.io/transformer">API Transformer</a>. All major input formats (e.g. OpenAPI, RAML, API Blueprint, etc.) are supported.</p>
<p id="5919">The following features of the schema are supported:</p>
<ul class="">
<li>Object types</li>
<li>Scalar and Enumeration types</li>
<li>Input types</li>
<li>Arguments</li>
<li>Queries</li>
<li>Mutations</li>
<li>Lists and Non-null fields</li>
</ul>
<p id="8a1e" class="">GraphQL itself does not impose any strict naming conventions other than a list of allowed characters mentioned in their&nbsp;<a href="https://graphql.github.io/graphql-spec/June2018/#sec-Names">spec</a>. However, keeping in mind some of the best practices highlighted for&nbsp;<a href="https://graphqlmastery.com/blog/graphql-best-practices-for-graphql-schema-design">GraphQL schema design</a>,&nbsp;<a href="https://blog.apollographql.com/designing-graphql-mutations-e09de826ed97">mutations</a>&nbsp;and&nbsp;<a href="https://graphqlmastery.com/blog/how-to-use-graphql-enum-type-and-its-best-practices">GraphQL enum types</a>, we follow some conventions to make the migration process for our users easier. These conventions aim to facilitate development and interoperability.</p>
<p id="2c5f"><strong>Conventions</strong></p>
<ul class="">
<li>The names of various components will obey the rules specified in the spec.</li>
<li>Object/Input and Enumeration type names will be&nbsp;<code>pascal</code>&nbsp;cased.</li>
<li>All field names will be&nbsp;<code>camel</code>&nbsp;cased.</li>
<li>Enumeration field names will be&nbsp;<code>upper</code>&nbsp;cased to represent their nature as constants.</li>
<li>HTTP verb will be prepended with query/mutation names to represent the action that will be performed upon calling it.</li>
</ul>
<h2 id="2593">For SOAP Users — Migrating to GraphQL</h2>
<p id="04e6" class="">With&nbsp; API Transformer, SOAP users can start migrating to GraphQL by obtaining a GraphQL schema file from their service WSDL file. This involves a conversion of all WSDL types to GraphQL schema types, operations to mutations and attributes to arguments. The example below illustrates this:</p>
<p id="7774" class="">WSDL example:</p>
<pre class=""><code class="language-xml">&lt;definitions name=&quot;HelloService&quot; targetNamespace=&quot;http://www.examples.com/wsdl/HelloService.wsdl&quot; xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; xmlns:tns=&quot;http://www.examples.com/wsdl/HelloService.wsdl&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:s=&quot;http://www.examples.com/schema1&quot;&gt;
  &lt;types&gt;
      &lt;schema xmlns=&quot;http://www.w3.org/2001/XMLSchema&quot; targetNamespace=&quot;http://www.examples.com/schema1&quot; elementFormDefault=&quot;qualified&quot;&gt;
        &lt;element name=&quot;GreetingMessage&quot;&gt;
            &lt;complexType&gt;
                &lt;sequence&gt;
                    &lt;element name=&quot;senderName&quot; type=&quot;xsd:string&quot;/&gt;
                    &lt;element name=&quot;greeting&quot; type=&quot;xsd:string&quot;/&gt;
                &lt;/sequence&gt;                
            &lt;/complexType&gt;
        &lt;/element&gt;
      &lt;/schema&gt;
  &lt;/types&gt;
  &lt;message name=&quot;SendMessageRequest&quot;&gt;
      &lt;part name=&quot;message&quot; type=&quot;s:GreetingMessage&quot;/&gt;
  &lt;/message&gt;
  &lt;message name=&quot;SendMessageResponse&quot;&gt;
      &lt;part name=&quot;message&quot; type=&quot;s:GreetingMessage&quot;/&gt;
  &lt;/message&gt;
  &lt;portType name=&quot;Hello_PortType&quot;&gt;
      &lt;operation name=&quot;sendMessage&quot;&gt;
         &lt;input message=&quot;tns:SendMessageRequest&quot;/&gt;
         &lt;output message=&quot;tns:SendMessageResponse&quot;/&gt;
      &lt;/operation&gt;
  &lt;/portType&gt;
  &lt;binding name=&quot;Hello_Binding&quot; type=&quot;tns:Hello_PortType&quot;&gt;
      &lt;soap:binding style=&quot;rpc&quot;
         transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;
      &lt;operation name=&quot;sendMessage&quot;&gt;
         &lt;soap:operation soapAction=&quot;sendMessage&quot;/&gt;
         &lt;input&gt;
            &lt;soap:body encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;
               namespace=&quot;urn:examples:helloservice&quot;
               use=&quot;encoded&quot;/&gt;
         &lt;/input&gt;    
         &lt;output&gt;
            &lt;soap:body encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;
               namespace=&quot;urn:examples:helloservice&quot;
               use=&quot;encoded&quot;/&gt;
         &lt;/output&gt;
      &lt;/operation&gt;
   &lt;/binding&gt;
   &lt;service name=&quot;Hello_Service&quot;&gt;
      &lt;documentation&gt;WSDL File for HelloService&lt;/documentation&gt;
      &lt;port binding=&quot;tns:Hello_Binding&quot; name=&quot;Hello_Port&quot;&gt;
         &lt;soap:address location=&quot;http://www.examples.com/SayHello/&quot; /&gt;
      &lt;/port&gt;
   &lt;/service&gt;   
&lt;/definitions&gt;</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row" style="padding-top: 0px;">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="d1fc" class="">GraphQL schema obtained by converting above WSDL file using&nbsp; API Transformer:</p>
<pre class=""><code class="language-cs"># API Name: &quot;HelloService&quot;
# Host: http://www.examples.com/SayHello/
# WSDL File for HelloService

type GreetingMessage {
    senderName: String!
    greeting: String!
}

type SendMessageRequest {
    greetingMessage: GreetingMessage!
}

type SendMessageResponse {
    greetingMessage: GreetingMessage!
}

input GreetingMessageInput {
    senderName: String!
    greeting: String!
}

input SendMessageRequestInput {
    greetingMessage: GreetingMessageInput!
}

input CreateSendmessageInput {
    body: SendMessageRequestInput!
}

type Query {
    _: Boolean
}

type Mutation {
    createSendmessage(input: CreateSendmessageInput!): SendMessageResponse!
}

schema {
    mutation: Mutation
    query: Query
}</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="8674">For REST Users — Layering GraphQL on top</h2>
<p id="91f0" class="">Instead of completely migrating to GraphQL, users generally prefer to add a GraphQL layer on top of REST and enjoy benefits of both. The choice is yours depending on your service and system needs.</p>
<p id="841a" class="">You can convert your RESTful API defined in one of the popular formats like OpenAPI/Swagger, RAML, etc. to GraphQL schema with&nbsp; API Transformer. The conversion process will:</p>
<ul class="">
<li>Convert GET operations to GraphQL queries while other operations involving server-side changes to GraphQL mutations.</li>
<li>Convert complex types in the API to GraphQL object and enumeration types.</li>
<li>Wrap operation parameters in a GraphQL input type and link that input type to respective query/mutation arguments.</li>
</ul>
<p id="fce7">The example below shows the conversion:</p>
<p id="1f1d" class="">OpenAPI 3.0 example:</p>
<pre class=""><code class="language-yaml">openapi: 3.0.0
info:
  title: Calculator
  description: Simple Calculator API
  version: &#039;1.0&#039;
servers:
- url: https://examples.devapi.dream.press/apps/calculator  
paths:
  /{operation}:
    get:
      description: Calculates the expression based on the x and y operator
      operationId: Calculate
      parameters:
      - name: operation
        in: path
        required: true
        schema:
          $ref: &#039;#/components/schemas/OperationType&#039;
      - name: x
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: y
        in: query
        required: true
        schema:
          type: number
          format: double
      responses:
        200:
          description: &#039;Returns the result of operation&#039;
          content:
            text/plain:
              schema:
                type: number
                format: double      
components:
  schemas:
    OperationType:
      enum:
      - SUM
      - SUBTRACT
      - MULTIPLY
      - DIVIDE
      type: string
      description: Possible operations are sum, subtract, multiply, divide</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="2920" class="">GraphQL schema obtained by converting above OpenAPI 3.0 file using&nbsp; API Transformer:</p>
<pre class=""><code class="language-cs"># API Name: &quot;Calculator&quot;
# Host: https://examples.devapi.dream.press/apps/calculator
# Simple Calculator API

&quot;Possible operations are sum, subtract, multiply, divide&quot;
enum OperationType {
    DIVIDE
    MULTIPLY
    SUBTRACT
    SUM
}

input GetCalculateInput {
    operation: OperationType!
    x: Float!
    y: Float!
}

type Query {
    &quot;Calculates the expression based on the x and y operator&quot;
    getCalculate(input: GetCalculateInput!): Float!
}

type Mutation {
    _: Boolean
}

schema {
    mutation: Mutation
    query: Query
}</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="5c1b">Conclusion</h2>
<p id="0841" class="">We hope you found our migration guide to GraphQL useful. If you have any feedback for our GraphQL schema export feature, feel free to reach out.</p>
<p id="28a8" class="">Continue reading more API Transformer Recipes:</p>
<ul class="">
<li><a href="https://apimatic.io/blog/2018/11/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users" target="_blank" rel="noreferrer noopener">Enabling Postman’s Team Sharing Features for OpenAPI Users</a></li>
<li><a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest" target="_blank" rel="noreferrer noopener">Facilitating Migration from SOAP to REST</a></li>
<li><a href="https://apimatic.io/blog/2019/01/api-transformer-recipes-opening-ways-into-ibm-api-connect" target="_blank" rel="noreferrer noopener">Opening ways into IBM API Connect</a></li>
<li><a href="https://apimatic.io/blog/2020/06/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api">The Whys and Hows of Exposing a SOAP Service Using Your REST API</a></li>
</ul>
<p class="">Thanks to&amp;nbsp;Adeel Ali.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/moving-to-graphql-from-soap-or-rest/">Moving to GraphQL from SOAP or REST</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/moving-to-graphql-from-soap-or-rest/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>API Transformer Insights 2018</title>
		<link>/blog/api-transformer-insights-2018/</link>
					<comments>/blog/api-transformer-insights-2018/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 05 Apr 2019 10:53:46 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[2018]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[Trends]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=669</guid>

					<description><![CDATA[<p>Time sure flies and here we are — once again ready to analyze&#160;API Transformer&#160;over the course of one more year. We did a similar analysis back in 2017 as well. If you are interested, do check it out&#160;here. Interestingly, API Transformer’s usage appears to be doubling every year as can be seen from the figure [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/api-transformer-insights-2018/">API Transformer Insights 2018</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="669" class="elementor elementor-669" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-4f6c7104 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="4f6c7104" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-6bc3f95e" data-id="6bc3f95e" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-52e7b5e8 elementor-widget elementor-widget-text-editor" data-id="52e7b5e8" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-670 aligncenter" src="/wp-content/uploads/2021/12/1_-QjVR5w3yJnZrRwvS2QHzg-1024x469.png" alt="API Transformer Insights 2018" width="1024" height="469"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row" style="padding-bottom: 0px;">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Time sure flies and here we are — once again ready to analyze&nbsp;<a href="https://www.apimatic.io/transformer">API Transformer</a>&nbsp;over the course of one more year. We did a similar analysis back in 2017 as well. If you are interested, do check it out&nbsp;<a href="https://apimatic.io/blog/2018/04/a-year-with-api-transformer">here</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-671 aligncenter" src="/wp-content/uploads/2021/12/1_bnA_aAeKqhAC1lSj6RRwvg.png" alt=""></p>
<figcaption><em>API Transformer conversions over the past 3 years</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="1f91">Interestingly, API Transformer’s usage appears to be doubling every year as can be seen from the figure above. 2018 has seen an all-time high — 217,388 transformations in total.</p>
<p id="0d35" class="">So why are so many people using&nbsp; API Transformer? What in fact is&nbsp; API Transformer?</p>
<p id="66d8" class="">Today, with an ever increasing number of APIs, more and more developers are recognizing the need to have machine-readable descriptions alongside these APIs. Some of these descriptions are maintained and exposed by the API providers themselves while others are created and maintained by third-party contributors. Format preferences tends to vary due to which a major issue with these descriptions is their heterogeneity. Given that each format has limitations of its own and a different set of tools and frameworks associated with it, anybody looking to utilize a description to its maximum capacity will feel the need to transform between available formats based on their requirements. This is where <strong>API Transformer</strong> comes in. It breaks all format barriers by enabling users to convert an API description easily into any format of their choice. It supports all popular formats e.g. OpenAPI (previously known as Swagger), RAML, API Blueprint, WSDL etc. which is what makes it an ideal tool for many.</p>
<h2 id="e028"><strong>What was new in 2018?</strong></h2>
<p id="00d8" class="">As promised at the end of 2017, we finally&nbsp;<a href="https://docs.apimatic.io/changelog/announcing-support-for-insomnia-export-format/">introduced support for Insomnia</a>&nbsp;in December, 2018.</p>
<p id="cbc3" class="">In addition to this, <a href="https://docs.apimatic.io/changelog/long-awaited-major-transformer-improvements/">many improvements were added to API Transformer</a>&nbsp;with focus on three key aspects: stability, consistency and accuracy.</p>
<h2 id="7bc6"><strong>Total vs Unique</strong></h2>
<p id="fe81">For each aspect of API Transformer that we analyze below, calculations are performed over two kinds of data which are:</p>
<p id="6c85"><strong>Total &#8211;</strong>&nbsp;This data takes into account all events that occurred irrespective of the users performing these events.</p>
<p id="028d" class=""><strong>Unique &#8211;</strong>&nbsp;This data only considers unique events per user. This helps eliminate the skewness that arises in the previous case because of users who performed thousands of conversions every month.</p>
<h2 id="3d62"><strong>Which formats developers brought most as input?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-672 aligncenter" src="/wp-content/uploads/2021/12/1_5Ueg0Ii4RZuXXdi6w_Z2jg-1024x492.png" alt=""></p>
<figcaption><em>Total vs Unique Analysis of Most Common Formats Imported</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3><strong>Total</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-673" src="/wp-content/uploads/2021/12/1_ZWZnG-k1GeN-BO4HG4BWFA.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p class="">Out of the total imported files on Transformer (approximately 217,388), 55% were Postman files (versions 1.0, 2.0 and 2.1) while 35% were OpenAPI files (versions 1.x, 2.0 and 3.0). The rest fell under much smaller chunks. Unlike 2017, it can be seen that OpenAPI v.3.0 usage finally rose above v.2.0: 56% of the OpenAPI transformations belonged to v.3.0, 33% to v.2.0 and 11% to v.1.x.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3><strong>Unique</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-674" src="/wp-content/uploads/2021/12/1_jPKfFx0zj19XLt1vIG_JUw.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p id="c523" class="">The second graph considers only unique formats per user e.g. if a user converted 50 Postman and 10 OpenAPI files, he converted two unique format files (one Postman and one OpenAPI).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="6d55" class="">The unique data shows that 38% of the imported files were OpenAPI files (all versions included) while 31% of the imported files were Postman files (all versions included). Around 9% of the users brought in WSDL files.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="fc00"><strong>Overall</strong></h3>
<p id="2869" class="">As can be seen from above, much like 2017, the two formats that stood out as the most imported formats on API Transformer in 2018 were still&nbsp;<strong>OpenAPI</strong>&nbsp;and&nbsp;<strong>Postman</strong>.</p>
<strong>Which formats developers most converted to?</strong></div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-675 aligncenter" src="/wp-content/uploads/2021/12/1_im1ngI_IhCmlPmLv9wzzog.png" alt=""></p>
<figcaption><em>Total vs Unique Anaylsis of Most Common Formats Exported</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3><strong>Total</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-676" src="/wp-content/uploads/2021/12/1_3LZR__Z-XObf7mUJv9A1ww.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p>43% of the conversions were to OpenAPI (versions 1.2, 2.0, 3.0). API Blueprint and Postman (versions 1.0, 2.0) were the next two major exported formats. They both appeared to be in a neck to neck race each sharing 25% of the complete chunk.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3><strong>Unique</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-677" src="/wp-content/uploads/2021/12/1_47E-GMFbXiPuYkgK5w7ETw.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p id="c746">Eliminating multiple exports to the same format per user, we observed that 72% of the files were exported to OpenAPI (versions 1.2, 2.0, 3.0). 77% of this OpenAPI chunk consisted of v.2.0 files. This shows that although v.3.0 was a popular input format, much of the developers used API Transformer to export v.2.0 files instead of v.3.0.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="3aba">Apart from OpenAPI, 8% files were exported to RAML (versions 0.8, 1.0) and 7% to Postman (versions 1.0, 2.0).</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="5b90"><strong>Overall</strong></h3>
<p id="c393" class="">Like 2017,&nbsp;<strong>OpenAPI v.2.0</strong>&nbsp;was again found to be the most popular exported format in 2018. This comes as no suprise since it is the most stable version of OpenAPI, being used for many years now. It boasts strong community support and a wide range of tools and frameworks. The adoption rate for its latest version v.3.0 is still relatively slower. However, it can be expected to rise with the passing time as more and more tools start supporting it.</p>
<p id="8e01"><strong>Postman v.2.0</strong>&nbsp;was another major exported format which is largely popular with users aiming to test or document their APIs. Very few users prefer to export to WADL or WSDL because of limited usage and tooling.</p>
<h2 id="6fbd" class=""><strong>What were the top 10 conversions?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-678 aligncenter" src="/wp-content/uploads/2021/12/1_hGfH3Ac2UQ2vjnXXBWmjzw-1024x437.png" alt=""></p>
<figcaption>Total vs Unique Analysis of Top Ten Format Conversions</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b00a" class="">Here we analyze the import-export relationship in conversions and identify the top ten pairs for each kind of data.</p>
<h3 id="d400" class=""><strong>Total</strong></h3>
<p id="c73a">For the total conversions performed, the most common conversion seen was from&nbsp;<strong><em>Postman v.1.0 to API Blueprint</em></strong>&nbsp;(approx 51,526 conversions).</p>
<h3 id="111a"><strong>Unique</strong></h3>
<p id="808d">By eliminating non-unique mappings per user, import from&nbsp;<strong><em>Postman 2.X to OpenAPI 2.0</em></strong>&nbsp;was found to be the most common (approx 3,751 conversions).</p>
<h3 id="5cca"><strong>Overall</strong></h3>
<p id="fac5">Based on above data it can be seen that, much like 2017, developers still preferred Transformer for converting&nbsp;<strong>from Postman to other API description formats</strong>.</p>
<h2 id="afc5"><strong>Where were the developers performing conversions geographically based?</strong></h2>
<p id="7e66">In this section, we aim to analyze the geographical usage of API Transformer.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-679" src="/wp-content/uploads/2021/12/1_lG74YLk8JylPB3JlVLMwYw-1024x474.png" alt=""></p>
<figcaption><em>Total vs Unique Analysis of Geographical Usage of Formats</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="ad28"><strong>Total</strong></h3>
<p id="85e6">A large number of conversions were performed from India (36%), US (28%) and UK (5%) while the rest of the conversions were distributed across other parts of the world.</p>
<h3 id="802c"><strong>Unique</strong></h3>
<p id="6969">Ignoring multiple conversions from the same location per user, the results we got showed that 22% of the conversions were performed from US, 11% from India while 6% were from UK.</p>
<h3 id="d0e7"><strong>Overall</strong></h3>
<p id="6591">As can be clearly seen, majority of our users using Transformer in 2018 were based in&nbsp;<strong>US, India and UK.&nbsp;</strong>Note that for these graphs we eliminated data of conversions in which the locations were unknown.</p>
<h2 id="c109" class=""><strong>Which formats failed to transform most (and why)?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-680 aligncenter" src="/wp-content/uploads/2021/12/1_nhiPX8M-pswsB3RY44MTSg-1024x444.png" alt=""></p>
<figcaption><em>Total vs Unique Analysis of Most Common Format Failures</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e1e9" class="">With the increasing number of transformations, a rise in the number of failed transformations was also seen (approx. 41,569 which is roughly 19% of the total conversions performed).</p>
<h3 id="c862"><strong>Total</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-681" src="/wp-content/uploads/2021/12/1_DYsVs0uEXAanztwABMwR3g.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p class="">56% of the total failed transformations involved OpenAPI files (versions 1.x, 2.0, 3.0) as input while 34% of the failures occurred when users tried converting invalid/unsupported files.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="4ea5" class=""><strong>Unique</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-682" src="/wp-content/uploads/2021/12/1_IH9YotSH65XF-HqGyYxidg.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p class="">After removing redundant format failures per user, 49% of the total failed transformations were found to be from invalid/unsupported files while only 27% were due to OpenAPI files (versions 1.x, 2.0, 3.0). 13% were attributed to RAML files (versions 0.8, 1.0).</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="7d13"><strong>Overall</strong></h3>
<p id="7366">As you can see, a large portion of failures constituted of the&nbsp;<strong>invalid/unsupported files</strong>. Following are the kinds of files that fall under this category:</p>
<ol class="">
<li>Not valid API description files e.g. HTML files, JSON response data, XML schema files, etc.</li>
<li>Files that lacked necessary metadata, thus, preventing identification at the time of conversion e.g. API Blueprint files without “Format” and “Host” information.</li>
<li>Format files that contained some critical errors/ human mistakes preventing them from being identified properly e.g. invalid JSON, incomplete file, etc.</li>
</ol>
<p id="43bf" class="">The rest of the failed conversions mainly consisted of&nbsp;<strong>RAML or OpenAPI</strong>&nbsp;files. These transformations failed largely due to errors/human mistakes while a small portion of them failed due to bugs in our tool which were later fixed.</p>
<p id="efe3" class="">In 2018, we analyzed, in the form of a blog series, the common mistakes developers made resulting in failed transformations. If you are interested to learn more, please head over to the following:</p>
<ol class="">
<li><a href="https://apimatic.io/blog/2018/09/common-mistakes-developers-make-in-their-api-blueprint-files">Common Mistakes Developers Make in Their API Blueprint Files</a></li>
<li><a href="https://apimatic.io/blog/2018/04/common-mistakes-developers-make-in-their-raml-files">Common Mistakes Developers Make in Their RAML Files</a></li>
<li><a href="https://apimatic.io/blog/2018/03/common-mistakes-developers-make-in-their-openapi-3-files">Common Mistakes Developers Make in Their OpenAPI 3 Files</a></li>
</ol>
<h2 id="7198" class=""><strong>Did developers prefer to transform via the website or via our API?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-683" src="/wp-content/uploads/2021/12/1_abnhHqigDqnDnUI07snfDQ-1024x408.png" alt=""></p>
<figcaption><em>Total vs Unique Comparison of Transformer Web and API Conversions</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b449" class="">&nbsp;API Transformer&nbsp; not only provides a web UI to users for performing conversions but also facilitates them by providing a simple <a href="https://www.apimatic.io/apidocs/apimatic">Transformation API</a>&nbsp;that offers the same functionality as the UI.</p>
<h3 id="b1d4" class=""><strong>Total</strong></h3>
<p id="f312" class="">In 2018, 80% of the total conversions were performed by users over the API while only 20% were performed via the web UI. The data here is skewed largely due to several of our users performing thousands of conversions via the API every month. This skewness is ignored in the second data discussed below.</p>
<h3 id="e66a"><strong>Unique</strong></h3>
<p id="9f3c">In contrast to what the results from the Total data shows, if we consider unique conversions per user, 95% of the conversions were performed via web while only 5% were performed via the API.</p>
<h3 id="5284"><strong>Overall</strong></h3>
<p id="2f49">Ignoring the skewness, it can be safely concluded that&nbsp;<strong>majority of the conversions were performed using the web UI.</strong></p>
<h2 id="18cd"><strong>What trends could be seen in terms of size of APIs?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-684 aligncenter" src="/wp-content/uploads/2021/12/1_YHagzghl3fcmBJtTquZlBw.png" alt=""></p>
<figcaption><em>Analysis of Size of API for Total Conversions</em></figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="a7f8" class="">For measuring the size of an API, we considered the number of endpoints in an API. 97% of the APIs involved in the conversions had less than 100 endpoints while 3% of the APIs had endpoints ranging between 100 and 500. The remaining small portion of APIs had endpoints greater than 500. It can be concluded that, with a few exceptions,&nbsp;<strong>APIs with less than 100 endpoints are the most common.</strong></p>
<h2 id="3294" class=""><strong>Conclusion</strong></h2>
<p id="7ab6" class="">2018 undoubtedly turned out be quite an important year for API Transformer both in terms of its growth and stability. We hope to make API Transformer even better and stronger in the days to come. You can also play a big role in that! If you have any feedback or ideas that you want to share with us or have any queries, please don’t hesitate to reach out to <a href="mailto:support@apimatic.io">support@apimatic.io</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/api-transformer-insights-2018/">API Transformer Insights 2018</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/api-transformer-insights-2018/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>API Transformer Recipes: Opening ways into IBM API Connect</title>
		<link>/blog/api-transformer-recipes-opening-ways-into-ibm-api-connect/</link>
					<comments>/blog/api-transformer-recipes-opening-ways-into-ibm-api-connect/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Tue, 29 Jan 2019 10:53:46 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[OpenAPI]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[API Connect]]></category>
		<category><![CDATA[API Management]]></category>
		<category><![CDATA[IBM]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=686</guid>

					<description><![CDATA[<p>This blog is the third part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate API Transformer into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/api-transformer-recipes-opening-ways-into-ibm-api-connect/">API Transformer Recipes: Opening ways into IBM API Connect</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="686" class="elementor elementor-686" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-35b2d7dd elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="35b2d7dd" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-7af68430" data-id="7af68430" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-31a86569 elementor-widget elementor-widget-text-editor" data-id="31a86569" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="alignnone wp-image-687" src="/wp-content/uploads/2021/12/1_qEvOmrIaB196xVf5nqTB3Q.jpg" alt="API Transformer Recipes for Opening ways into IBM API Connect" width="800" height="350"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="aed0" class=""><em>This blog is the third part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate </em><a href="https://www.devapi.dream.press/transformer"><em>API Transformer</em></a><em> into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted to a particular set of tools just because they use a certain API specification format.&nbsp;</em></p>
<p id="d964" class="">So your organization decided to use&nbsp;<a href="https://www.ibm.com/cloud/api-connect">IBM API Connect</a> as their API Management platform. You realize it accepts only OpenAPI or WSDL files while you’ve already spent a long time designing the APIs in API Blueprint (or RAML or any other format for that matter). What can you do? This blog provides a step-by-step guide for importing API description files into&nbsp;IBM API Connect&nbsp;without being limited to only OpenAPI or WSDL files.</p>
<h2 id="bea9" class="">What is IBM API Connect?</h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-688" src="/wp-content/uploads/2021/12/1_DOr2icVAX2_3OEpK6AGfcg.png" alt=""></p>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="0a03" class="">In case you have never heard of&nbsp;&nbsp;IBM API Connect&nbsp;, it is essentially an API management platform providing great many tools for managing complete API lifecycles. It allows you to create, test, share, monitor and secure your APIs all in one place.</p>
<h2 id="b0e1" class="">Importing an API into IBM API Connect</h2>
<h3 id="160a" class="">Prerequisites</h3>
<ol class="">
<li>You must have an account on <a href="https://www.ibm.com/cloud/">IBM Cloud</a>.</li>
<li>API Connect service instance must be up and running. If you are new to API Connect, you can create an instance <a href="https://cloud.ibm.com/catalog/services/api-connect">here</a>&nbsp;after providing required details like service name, region, organization, etc.</li>
</ol>
<h3 id="3c78" class=""><strong>Step 1: Open API Connect Dashboard</strong></h3>
<ol class="">
<li>Login to API Connect <a href="https://console.bluemix.net/apis">here</a>&nbsp;using your IBM Cloud account.</li>
<li>From the side bar, navigate to “Existing services” under the API Connect section of the Overview page.</li>
</ol>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:heading /-->

<!-- wp:list /-->

<!-- wp:heading /-->

<!-- wp:list /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-689" src="/wp-content/uploads/2021/12/1_QfXYdNiGdSb-YjdudQPvBQ-1024x604.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="529f" class="">3. Your service instance would be listed here. In case you are unable to view it, ensure that the correct region, organization etc. is selected based on what values you provided at the time of creating the instance. Double click on the instance name and you will be taken to your Dashboard.</p>
<h3 id="4d03">Step 2: Navigate to the APIs Section</h3>
<p id="f32d" class="">The Dashboard is where you manage APIs. The main page will show you a list of catalogs (a “Sandbox” catalog by default) that helps separate Products and APIs for testing.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-690" src="/wp-content/uploads/2021/12/1_TnS0E9moywYXoAO9CRXz5A-1024x604.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="aa9a">To add new or manage existing APIs, navigate to the “APIs” section as follows:</p>
<ol>
<li>Open the side navigation bar and click on “Drafts” to open the Drafts section.</li>
</ol>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-691" src="/wp-content/uploads/2021/12/1_zXQ3rTqc8bSYEKKrKHE48A-1024x604.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>2. Open the “APIs” tab.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-693" src="/wp-content/uploads/2021/12/1_YmCQGaWOhfOj8oUmiFi7Tg-1024x604.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="b01e">Step 3: Obtain IBM Compatible API Specification Using API Transformer</h3>
<p id="552b" class="">IBM platform supports only two API description formats: OpenAPI (<code>v2.0, v3.0</code>) and WSDL (for SOAP based services). So to import your API into IBM you will first need to convert your existing API specification into one of these formats. For this, you can use&nbsp;&nbsp;API Transformer&nbsp;&nbsp;as described below:</p>
<ol class="">
<li>Navigate to&nbsp;<a href="https://devapi.dream.press/transformer"> API Transformer</a>. Sign up if you haven’t already.</li>
</ol>
<p id="b79c" class="">2. Once you are logged in, upload your API description file or provide its URL in the “Convert Now” section. The file that you provide must be in one of the supported formats listed <a href="https://www.devapi.dream.press/transformer">here</a>. All popular format choices like API Blueprint, RAML, WADL, etc. are supported.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-694" src="/wp-content/uploads/2021/12/1_SGh94A6asMWkAGUuBmGupQ-1024x603.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="17f9">3. Choose a target description format based on your needs. Select “Web Service Definition Language (WSDL) — W3C” if you are aiming to create a SOAP based service. For all other cases, select “OpenAPI” (JSON or YAML). You will notice two versions listed for this format (<code>v2.0</code>&nbsp;or&nbsp;<code>v3.0</code>). Pick any since IBM supports both.</p>
<p id="35ec" class="">4. Click on “Convert Now” and if the transformation succeeds, you will be shortly prompted to download the converted file. Save it locally on your system.</p>
<p id="f7c0" class=""><em>Depending on your needs, you may prefer to perform above steps via the&nbsp;</em><a href="https://www.devapi.dream.press/apidocs/apimatic/"><em>API</em></a><em>&nbsp;instead, that allows you to integrate&nbsp;</em><a href="https://devapi.dream.press/transformer"><em>API Transformer</em></a><em>&nbsp;easily into your workflow.</em></p>
<h3 id="bfb0">Step 4: Import the API into API Connect</h3>
<p id="770a" class="">Now that you have an IBM compatible API description file, you can proceed to importing your API into the API Connect Dashboard.</p>
<p id="e139" class=""><strong>For an OpenAPI file</strong></p>
<ol>
<li>In the APIs section click on “Add” &gt; “Import API from a file or URL”.</li>
</ol>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-695" src="/wp-content/uploads/2021/12/1_OrWarORe0w0BTpct2ivPdQ-1024x605.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>2. Upload the converted OpenAPI file obtained from API Transformer and click on “Import”.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-696" src="/wp-content/uploads/2021/12/1_Aq8hvkkTwGWZwM6y8BlPzw-1024x604.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="0091" class=""><strong>For a WSDL file</strong></p>
<ol>
<li>In the APIs section click on “Add” &gt; “API from a SOAP Service”.</li>
</ol>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-697" src="/wp-content/uploads/2021/12/1_9Zzd_ulEH_WqltKOBiKgUw-1024x605.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>2. Upload the converted WSDL file obtained from API Transformer and click on “Import”.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-698" src="/wp-content/uploads/2021/12/1_sIfpCYemsU_vnM4x_ijVVA-1024x604.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>If your file imported successfully, it should now be visible in the APIs list.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-699" src="/wp-content/uploads/2021/12/1_adibtuZzbHYEhFB8V9xORw-1024x604.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="716b">Step 5: Finalizing the Imported API</h3>
<p id="92aa" class="">This is an optional step suggesting some tweaks to the imported API to make it more compliant with some of the basic IBM requirements. It will help you avoid any issues that could appear later on while managing/publishing the API.</p>
<p id="512f">Open the imported API by clicking on the API name in the APIs list.</p>
<p id="c1f7" class=""><strong>Use only HTTPS Scheme</strong></p>
<p id="f93a" class="">IBM enforces that APIs use only “https” as the scheme. You will need to enable it if the imported API does not use any scheme by default. And if your API allows for any additional schemes, you will need to disable them all.</p>
<ol>
<li>Ensure the tab open is “Design” and then navigate to the “Schemes” section.</li>
<li>Check “https” and uncheck all other schemes.</li>
</ol>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-700" src="/wp-content/uploads/2021/12/1_qKeW5Gze9-SgSavif-7MEw-1024x604.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="215e">3. Save the changes.</p>
<p id="2a8b"><strong>Add IBM Authentication Headers</strong></p>
<p id="290f">The authentication mechanism used by APIs in the IBM’s platform requires two API keys passed as headers namely&nbsp;<code>X-IBM-Client-Id</code>&nbsp;and&nbsp;<code>X-IBM-Client-Secret</code>. You will need to manually define these to avoid issues.</p>
<ol class="">
<li>Navigate to the “Security Definitions” section in the “Design” tab.</li>
<li>Remove any existing security definitions that may have been added during the import process.</li>
<li>Add two “API Key” parameters with “Parameter name” specified as&nbsp;<code>X-IBM-Client-Id</code>&nbsp;and&nbsp;<code>X-IBM-Client-Secret</code>&nbsp;respectively. Both the parameters should be “Located In” the “Header”.</li>
</ol>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-701" src="/wp-content/uploads/2021/12/1_hcM8Vek31WXj_7HZszPQPg-1024x604.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>4. In the “Security” section enable both these API keys.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-702" src="/wp-content/uploads/2021/12/1_3AKGvJs-OtPePLRHLvOCUw-1024x604.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="a590">5. Save the changes.</p>
<h2 id="a05d">What’s next?</h2>
<p id="3c3d" class="">You are now ready to use your API in IBM API Connect to its full potential. Start by adding your API to a default product and publishing that to a catalog. From here on, you can start testing your API, generate a developer portal or utilize other features based on your needs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-703" src="/wp-content/uploads/2021/12/1_LdawzDINrKXu6-dsb-ZUIA-1024x604.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row" style="padding-top: 14px;">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="2395" class="">Continue reading:</p>
<p id="2629" class="">a) <a href="https://apimatic.io/blog/2018/11/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users">Part 1 of API Transformer Recipes: Enabling Postman’s Team Sharing Features for OpenAPI Users</a><br>b) <a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest">Part 2 of API Transformer Recipes — Facilitating Migration from SOAP to REST</a><br>c) <a href="https://apimatic.io/blog/2019/07/moving-to-graphql-from-soap-or-rest">Part 4 of API Transformer Recipes — Moving to GraphQL from SOAP or REST</a><br>d) <a href="https://apimatic.io/blog/2020/06/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api">Part 5 of API Transformer Recipes — The Whys and Hows of Exposing a SOAP Service Using Your REST API</a></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/api-transformer-recipes-opening-ways-into-ibm-api-connect/">API Transformer Recipes: Opening ways into IBM API Connect</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/api-transformer-recipes-opening-ways-into-ibm-api-connect/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>API Transformer Recipes — Facilitating Migration from SOAP to REST</title>
		<link>/blog/api-transformer-recipes-facilitating-migration-from-soap-to-rest/</link>
					<comments>/blog/api-transformer-recipes-facilitating-migration-from-soap-to-rest/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Thu, 20 Dec 2018 08:17:22 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SOAP]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Rest]]></category>
		<category><![CDATA[Soap]]></category>
		<category><![CDATA[Wsdl]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=564</guid>

					<description><![CDATA[<p>This blog is the second part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&#160;API Transformer&#160;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted to [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/api-transformer-recipes-facilitating-migration-from-soap-to-rest/">API Transformer Recipes — Facilitating Migration from SOAP to REST</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="564" class="elementor elementor-564" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-26f17ca9 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="26f17ca9" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-56a7af44" data-id="56a7af44" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-582c502e elementor-widget elementor-widget-text-editor" data-id="582c502e" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="alignnone wp-image-565" src="/wp-content/uploads/2021/12/1_tqcLl6LbPrHu3jCAo8rJng.jpg" alt="API Transformer Recipes - Migration from SOAP to REST" width="800" height="350"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3db3" class=""><em>This blog is the second part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&nbsp;</em><a href="https://www.apimatic.io/transformer"><em>API Transformer</em></a><em>&nbsp;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted to a particular set of tools just because they use a certain API specification format.</em></p>
<p id="fe7e" class="">Back in 2017, when we launched support for&nbsp;<a href="https://www.w3.org/TR/2001/NOTE-wsdl-20010315">WSDL 1.1</a> in&nbsp;API Transformer, it was not anticipated that a large number of people will transform from files of this format. Mostly because WSDL 1.1 is designed exclusively for SOAP services while the supported output formats mainly describe RESTful services. However, the increasing number of people converting WSDL files on&nbsp;API Transformer&nbsp;made us think twice and compelled us to study this case more deeply. I will be sharing the findings of that in this blog. If you are a SOAP user looking to migrate to REST, I will also be discussing some ways to help you get started today.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<figure id="attachment_566" aria-describedby="caption-attachment-566" style="width: 700px" class="wp-caption aligncenter"><img class="wp-image-566" src="/wp-content/uploads/2021/12/1_r5zeugcyPNokW4Q-B7GV2g.png" alt="Number of WSDL conversions to other formats that support REST (Jan 2017 — Nov 2018)" width="700" height="385"><figcaption id="caption-attachment-566" class="wp-caption-text">Number of WSDL conversions to other formats that support REST (Jan 2017 — Nov 2018)</figcaption></figure>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="36ce">SOAP or REST: What is the preferred choice and why?</h2>
<p id="dc1c" class="">The choice between SOAP and REST depends mainly on the requirements of the application being developed. For larger enterprise-level applications, that demand standardization and rely heavily on security, SOAP is still preferred by many. REST, on the other hand, is quickly becoming the popular choice for mobile and web applications where higher performance and lesser complexity takes more priority. It has a smaller learning curve which reduces the time it takes for developers to work on, document and maintain such applications.</p>
<p class="">In most cases, REST relies on JSON for data exchange which has lesser overhead involved as compared to dealing with the highly verbose (and often painfully complex) XML in SOAP. JSON also means better support for browser clients. REST reads can be cached for better performance and scalability.</p>
<p id="f63d" class="">Today, with the ever increasing number of web and mobile applications, the APIs being exposed are largely based on REST+JSON. Such APIs change all the time as businesses adapt to new requirements and REST provides the much needed flexibility. Using SOAP in such cases, with its specific contractual agreements, is likely to add only unnecessary complexity. Due to this, even the developers who have had their services exposed using SOAP APIs are now looking to make them RESTful.</p>
<h2 id="b1db" class="">Will an adapter layer or a proxy service let you REST?</h2>
<p id="a9de" class="">If your SOAP service works over HTTP, some quick solutions to expose your SOAP service as a REST service are:</p>
<ol class="">
<li id="0f60">Add an adapter layer on top of the SOAP service</li>
<li id="3e6c">Add a proxy service for calling the SOAP service.</li>
</ol>
<p id="c8c7" class="">While I won’t be going into the depths of these, both solutions suggested above will have one thing in common: Conversion of any incoming REST requests to SOAP compatible requests (e.g. wrapping the request in a SOAP envelope) and conversion of any outgoing SOAP responses to REST compatible responses (e.g. converting XML responses to JSON).</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<figure id="attachment_567" aria-describedby="caption-attachment-567" style="width: 700px" class="wp-caption aligncenter"><img class="wp-image-567" src="/wp-content/uploads/2021/12/1_o_0QkZjJiEvgUE5htHTq4Q.jpg" alt="Handling REST requests with a converter" width="700" height="190"><figcaption id="caption-attachment-567" class="wp-caption-text">Handling REST requests with a converter</figcaption></figure>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="f3da" class="">And while these solutions are a good start and will let you get your system into production in no time, they are not very likely to be scalable in the long run. Eventually, a situation will arise when you will have no other choice but to refactor or rewrite your SOAP service using REST.</p>
<h2 id="189c" class="">Start RESTing with API Transformer</h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-568 aligncenter" src="/wp-content/uploads/2021/12/1_yBAR8Tr9BB1-m8AfBHjing.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="14ec" class="">So, if the adapter/proxy solution does not work for you and you are looking for a more effective and long-lasting solution, you will have to rethink your model and start building up from there. Sure, it is likely to take more time and would require a lot more manual work but hey, the fruits of hard work are sweet, aren’t they?</p>
<p id="4311" class="">Okay, let’s not despair just yet. API Transformer has got you covered. We can help make your task a little less daunting. How? We let you convert your WSDL files to OpenAPI/Swagger and other formats that support REST. This would give you a head start on the model that you need to work on. Below, I’ll dive into this a little deeper so you get a better idea of what I mean.</p>
<h3 id="6931">WSDL</h3>
<p id="f201" class="">This is a file associated with SOAP often described as a contract between the service provider and its consumer. It provides a complete definition of how the service works including fine grain details of all elements and attributes involved. It also helps dictate restrictions like the order the elements must appear in. Many tools exist that lets you generate method stubs in almost any language if you have the WSDL file with you.</p>
<h3 id="0b39">Formats that support REST</h3>
<p id="e30a" class="">A common question asked is: Is there a WSDL like format for REST? Truth is, there is no one format that describes all kinds of RESTful APIs. Many formats exist that attempt to cover as many aspects as possible. Some of the well-known ones include OpenAPI/Swagger, API Blueprint, RAML, etc. If you are able to get your hands on any one of these, you can benefit from a wide range of tools and frameworks that lets you mock, test APIs as well as auto-generate client/server code.</p>
<h3 id="9009" class="">From WSDL to a more RESTful model with API Transformer</h3>
<p id="6778" class="">As mentioned earlier, API Transformer&nbsp;helps you transform a WSDL file associated with a SOAP service to any of the popular REST-supporting formats. I converted one such file to OpenAPI/Swagger v2.0. The conversion process and output is analyzed below. If you are interested to see the complete files, you can find them&nbsp;<a href="https://github.com/fariadev22/api-transformer-recipes/tree/master/Migration%20from%20SOAP%20to%20REST">here</a>.</p>
<h4 id="d731"><strong><em>1. Service Information</em></strong></h4>
<p id="11f7" class="">During the conversion, service details like the name, documentation and location address are extracted from the WSDL and placed in the relevant Swagger components.</p>
<p id="2818" class=""><strong>WSDL</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;service name=&quot;HelloService&quot;&gt;
  &lt;documentation&gt;WSDL File for HelloService&lt;/documentation&gt;
  &lt;port binding=&quot;tns:Hello_Binding&quot; name=&quot;Hello_Port&quot;&gt;
     &lt;soap:address location=&quot;http://www.examples.com/MessagingService/&quot; /&gt;
  &lt;/port&gt;
&lt;/service&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="7a35" class="">OpenAPI/Swagger</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">swagger: &#039;2.0&#039;
info:
  version: &#039;1.0&#039;
  title: HelloService
  description: WSDL File for HelloService
host: www.examples.com
basePath: /MessagingService/
schemes:
- http</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="4447" class=""><strong><em>2. WSDL Operation vs Swagger Operation</em></strong></p>
<p id="fde2" class="">WSDL operations are defined in an abstract way inside the port types and their concrete details are provided in the bindings. When mapping these operations to Swagger operations, we try to utilize as much information as possible from both port types and bindings.</p>
<p id="83e8" class=""><strong>WSDL:</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;portType name=&quot;Hello_PortType&quot;&gt;
    &lt;operation name=&quot;getMessage&quot;&gt;
       &lt;input message=&quot;tns:GetMessageRequest&quot;/&gt;
       &lt;output message=&quot;tns:GetMessageResponse&quot;/&gt;
    &lt;/operation&gt;
&lt;/portType&gt;
&lt;binding name=&quot;Hello_Binding&quot; type=&quot;tns:Hello_PortType&quot;&gt;
    &lt;soap:binding style=&quot;document&quot;
       transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;
    &lt;operation name=&quot;getMessage&quot;&gt;
       &lt;soap:operation soapAction=&quot;getMessage&quot;/&gt;
       &lt;input&gt;
          &lt;soap:body use=&quot;literal&quot;/&gt;
       &lt;/input&gt;    
       &lt;output&gt;
          &lt;soap:body use=&quot;literal&quot;/&gt;
       &lt;/output&gt;
    &lt;/operation&gt;
 &lt;/binding&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="446e" class=""><strong>OpenAPI/Swagger:</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">paths:
  /getMessage:
    post:
      summary: getMessage
      tags:
      - Hello_Binding
      operationId: GetMessagePost
      produces:
      - application/json
      parameters:
      - name: Body
        in: body
        required: true
        schema:
          $ref: &#039;#/definitions/GetMessageRequest&#039;
      responses:
        200:
          description: &#039;&#039;
          schema:
            $ref: &#039;#/definitions/GetMessageResponse&#039;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="7c43">The mapping is not perfect, however:</p>
<p id="913d" class="">According to REST principles, a resource’s relative path should ideally indicate the resource on which the CRUD operations are to be performed. For the conversion from WSDL, this path is extracted from the SOAP operation’s name. However, since SOAP is function-driven, the operation names in WSDL are always function names that don’t always result in the ideal resource path. In the example above, therefore, the resource path <code>/getMessage</code>&nbsp;should have been&nbsp;<code>/message</code>&nbsp;(<code>message</code>&nbsp;being the resource here) with the HTTP verb as being sufficient to indicate the action to be performed on the resource (the&nbsp;<code>get</code>&nbsp;keyword in the path being unnecessary, therefore).</p>
<p id="86af" class=""><strong>b.</strong>&nbsp;For the conversion, we assume that all WSDL operations use&nbsp;<code>POST</code> by default unless the HTTP method is explicitly specified through&nbsp;<a href="https://www.w3.org/TR/2001/NOTE-wsdl-20010315#_http-b">HTTP bindings</a>&nbsp;in the WSDL file. This is because, in all other cases, detecting the correct CRUD operation from WSDL is not directly possible. The output, therefore, may not indicate the ideal HTTP method of the operation e.g. the&nbsp;<code>GetMessagePost</code>&nbsp;Swagger operation is only retrieving an object of the message resource without changing the resource in any way. Based on this, the operation should be using the&nbsp;<code>GET</code>&nbsp;method instead of&nbsp;<code>POST</code>. You will, therefore, be required to manually identify the correct method for all operations and change it in the output.</p>
<p id="5fd7" class=""><strong>c.</strong>&nbsp;REST is designed largely to work over HTTP while SOAP is capable of supporting other protocols as well. Any concrete binding information about other protocols will be lost during the transformation because of incompatibility with RESTful formats e.g. in the above conversion, any information related to the SOAP&nbsp;<code>transport</code>&nbsp;mechanism, binding&nbsp;<code>style</code>&nbsp;and body&nbsp;<code>encoding</code>&nbsp;is lost in the output.</p>
<h4 id="6fa0"><strong><em>3. Namespaces</em></strong></h4>
<p id="ca6b" class="">There is no concept of namespaces in REST whereas WSDL relies heavily on them:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;definitions name=&quot;HelloService&quot;
   targetNamespace=&quot;http://www.examples.com/wsdl/HelloService.wsdl&quot;
   xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot;
   xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot;
   xmlns:tns=&quot;http://www.examples.com/wsdl/HelloService.wsdl&quot;
   xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;
   xmlns:s1=&quot;http://www.examples.com/schema1&quot;
   xmlns:s2=&quot;http://www.examples.com/schema2&quot;&gt;
.
.
&lt;/definitions&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8f57" class="">In case of types from schemas of different namespaces, we try to preserve some of the namespacing context e.g. in the output the types are named&nbsp;<code>s1_MessageIdentificationInfo</code>&nbsp;and&nbsp;<code>s2_Message</code>&nbsp;where&nbsp;<code>s1</code>&nbsp;and&nbsp;<code>s2</code>&nbsp;are the respective namespace prefixes of the namespaces in which the types existed in the original WSDL.</p>
<p id="806f"><strong>WSDL:</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;message name=&quot;GetMessageRequest&quot;&gt;
    &lt;part name=&quot;messageId&quot; type=&quot;s1:MessageIdentificationInfo&quot;/&gt;
&lt;/message&gt;
&lt;message name=&quot;GetMessageResponse&quot;&gt;
    &lt;part name=&quot;message&quot; type=&quot;s2:Message&quot;/&gt;
&lt;/message&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="f23d" class=""><strong>OpenAPI/Swagger:</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">GetMessageRequest:
  title: GetMessageRequest
  type: object
  properties:
    messageId:
      $ref: &#039;#/definitions/s1_MessageIdentificationInfo&#039;
  required:
  - messageId
GetMessageResponse:
  title: GetMessageResponse
  type: object
  properties:
    message:
      $ref: &#039;#/definitions/s2_Message&#039;
  required:
  - message</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h4 id="5cc9"><strong><em>4. XML Schema to JSON Schemas</em></strong></h4>
<p id="e2cc" class="">The conversion involves mapping of XML schema content to JSON schemas (or a subset of JSON schemas but that is irrelevant here). Since XML and JSON are not fully compatible with each other, some information will not be fully translated e.g. JSON does not support attributes and due to this the&nbsp;<code>messageId</code>&nbsp;attribute of&nbsp;<code>MessageIdentificationInfo</code>&nbsp;is loaded as a normal field in the output with nothing to indicate its nature as an attribute.</p>
<p id="2760" class=""><strong>WSDL:</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;schema xmlns=&quot;http://www.w3.org/2001/XMLSchema&quot; targetNamespace=&quot;http://www.examples.com/schema1&quot; elementFormDefault=&quot;qualified&quot;&gt;
    &lt;element name=&quot;MessageIdentificationInfo&quot;&gt;
        &lt;complexType&gt;
            &lt;sequence&gt;
                &lt;element name=&quot;senderName&quot; type=&quot;xsd:string&quot;/&gt;
                &lt;element name=&quot;recipientName&quot; type=&quot;xsd:string&quot;/&gt;
            &lt;/sequence&gt;                
            &lt;attribute name=&quot;messageId&quot; type=&quot;xsd:string&quot;
              use=&quot;required&quot;/&gt;
        &lt;/complexType&gt;
    &lt;/element&gt;
&lt;/schema&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="522f" class=""><strong>OpenAPI/Swagger:</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">s1_MessageIdentificationInfo:
  title: s1_MessageIdentificationInfo
  type: object
  properties:
    messageId:
      type: string
    senderName:
      type: string
    recipientName:
      type: string
  required:
  - messageId
  - senderName
  - recipientName</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="e2b5" class="">Takeaways before you can fully REST</h2>
<p id="011e" class="">As you can see, the conversion isn’t the only step you need to get up and running with a RESTful service because it can only do so much. It provides you with a rough model of what your service can look like which will require additional work before it can be considered fully RESTful. For example, you will have to manually identify the resources involved in your service as well as the CRUD operations that needs to be performed on them besides&nbsp;<code>POST</code>.</p>
<p id="bb46" class="">Kin Lane, from API Evangelist, who once tried experimenting with such conversions summarizes his experience very nicely in his <a href="https://apievangelist.com/2018/01/08/seeing-reflections-from-the-past-rippling-in-the-api-pool-when-translated-wsdl-to-openapi/">blog</a>:</p>
<blockquote class="wp-block-quote">
<p>…I do like having tools that help me make sense of what was, and create a scaffolding for what can be. Then I just dive in and clean up, polish, and move forward as I see fit.</p>
</blockquote>
<p id="9b1a" class="">You will need to keep on molding your model until it attains a shape that suits your application as well as abides by the REST principles. A similar approach was also followed by some of our customers from&nbsp;<a href="https://www.nbc.ca/"> National Bank of Canada </a>&nbsp;who were able to create RESTful models for their SOAP based services using&nbsp; API Transformer.</p>
<p id="5075" class="">Once you have your model ready, there are tools out there that lets you generate server stubs which can ease the implementation process e.g. you can generate server stubs from Swagger Codegen&nbsp;with a OpenAPI/Swagger file.</p>
<h2 id="7027">Conclusion</h2>
<p id="98aa" class="">If you are ready to make the jump from SOAP to the RESTful world, nobody is stopping you. There are plenty of ways out there to facilitate you in the process. But, don’t jump blindly! Just because everyone is doing it doesn’t mean you have to as well. Establish the need first and then work towards it.</p>
<p id="f733" class="">Continue reading:<br>a) <a href="https://apimatic.io/blog/2018/11/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users">Part 1 of API Transformer Recipes: Enabling Postman’s Team Sharing Features for OpenAPI Users</a><br>b) <a href="https://apimatic.io/blog/2019/01/api-transformer-recipes-opening-ways-into-ibm-api-connect">Part 3 of API Transformer Recipes — Opening ways into IBM API Connect</a><br>c) <a href="https://apimatic.io/blog/2019/07/moving-to-graphql-from-soap-or-rest">Part 4 of API Transformer Recipes — Moving to GraphQL from SOAP or REST</a><br>d) <a href="https://apimatic.io/blog/2020/06/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api">Part 5 of API Transformer Recipes — The Whys and Hows of Exposing a SOAP Service Using Your REST API</a></p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/api-transformer-recipes-facilitating-migration-from-soap-to-rest/">API Transformer Recipes — Facilitating Migration from SOAP to REST</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/api-transformer-recipes-facilitating-migration-from-soap-to-rest/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>API Transformer Recipes: Enabling Postman’s Team Sharing Features for OpenAPI Users</title>
		<link>/blog/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users/</link>
					<comments>/blog/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Thu, 22 Nov 2018 10:53:46 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[OpenAPI]]></category>
		<category><![CDATA[Postman]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[OpenApi]]></category>
		<category><![CDATA[Team Collaboration]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=579</guid>

					<description><![CDATA[<p>This blog is first of the many to come as part of my new series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&#160;API Transformer&#160;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users/">API Transformer Recipes: Enabling Postman’s Team Sharing Features for OpenAPI Users</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="579" class="elementor elementor-579" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-787f8752 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="787f8752" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-7ae21081" data-id="7ae21081" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-64199452 elementor-widget elementor-widget-text-editor" data-id="64199452" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="alignnone wp-image-580" src="/wp-content/uploads/2021/12/1_2lEC0iYnVTvZGXa7gZ00sg-1024x683.jpg" alt="API Transformer Recipes: Enabling Postman’s Team Sharing Features for OpenAPI Users" width="1024" height="683"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="81d0" class=""><em>This blog is first of the many to come as part of my new series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&nbsp;</em><a href="http://apimatic.io/transformer"><em>API Transformer</em></a><em>&nbsp;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted to a particular set of tools just because they use a certain API specification format.</em></p>
<p id="486c" class="">Are you an <a href="http://swagger.io/specification/">OpenAPI</a> user looking to use&nbsp;<a href="https://www.getpostman.com/">Postman</a>&nbsp;somewhere in your development pipeline but don’t really know how? Well, then, you are in the right place. In this blog, I will show you how being an&nbsp;&nbsp;OpenAPI&nbsp;&nbsp;user (or a Swagger one if you prefer the old name) should not stop you from taking advantage of some of the very powerful team collaboration&nbsp;&nbsp;Postman&nbsp;&nbsp;features.</p>
<h2 id="a655" class="">Postman Team Collaboration Features</h2>
<p id="4438" class="">Postman’s easy-to-use and rich interface attracts a large number of users. If you have a team working on APIs, it offers team workspaces to let your team efficiently and effectively collaborate over those APIs while establishing a single source of truth.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-581 aligncenter" src="/wp-content/uploads/2021/12/1_pnc_7FATLxmRqVEBsBWpLA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3f36" class="">Postman has also exposed their <a href="https://docs.api.getpostman.com/">API</a>&nbsp;using which you and your team members can easily push latest collections/API specifications from within your applications.</p>
<h2 id="afc3" class="">From OpenAPI to Postman</h2>
<p id="51a8" class="">&nbsp;OpenAPI is a preferred choice of majority of the users out there due to its extensive support of a wide range of APIs and a strong community. While there are tools out there that support team collaboration for OpenAPI files e.g.&nbsp;<a href="https://swagger.io/tools/swaggerhub/"> SwaggerHub</a>, it may be that you are on the lookout for alternatives. The reasons to that are purely dependant on personal preferences, the type of project you are working on or the size of your team. So if you maintain your specs in&nbsp;&nbsp;OpenAPI but are looking to use&nbsp; Postman, simply including <a href="http://apimatic.io/transformer">API Transformer</a>&nbsp;in your workflow will help achieve your goal.</p>
<p id="e358" class="">One of our customers Phil Sturgeon, who works at <a href="https://www.wework.com/">WeWork</a>, maintains specs in OpenAPI&nbsp;&nbsp;but uses Postman to share them with his team. To streamline this workflow, he makes use of&nbsp;&nbsp;API Transformer. You can check out his blog <a href="https://engineering.wework.com/our-api-specification-workflow-9337448d6ee6">here</a>&nbsp;to learn more.</p>
<h2 id="1bec" class="">Deep Dive Into the Flow</h2>
<p id="eb32" class=""><em>The steps discussed below demonstrate the use of APIs for converting your files and pushing them to</em>&nbsp;<em>Postman</em><em>. However, if you have quite a few files that needs processing you can opt to use the GUIs instead. It is entirely up to you.</em></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-582 aligncenter" src="/wp-content/uploads/2021/12/1_lLs3msYrocpEm3VPWCC9Cw-1024x448.png" alt=""></p>
<figcaption>From OpenAPI to Postman: Complete Workflow</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="d73b" class="">The steps involved for you to convert your OpenAPI files to a Postman compatible format are simply:</p>
<h3 id="6cdb"><strong>Step 1: Collect your OpenAPI files</strong></h3>
<p id="7b42" class="">Collect all OpenAPI files you intend to use in&nbsp;&nbsp;Postman. These can be new or updated versions of the existing ones. Pass them one by one as input to the next step.</p>
<h3 id="2420" class=""><strong>Step 2: Transform each file using API Transformer</strong></h3>
<p id="0ccb" class="">The&nbsp;&nbsp;Postman&nbsp;&nbsp;app and&nbsp;&nbsp;API&nbsp;&nbsp;accepts&nbsp;<a href="https://schema.getpostman.com/">Postman schema files</a> as import formats. To use an&nbsp;&nbsp;OpenAPI&nbsp;&nbsp;file in&nbsp;&nbsp;Postman&nbsp;&nbsp;you would, therefore, need to convert it to an appropriate version of the&nbsp;&nbsp;Postman schema file. This is where&nbsp;&nbsp;API Transformer&nbsp;&nbsp;comes into play which supports both schema versions 1.0 and 2.0 .</p>
<p id="c158" class="">So as part of this step, to convert your file, you will need to use the appropriate API Transformer endpoint from the <a href="https://www.apimatic.io/apidocs/apimatic/">CodeGen and Transformer API</a>. Pass&nbsp;&nbsp;OpenAPI&nbsp;&nbsp;file as input along with Postman chosen as the output format (v1.0 or v2.0). If the file is valid, the&nbsp;&nbsp;API&nbsp;&nbsp;will respond with the Postman file which you can then pass on to the next step.</p>
<h3 id="a26f"><strong>Step 3: Push each Postman Schema File to Postman</strong></h3>
<p id="b813" class="">This step involves the use of Postman API to push each of the transformed files into&nbsp;&nbsp;Postman . Once that is done, Postman will automatically sync this file for all the team members giving them the latest view instantly.</p>
<p id="9318" class="">And that’s about it. It is as simple to enable Postman&#8217;s team sharing features for OpenAPI users.</p>
<p id="939e" class="">Continue reading:<br>a) <a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest">Part 2 of API Transformer Recipes — Facilitating Migration from SOAP to REST</a><br>b) <a href="https://apimatic.io/blog/2019/01/api-transformer-recipes-opening-ways-into-ibm-api-connect">Part 3 of API Transformer Recipes — Opening ways into IBM API Connect</a><br>c) <a href="https://apimatic.io/blog/2019/07/moving-to-graphql-from-soap-or-rest">Part 4 of API Transformer Recipes — Moving to GraphQL from SOAP or REST</a><br>d) <a href="https://apimatic.io/blog/2020/06/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api">Part 5 of API Transformer Recipes — The Whys and Hows of Exposing a SOAP Service Using Your REST API</a></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users/">API Transformer Recipes: Enabling Postman’s Team Sharing Features for OpenAPI Users</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>A Year with API Transformer</title>
		<link>/blog/a-year-with-api-transformer/</link>
					<comments>/blog/a-year-with-api-transformer/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 20 Apr 2018 10:53:46 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api Specs]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Open Api]]></category>
		<category><![CDATA[Usage Trends]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=592</guid>

					<description><![CDATA[<p>Developers today are actively seeking relevant tools and frameworks in order to make their API design and consumption process as easy and efficient as possible. An important part of this process is describing the API in any of the available specification formats. And since each of the API description formats come with their own toolset, [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/a-year-with-api-transformer/">A Year with API Transformer</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="592" class="elementor elementor-592" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-20b0caaf elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="20b0caaf" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-220cb7e" data-id="220cb7e" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4c8a6d4e elementor-widget elementor-widget-text-editor" data-id="4c8a6d4e" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-593 aligncenter" src="/wp-content/uploads/2021/12/1_NUcBLHXepZNfgEswFi9UzA.jpg" alt="A Year with API Transformer 2017" width="1000" height="400"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="15dd" class="">Developers today are actively seeking relevant tools and frameworks in order to make their API design and consumption process as easy and efficient as possible. An important part of this process is describing the API in any of the available specification formats. And since each of the API description formats come with their own toolset, the need to be able to convert between different formats is growing rapidly. This is where <a href="https://www.apimatic.io/transformer">API Transformer</a> comes into play. It offers a tool called “<strong>Convertron</strong>” which has helped many users transform their API description files from one format to another. Many popular formats like&nbsp;<a href="https://swagger.io/specification/">OpenAPI</a>, <a href="https://raml.org/">RAML</a>, etc. are supported.</p>
<p id="3fb9" class="">Over the years, API Transformer has evolved quite a lot. In particular, the year 2017 saw some important additions to the tool like the <a href="https://apimatic.io/blog/2017/05/apimatic-turns-3-announcing-support-of-oas-3-0">newly added support for OpenAPI 3</a>&nbsp; and WSDL. Many improvements were also made to the existing format parsers in which, without any doubt, the valuable feedback from our amazing users played a vital role. The year has flown away but has left behind some interesting trends and patterns that we plan to share with you today in this blog.</p>
<h2 id="38fc" class="">Trends from 2017</h2>
<p id="076a" class="">For each aspect, two kinds of data will be analyzed. One will take into account all events that occurred irrespective of the users performing these events. However, we have a handful of users who perform thousands of conversions every month. The first data gets largely skewed because of these conversions. So in the second data, to get a better picture, we try to remove this skewed behavior of the data by considering only unique events per user.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_594" aria-describedby="caption-attachment-594" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-594" src="/wp-content/uploads/2021/12/1_nPsR6Mra5k2662q79wtUKA-1024x268.png" alt="Transformer Usage 2017" width="1024" height="268"><figcaption id="caption-attachment-594" class="wp-caption-text">Transformer Usage 2017</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="has-text-align-center"><strong>Most Common Formats Brought In By Developers</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_597" aria-describedby="caption-attachment-597" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-597" src="/wp-content/uploads/2021/12/1_hgXyTyoyGGuFaIdl79_UsA-2-1024x498.png" alt="Total vs Unique Analysis of Most Common Formats Imported" width="1024" height="498"><figcaption id="caption-attachment-597" class="wp-caption-text">Total vs Unique Analysis of Most Common Formats Imported</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3b19" class="">Out of the total imported files on Transformer (approximately 94,000), 50% were Postman 1.0 files, 25% were Postman 2.X while only 6% were OpenAPI 2.0. The second graph does not consider redundant format conversions per user e.g. if a user converted fifty Postman 1.0 and ten OpenAPI 2.0 files, he converted two unique format files (one Postman and one OpenAPI). Elimination of this redundancy shows that 24% of the imported files were defined using OpenAPI 2.0, 20% were using Postman 2.X while 10% were using WSDL. The rest falls in the smaller chunks. So the most common formats brought in by developers were&nbsp;<strong>OpenAPI</strong>&nbsp;and&nbsp;<strong>Postman</strong>.</p>
<h2 id="239f" class=""><strong>Most Common Formats Developers Loved Exporting To</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_598" aria-describedby="caption-attachment-598" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-598" src="/wp-content/uploads/2021/12/1_ZxiFUSv6zuu6dZbmD4xGWQ-1024x511.png" alt="Total vs Unique Anaylsis of Most Common Formats Exported" width="1024" height="511"><figcaption id="caption-attachment-598" class="wp-caption-text">Total vs Unique Analysis of Most Common Formats Exported</figcaption></figure>
</figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="49b5" class="">52% of the API description files were exported to API Blueprint while 35% to OpenAPI 2.0. Eliminating multiple exports to the same format per user, we observed that 55.5% of the files were exported to OpenAPI 2.0 while 9% to RAML 1.0. API Blueprint was not very dominant in this second case. Overall,&nbsp;<strong>OpenAPI 2.0</strong>&nbsp;seemed to take the lead for the format that developers wanted to play around with.</p>
<p id="49b5" class="">The choice of the format when exporting could have been related to several factors like size of the community, tools, and frameworks available, strong documentation, and availability of a newer and stable version with more features, to name a few. OpenAPI 2.0 and Postman 2.0/2.1 are a natural preference over their older versions (OpenAPI 1.2, Postman 1.0). Very few users prefer to export to WADL or WSDL because of limited usage and tooling.</p>
<h2 id="8dfa">Most Common Format Conversions</h2>
</div>
</div>
</div>
</div>
<!-- /wp:image -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_600" aria-describedby="caption-attachment-600" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-600" src="/wp-content/uploads/2021/12/1_ZQQsPA96_vXC2uzHXHdzUA-1-1024x383.png" alt="Total vs Unique Analysis of Top Ten Format Conversions" width="1024" height="383"><figcaption id="caption-attachment-600" class="wp-caption-text">Total vs Unique Analysis of Top Ten Format Conversions</figcaption></figure>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="fe70" class="">We also looked at the top ten import-export mappings to understand which conversions are most popular. For the total conversions performed, the most common conversion seen was from Postman 1.0 to API Blueprint (approx 45,000 conversions) whereas if we eliminate non-unique mappings per user, import from&nbsp;<strong><em>Postman 2.X to OpenAPI 2.0</em></strong>&nbsp;was found to be the most common (approx 530). This shows that a lot of developers prefer Transformer for converting&nbsp;<strong>from Postman to other API description formats</strong>.</p>
<h2 id="4312">Geographical Usage of Formats</h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_601" aria-describedby="caption-attachment-601" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-601" src="/wp-content/uploads/2021/12/1_WP6Umd8XIusdVoxazoqtQw-1024x352.png" alt="Total vs Unique Analysis of Geographical Usage of Formats" width="1024" height="352"><figcaption id="caption-attachment-601" class="wp-caption-text">Total vs Unique Analysis of Geographical Usage of Formats</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e7b3" class="">From the above graphs, you can see that users of Transformer are distributed far and wide into various geographical regions of the world. We had some users performing thousands of conversions every month from India and they constitute 52% of the total conversions represented in the first case. If multiple conversions from the same location per user are ignored, we see that 24% of the conversions occurred from the US while only 10% were performed from India. Hence, the majority of our users using Transformer in 2017 were based in the <strong>US and India.</strong></p>
<p id="019a">Note that for these graphs we eliminated data of conversions in which the locations were unknown.</p>
<h2 id="5dee" class="">Most Common Formats That Failed To Transform</h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_602" aria-describedby="caption-attachment-602" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-602" src="/wp-content/uploads/2021/12/1_KOksY86ZTLjamtrzlxjHrw-1024x515.png" alt="Total vs Unique Analysis of Most Common Format Failures" width="1024" height="515"><figcaption id="caption-attachment-602" class="wp-caption-text">Total vs Unique Analysis of Most Common Format Failures</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="d223" class="">Some of the users failed to transform their files (approx 8,000 which is roughly 8% of the total conversions performed). 35% of the total failed conversions were invalid/unsupported (more on this later) while 30% were RAML files (0.8/1.0) and 18% were OpenAPI files (1.X/2.0). By removing redundant failures of the same format per user, a big 44% of the chunk of failures belonged to the invalid/unsupported, 20% belonged to RAML(0.8/1.0) while 17% were OpenAPI files (1.X/2.0).</p>
<p id="2370" class="">As you can see, a large portion of failures constitutes of the&nbsp;<strong>invalid/unsupported files</strong>. These were the files which were either:</p>
<ul class="">
<li id="4bfe">Not valid API description files e.g. HTML files, JSON response data, XML schema files OR</li>
<li id="3c2a">Supported by Transformer but lacked necessary metadata that prevented proper identification e.g. API Blueprint files without “Format” and “Host” information. Some common mistakes also prevented proper identification of the files (invalid JSON, incomplete file, etc.) OR</li>
<li id="3663">Not supported by Transformer in 2017 e.g. Insomnia</li>
</ul>
<p id="aba8" class="">The rest of the conversions are largely attributed to&nbsp;<strong>RAML or OpenAPI</strong>&nbsp;files. A common cause for these is uploading a file containing external references without providing these references within the specification file.</p>
<h2 id="8308">Transformations via Web vs Transformations via API</h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_603" aria-describedby="caption-attachment-603" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-603" src="/wp-content/uploads/2021/12/1_WpsbcgB_75hO87-D9AXkMA-1024x438.png" alt="Total vs Unique Comparison of Transformer Web and API Conversions" width="1024" height="438"><figcaption id="caption-attachment-603" class="wp-caption-text">Total vs Unique Comparison of Transformer Web and API Conversions</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9192" class="">API Transformer not only provides a web UI to users for performing conversions but also facilitates them by providing a simple API that offers the same functionality as the UI. In 2017, 76% of the total conversions were made using the API. However, by considering only unique web/API conversions per user shows that&nbsp;<strong>96% of the conversions were made using the web interface</strong>.</p>
<h2 id="99c8">Size of the APIs</h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<figure id="attachment_604" aria-describedby="caption-attachment-604" style="width: 718px" class="wp-caption aligncenter"><img class="wp-image-604" src="/wp-content/uploads/2021/12/1_TiawMyqOHqW0zjam3qmnfQ.png" alt="Analysis of Size of API for Total Conversions" width="718" height="445"><figcaption id="caption-attachment-604" class="wp-caption-text">Analysis of Size of API for Total Conversions</figcaption></figure>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e1ee" class="">For measuring the size of an API, we considered the number of endpoints in an API. Pretty much all the APIs had less than 300 endpoints. However, a very small portion (0.39% of the total conversions and 2.61% of the unique conversions per user) of large APIs also existed that had endpoints ranging above 300.</p>
<h2 id="e9bd">Conclusion</h2>
<p id="5fe9" class="">2017 was no doubt an exciting year offering intriguing insights into<a href="https://www.apimatic.io/transformer"> API Transformer</a>. This year we plan to make Transformer even better by adding other commonly used formats like&nbsp;&nbsp;Insomnia and by improving other areas of it as well. So, stay tuned!</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/a-year-with-api-transformer/">A Year with API Transformer</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/a-year-with-api-transformer/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Common Mistakes Developers Make In Their OpenAPI 3 Files</title>
		<link>/blog/common-mistakes-developers-make-in-their-openapi-3-files/</link>
					<comments>/blog/common-mistakes-developers-make-in-their-openapi-3-files/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 09 Mar 2018 10:53:46 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api Specs]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Developers]]></category>
		<category><![CDATA[Open Api]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=561</guid>

					<description><![CDATA[<p>OpenAPI 3 (OAS 3) is the latest iteration of the OpenAPI Specification.&#160;APIMatic has been supporting the format since it was still a release candidate. With adoption rates for OAS 3 going up, we noticed a few common mistakes developers are prone to make. Majority of these relate to the way certain features worked with OAS [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/common-mistakes-developers-make-in-their-openapi-3-files/">Common Mistakes Developers Make In Their OpenAPI 3 Files</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="561" class="elementor elementor-561" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-4cc673ec elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="4cc673ec" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-5e480934" data-id="5e480934" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4b49bdc8 elementor-widget elementor-widget-text-editor" data-id="4b49bdc8" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">OpenAPI 3 (OAS 3) is the latest iteration of the OpenAPI Specification.&nbsp;<a href="https://apimatic.io/blog/2017/05/apimatic-turns-3-announcing-support-of-oas-3-0">APIMatic has been supporting the format</a> since it was still a release candidate. With adoption rates for OAS 3 going up, we noticed a few common mistakes developers are prone to make. Majority of these relate to the way certain features worked with OAS 2.0 (more commonly known as Swagger 2.0) but require a different approach with OAS 3.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_562" aria-describedby="caption-attachment-562" style="width: 978px" class="wp-caption aligncenter"><img class="wp-image-562" src="/wp-content/uploads/2021/12/1_8gRmupEoR2NxC_uwstwhSw.png" alt="Common Mistakes Developers Make In Their OpenAPI 3 Files" width="978" height="490"><figcaption id="caption-attachment-562" class="wp-caption-text">Mistakes Found In OAS 3 Files During Conversions On&nbsp;API Transformer</figcaption></figure>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="284d" class="">Using the old “<code>swagger”</code>&nbsp;property to specify OpenAPI version</h2>
<p id="2472" class="">A Swagger user, who has had his hands dirty with version 2.0, would usually specify Swagger version using the&nbsp;<code>swagger</code>&nbsp;property as follows:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-json">{
  &quot;swagger&quot;: &quot;2.0&quot;
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="029b" class="">When migrating towards OAS 3, developers are still seen using the same property to specify the version of the newer format.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre><code class="language-json">{
  &quot;swagger&quot;: &quot;3.0.0&quot;
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="660f" class="">This is&nbsp;<strong>invalid</strong>&nbsp;as OAS 3 has now replaced that with the new&nbsp;<code>openapi</code>&nbsp;<a href="https://swagger.io/specification/#openapi-object-17">property</a> which makes use of semantic versioning.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre><code class="language-json">{
  &quot;openapi&quot;: &quot;3.0.0&quot;
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="7892" class="">Defining body parameter in the “parameters”</h2>
<p id="bd42" class="">Remember how Swagger 2.0 let you define a&nbsp;<a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#parameter-object">body parameter</a>&nbsp;in the operation&nbsp;<code>parameters</code>&nbsp;using location set to&nbsp;<code>body</code>? Compared to parameters located elsewhere (query, header, path, formData), this parameter had less restrictions and used a schema object for type definition. OAS 3 decided to separate this parameter for good and let it have its own place in&nbsp;<code>requestBody</code>. The form parameters are also covered under this new property. But developers are still bent on defining the body parameter in the&nbsp;<code>parameters</code>&nbsp;section.&nbsp;<em>Sigh.</em><br><br>This is now&nbsp;<strong>invalid</strong>&nbsp;in OAS 3:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">&quot;parameters&quot;: [
 {
   &quot;name&quot;: &quot;body&quot;,
   &quot;in&quot;: &quot;body&quot;,
    &quot;schema&quot;: {
      &quot;type&quot;: &quot;string&quot;
    }
 },
 {
   &quot;name&quot;: &quot;petId&quot;,
   &quot;in&quot;: &quot;path&quot;,
   &quot;schema&quot;: {
      &quot;type&quot;: &quot;string&quot;
   }
 }]</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9d4f">The correct way is to instead use&nbsp;<code>requestBody</code>&nbsp;for form and body parameters:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">&quot;parameters&quot;: [
 {
   &quot;name&quot;: &quot;petId&quot;,
   &quot;in&quot;: &quot;path&quot;,
   &quot;schema&quot;: {
     &quot;type&quot;: &quot;string&quot;
   }
 }],
&quot;requestBody&quot;:{
&quot;content&quot;: {
  &quot;text/plain&quot;: {
    &quot;schema&quot;: {
      &quot;type&quot;: &quot;string&quot;
    }
   }
 }
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="7b70" class="">Declaring response headers as a list of Header objects</h2>
<p id="8535" class="">It looks like some developers are trying to generate their OAS 3 files from 3rd party tools that do not fully conform to the OAS standards. This results in inaccurate header objects. The&nbsp;<a href="https://swagger.io/specification/#response-object-71">specification</a>&nbsp;states that the response headers must be:</p>
<p id="9f02">1) A map with header name as key and Header object as value&nbsp;<strong>OR</strong></p>
<p id="5da3" class="">2) A map with header name as key and a Reference object as value (that basically would still point to a Header object).</p>
<p id="a288" class="">This implies that an array of header objects or an array of reference header objects can, therefore, not be used but the mistake is still seen quite commonly. Also, the Swagger editor itself does not seem to complain in either case.</p>
<p id="313a">So essentially this is&nbsp;<strong>invalid</strong>&nbsp;(at least as per the spec):</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">&quot;responses&quot;: {
   &quot;200&quot;: {
      &quot;description&quot;: &quot;Response for content that consists of a single part.&quot;,
       &quot;headers&quot;: [
       {
         &quot;$ref&quot;: &quot;#/components/headers/HeaderName&quot;
       }]
   }
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>The valid way is to use a map instead:</p>
<pre class=""><code class="language-json">&quot;responses&quot;: {
   &quot;200&quot;: {
      &quot;description&quot;: &quot;Response for content that consists of a single part.&quot;,
     &quot;headers&quot;: {
       &quot;HeaderName&quot;: {
          &quot;$ref&quot;: &quot;#/components/headers/HeaderName&quot;
        }
     }
  }
}</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="e448">Referencing an undefined OAS 3 component</h2>
<p id="f657" class="">Last but not the least, developers often reference an OAS 3 component (definition of a schema, parameter, response, header or a security scheme, etc.) but they don’t define this component in the relevant section of the root <code>components</code>&nbsp;<a href="https://swagger.io/specification/#componentsObject">object</a>. So for example, an OAS 3 response in the API file may be referencing a schema definition like:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">&quot;responses&quot;: {
   &quot;200&quot;: { 
      &quot;content&quot;: {
         &quot;application/json&quot;: {
           &quot;schema&quot;: {
             &quot;$ref&quot;: &quot;#/components/schemas/pet&quot; 
           }
         }
      }
    }
 }</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>This requires a definition for&nbsp;<code>pet</code>&nbsp;to be present under the&nbsp;<code>schemas</code>&nbsp;property that itself would lie inside the root&nbsp;<code>components</code><a href="https://swagger.io/specification/#componentsObject">property</a> as follows:</p>
<pre class=""><code class="language-json">&quot;components&quot;: {
   &quot;schemas&quot;: {
      &quot;pet&quot;: {
         &quot;type&quot;: &quot;object&quot;,
         &quot;properties&quot;: {
           &quot;propertyName&quot;: {
              &quot;type&quot;: &quot;string&quot;
            }
          }
       }
    }
}</code></pre>
<p id="3c66" class="">A lot of users forget to define some of these referenced components. Do ensure that any such references you make to components using <code>$ref</code> are resolvable to avoid issues with tools that use this format.</p>
</div>
</div>
</div>
</div>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="ca92" class="">Conclusion</h2>
<p id="d0ea" class="">As of date, there is no official JSON schema available for OAS 3. With the release of JSON schema, we can expect better validation of OAS 3 files, which will ultimately lead to OAS 3 tools and services becoming more stable and consistent. It’s only then that the probability of such mistakes occurring will decline.</p>
<p id="a6b7" class="">Have OAS files of your own? Head over to&nbsp;<a href="https://www.apimatic.io/transformer">Transformer</a> and start converting to other formats.&nbsp;</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/common-mistakes-developers-make-in-their-openapi-3-files/">Common Mistakes Developers Make In Their OpenAPI 3 Files</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/common-mistakes-developers-make-in-their-openapi-3-files/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>APIMatic Turns 3 &#8211; Announcing Support of OAS 3.0</title>
		<link>/blog/apimatic-turns-3-announcing-support-of-oas-3-0/</link>
					<comments>/blog/apimatic-turns-3-announcing-support-of-oas-3-0/#respond</comments>
		
		<dc:creator><![CDATA[Adeel Ali]]></dc:creator>
		<pubDate>Thu, 04 May 2017 10:31:00 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[Success Stories]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=521</guid>

					<description><![CDATA[<p>This week marks APIMatic’s 3rd anniversary. The year #3 was a special one, as we expanded our presence to 3 countries across 3 continents of the world. Today, we’re going to make our 3rd anniversary more special by announcing the support of the well-anticipated API description format: OpenAPI Specification 3.0. OAS 3.0 — Why should [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/apimatic-turns-3-announcing-support-of-oas-3-0/">APIMatic Turns 3 &#8211; Announcing Support of OAS 3.0</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="521" class="elementor elementor-521" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-2c54eba1 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="2c54eba1" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-e07a09c" data-id="e07a09c" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-1e851a78 elementor-widget elementor-widget-text-editor" data-id="1e851a78" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-522" src="/wp-content/uploads/2021/12/1_zQvay45s17EUODiR0AhC2w.jpg" alt="APIMatic Turns 3 - Announcing Support of OAS 3.0" width="800" height="253"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="66b9" class="">This week marks APIMatic’s 3rd anniversary. The year #3 was a special one, as we expanded our presence to 3 countries across 3 continents of the world. Today, we’re going to make our 3rd anniversary more special by announcing the support of the well-anticipated API description format: OpenAPI Specification 3.0.</p>
<h2 id="0444" class="">OAS 3.0 — Why should we care?</h2>
<p id="ead8" class="">In the absence of a standard like WSDL, the web API community have come up with numerous varieties to describe APIs. Among those formats, Swagger, RAML (by Mulesoft) and API Blueprint (by Apiary) are the widely adopted ones. In late 2015, Swagger was renamed as OpenAPI Specification and became part of the<a href="https://www.openapis.org/">Open API Initiative</a>, which is backed up by the likes of Google, IBM, Atlassian and many others. The OAI is currently focused on creating a vendor neutral API description format which is named as<a href="https://github.com/OAI/OpenAPI-Specification/blob/OpenAPI.next/versions/3.0.md">OpenAPI Specification 3.0</a>. With Apiary and Mulesoft also joining the initiative recently, OAS 3.0 is anticipated to be the prime choice to describe APIs in the coming future.</p>
<h2 id="8767" class="">What’s in it for you?</h2>
<p id="6c36" class="">By adding the support of OAS 3.0, APIMatic has opened up a whole world of possibilities. Let’s discuss a few probable use cases:</p>
<h3 id="53f4">Getting the Best of Every Vendor</h3>
<p id="06ef" class="">You keep your APIs in OAS 3.0, but also want to use a tool that is compatible with only RAML 1.0 or API Blueprint. You can do that by temporarily converting your API on-the-fly via the&nbsp;<a href="https://www.apimatic.io/transformer/">Transformer API</a>. Our friends at Postman took this to another level, as now their customers are able to store their favourite Postman Collections in multiple API formats at Github. Check the story out in their own words:&nbsp;<a href="http://blog.getpostman.com/2017/02/15/new-postman-pro-integration-apimatics-api-transformer/">Why We Became Big Believers in APIMatic’s API Transformer</a></p>
<h3 id="5e2b">Developerless Developer Experience</h3>
<p id="318d" class="">You’ve designed the best API of the world, and have also described it using OAS 3.0. So far so good! Now your API is going to meet developers. Are you prepared for that? Do you have time and resources to provide a developer experience that maximises developer adoption? Do you speak all the languages of your developers? APIMatic can sort this out for you. Just import your OAS 3.0 to our&nbsp;<a href="https://www.apimatic.io/developer-experience-portal/">developerless API portal</a>, and witness the magic of automation.</p>
<h3 id="7b11" class="">Unlocking Old SOA</h3>
<p id="1139" class="">Your decade old enterprise system contains hundreds of thousands of legacy WSDL files. Now you want to adopt a new micro-services architecture based on OAS 3.0, but the idea of porting all those WSDLs to OAS 3.0 gives you nightmare. No worries! APITransformer.com can do it for you in a matter of few hours.</p>
<h2 id="584a" class="">What’s Next?</h2>
<p id="2c19" class="">We’ve been closely following the development around OAS 3.0. At the time of writing, the latest version is 3.0.0-RC1, which is supported across APIMatic product line. OAS 3.0 is coming up with some&nbsp;<a href="http://apievangelist.com/2017/03/23/api-definition-open-api-specification-300rc0/">exciting new features</a>&nbsp;such as multiple hosts, other response codes, linking and examples. APIMatic’s code-gen engine already supports some of them such as&nbsp;<a href="https://www.apimatic.io/blog/post/improved-sd-ks-with-timeouts-multiple-base-uri-support-and-custom-exception-classes"> multiple hosts</a>, while some others are being added to our product roadmap.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/apimatic-turns-3-announcing-support-of-oas-3-0/">APIMatic Turns 3 &#8211; Announcing Support of OAS 3.0</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/apimatic-turns-3-announcing-support-of-oas-3-0/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
