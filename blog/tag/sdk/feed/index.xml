
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Sdk Archives - APIMatic</title>
	<atom:link href="/blog/tag/sdk/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Tue, 21 Dec 2021 07:05:47 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.4</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>Sdk Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>The Anatomy of API Code Samples</title>
		<link>/blog/the-anatomy-of-api-code-samples/</link>
					<comments>/blog/the-anatomy-of-api-code-samples/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 08 Jun 2020 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Code Samples]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Code Sample]]></category>
		<category><![CDATA[Sdk]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=359</guid>

					<description><![CDATA[<p>Hence it comes as no surprise why code samples make an important part of the developer experience checklist list for several APIs programs, including the likes of Amazon, Facebook, Twilio, and Stripe. All of them have code samples included one way or the other and have found massive success. And for a very good reason. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/the-anatomy-of-api-code-samples/">The Anatomy of API Code Samples</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="359" class="elementor elementor-359" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-2c773500 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="2c773500" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-41f291e6" data-id="41f291e6" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-7abbf594 elementor-widget elementor-widget-text-editor" data-id="7abbf594" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.5.6 - 28-02-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<!-- wp:image -->
<figure class="wp-block-image size-large"></figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9c8b" class="">While APIs form an important part of modern software development, it’s crucial to ensure that the utility offered by an API does not come at the cost of hindered productivity. Often it takes developers multiple hours to get familiar with an API before they can start building and integrating with it, however, a great developer experience can ensure developers get started with the least of steps and minimal time. In this blog, we will discuss how code samples help contribute towards an outstanding developer experience. We will discuss in detail what makes good samples, the different styles of samples, and how samples gel in with documentation and other elements to form a formidable developer experience.</p>
<h2 id="74b0" class="">Part I: Code Samples — Why Should We Care?</h2>
<p id="6565" class="">Learning new technologies is a complex task, even for the savviest of developers. Often it requires them to go through in-depth documentation, guides, and tutorials, something which they are very keen to skip on. What code samples do instead, is provide them with a task-based learning activity, which requires concrete action.</p>
<blockquote class="wp-block-quote">
<p>Developers love learning by experience.</p>
</blockquote>
<p id="60f5" class="">Developers are hands-on learners and code is another language they speak. When they see code, they want to try it, break it apart, put it into action. It’s their favorite call-to-action, often when figuring out if an API is the right fit for them, developers would have already tested out the code samples on developer portals to make their choice.</p>
<p id="d54b" class="">This was proved by a&nbsp;<a href="https://eventil.com/talks/PPSznP-jarod-reyes-how-twilio-writes-documentation">user study</a>&nbsp;conducted by Twilio, where they found that pages with lesser words before code, did better than pages with more sentences before code.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_dlX9uwiw3sdqOg9VFMaDKg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="a6b5">Hence it comes as no surprise why code samples make an important part of the developer experience checklist list for several APIs programs, including the likes of Amazon, Facebook, Twilio, and Stripe. All of them have code samples included one way or the other and have found massive success. And for a very good reason.</p>
<h3 id="c41c">API Calls are Complex Structures</h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_th9O3N-5hKaf_z2EAFepQQ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="0a22">Before we further talk about code samples, it’s important to understand the need for them in the first place. Why can’t developers do without them?</p>
<p id="3347">And it all starts with putting an API call together. A lot goes into an API call, all these protocols, and conventions, and developers get all caught up in it, instead of focusing on their actual projects. It can take developers multiple hours to figure out what to put into a call, taking a toll on their productivity and creativity and all adding up to integration time.</p>
<p id="e3da" class="">What code samples do is put there calls together for them, in languages of their choice, so they don’t have to do it. Nicely done samples can get developers to&nbsp;<strong>the first Hello World</strong>&nbsp;with an API without writing a single line of code. Samples that go beyond that can be put straight into production. Which now leads to our next question.</p>
<h3 id="0d90">How many code samples can you write?</h3>
<p id="cae9">Not enough! Especially if you are looking for coverage of every endpoint. APIs tend to change and evolve and to update the samples manually with every iteration, even you somehow managed to produce them is not feasible.</p>
<p id="226a" class="">A viable approach here is to auto-generate these samples using an out of the box documentation solution. Different tools have different ideas on how to package deliver these samples. While some do the bare minimum, others go the extra mile to see developers have to put in as little work to get them running. It’s important for API owners to select the right tool to provide the best samples to their consumers, it should be a top priority choosing a documentation solution.</p>
<h2 id="db1d">Part II : Code Samples — Several Different Styles</h2>
<p id="3b6d" class="">To help API owners make well-informed choices, we ran a study to compare this different style of samples, which we analyzed keeping in mind the following qualities:</p>
<ul class="">
<li><strong>Learning Objective</strong>&nbsp;— They demonstrate actual (non-theoretical) use of API</li>
<li><strong>Runnable</strong>&nbsp;— Are runnable out of the box on a console and IDEs</li>
<li><strong>Interactive</strong>&nbsp;— Come with a playground to tweak them around</li>
<li><strong>Language Idiomatic —&nbsp;</strong>Proper language Structure to gel in with production-ready applications</li>
</ul>
<p id="d76f" class="">We categorized our learning into 5 different styles, the summary of which is categorized in the table below:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_ciLtfA5TKB_gpe_Io6eBGg@2x.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="178f"><strong>Style 1: Static, Non- Runnable HTTP Snippets</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="alignnone" src="/wp-content/uploads/2021/12/1_utlmN5MUbvMqVh3hRBnOTw.png" alt="The Anatomy of API Code Samples" width="700" height="294"></p>
<figcaption>Code Sample on Postman</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>The first style is made of static samples, which are not runnable out of the box and required some tweaking done on them. The samples while easily navigable alongside the reference docs, come with no code playground and cannot be tried or tested on the portal.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_wNmdSk-xDCaLpftrbDJG8A.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="13bd" class="">We call the samples,&nbsp;<strong>HTTP snippets</strong>, because they essentially look like an HTTP call, without any proper language structure around them. Samples for some languages were copy-paste ready, while others took a bit of tweaking to run. In the case of Java, we had to configure maven dependencies for the build, and the generator could not pick some values such as the example body and the auth header, which have to be manually added.</p>
<p id="580c" class="">These samples were built upon the&nbsp;<a href="http://www.mashape.com/">Mashape</a>&nbsp;<code>httpsnippet</code> library, which has been made open source by Kong to be included within your documentation products. This specific sample was generated on the Postman platform. While there was no on-portal console, on the Postman app you can run a call using Postman collections.</p>
<h3 id="fc1d"><strong>Style 2: Dynamic, Non- Runnable HTTP Snippets</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_6UNsCWYCQM1Anwrbz6lLMQ.png" alt=""></p>
<figcaption>Code Sample on Stoplight.io</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">The second style of samples made of dynamic HTTP snippets. While the sample came along with a console, they were incomplete and had to be tweaked to be made runnable on the console and IDEs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-385 aligncenter" src="/wp-content/uploads/2021/12/1_WMUhQmNcXNDGLrkPLEfkYg.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="ec4f">After a few simple fixes, including the missing headers and entering a body, we got the samples running.</p>
<p id="1b16">The console, while getting the job done, made it a difficult task to add in these fields, offering no help on what goes inside the call. For somebody completely unaware of the API and starting new, making use of the console could prove to be a challenge.</p>
<p id="6bfc" class="">These samples, too, were built on the Mashape’s HTTP Snippet library and resembled barebone curl command lacking language structure.</p>
<p id="85db" class="">Samples in this style are available in Shell, Javascript, Node, C, Java, PHP, Objective-C, Swift, Python, Ruby, C#, GO and OCaml, covering pretty much all major platforms. We found this style on&nbsp;Stoplight.io.</p>
<h3 id="5646"><strong>Style 3: Dynamic, Runnable HTTP Snippets</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_4e7PmSXiQ1aKqaXKMbLluw.png" alt=""></p>
<figcaption>Code Sample on Readme.io</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="319f">The third style of samples made of dynamic snippets that were runnable out of the box. We had to add nothing to the samples to make them work, they came with all the required constructs.</p>
<p id="bed3">The samples come with an intuitive playground which lets you know what kind of field goes where with what data types. This makes it very easy to construct a sample.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_FcRjxPahKOa71Z_fbu5vSw.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9218">Although the samples did a good job explaining what goes in and out of an API call, they were still not idiomatic and required work to be done on them. For instance, there is no body-serialization going on, all these different fields that have to go as arguments, go as one single string and there is no mechanism to put those values together in the form of one single string. These samples were found on Readme.io.</p>
<p id="7964" class="">What we also found missing in all three of these styles was lack of getting started guides, for instance, the HTTP client requires to be included as a dependency and then included as imports within the sample, something which has been left to the discretion of the user to figure out. For novice developers, setting up development environments may also prove to be a challenge, something which the samples or the documentation does not help with at all.</p>
<h3 id="384d"><strong>Style 4: Dynamic, Runnable HTTP snippets, with Proper Guides</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_Nys41hEwySBdPhLYQxYJGw-1.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>The fourth style of samples, while also dynamic and runnable, came with an extra advantage. We found configuration instructions for them, which made it easier to work with them.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_0cK-QcLXleJ_VoBfOeTkXg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">The sample can be tried and tested on the in-product interactive console. Although the console was not as intuitive as the one found in Style 3, particularly making it tough to add arguments, you have to make sure to not mess up a single space of bracket when making up the JSON string, or the request won’t go.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_oelI4U_0KTc12oayvGuZHQ.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="d3c5">Style 5: Dynamic, Runnable &amp; Language Idiomatic snippets</h3>
<p id="86cf">These samples are different than the ones we saw above, you see no specifics of making an API call here, no URLs passed or methods declared or headers going in. Instead, you see some object-oriented code here, using proper crud mechanisms.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_DspO9rFjpbnhtLZjxYFZ0Q.png" alt=""></p>
<figcaption>Code Sample generated on APIMatic.io</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8cb9" class="">This is because these samples were generated alongside an SDK, an SDK abstracts out all the details about making an API call and generates additional language structure around these samples, so developers have to write as little communication code as possible. This includes body serialization and response deserializations, which makes it very easy to work with data points.</p>
<p id="266d" class="">The samples can be tried and tested out and tweaked using an interactive explorer, which comes with intuitive, form-based ways to input. The console validates every field, so no incorrect data goes in and helps you construct samples without touching code at all. With the console you can construct API calls with your sample arguments and authentication keys, and copy-paste the resulting samples in your production-ready applications.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_wcQclzK732E-djl-Ws-SlQ.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="279e">And all of that comes with proper documentation, the platform gives API providers the facility to document every parameter in each of the endpoints and data models. Providers can also auto-generate &#8220;getting started guides&#8221; for different IDEs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_bvvGJZTDaI0E2-k57HCWHg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="has-text-align-center" style="text-align: left;">Once set, the developers navigate to their desired use case, copy-paste the code, and start working on the business logic — letting the SDK and the sample take care of logistics.</p>
<h2 id="21f7">Part III: Making Code Samples Work in Production</h2>
<p id="77cf" class="">Looking at the different styles of samples, the question that now arises is how practical are these samples to use? Do they completely replace the need to code, or are they just a push towards the right direction? Do they fully demonstrate the use case for the endpoint? Or do they just explain the logistics of making an API call?</p>
<h3 id="d87e">Language Coded HTTP Snippets or More?</h3>
<p id="6704">If you closely look at many of the auto-generated samples, especially the styles 1 to 4, what they essentially do is eliminate the redundant work of configuring environments, and help consumers figure out what kind of syntax to use. However, when making real-world use of API, you need a lot more. Do these samples, which essentially lack language structure and look like language translated HTTP requests, cut it? The answer is<strong>&nbsp;NO&nbsp;</strong>and for the following reasons:</p>
<ul class="">
<li><strong>No Data Types:</strong>&nbsp;The samples takes input and output in the form of a string, leaving it to the consuming developers to write an efficient i/o mechanism to complete these requests. Often the fields inside the body are not documented.</li>
<li><strong>No Data Models:</strong>&nbsp;Modelling the JSON/XML as classes make it easier to deal with the data, both input, and output. These “models” add a whole different layer on top of the API, with your application having to interact with the model, instead of queried response in JSON or XML.</li>
<li><strong>No Validation and Error Handling:</strong>&nbsp;Since there is no proper I/O mechanism, and both inputs are taken and output returns in form of JSON strings, it’s impossible to validate the sent data and handle error cases to determine what went wrong with the request.</li>
</ul>
<p id="d900">To further demonstrate our point, we will write a&nbsp;<strong>Sample App&nbsp;</strong>to make a new&nbsp;<strong>pet&nbsp;</strong>entry to a store. The app will utilize Code Samples generated by&nbsp;<strong>Postman&nbsp;</strong>for the endpoint<strong>&nbsp;Add Pet.</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_utlmN5MUbvMqVh3hRBnOTw-1.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e759" class="">Copy-pasting the code straight away did not work. To configure the HTTP client, we had to include the maven dependency to the build. Following which we found the authentication header missing. We passed in the credentials:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><strong><code>.addHeader(&quot;api_key&quot;, &quot;special-key&quot;)</code></strong></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b89b" class="">And then had to build a JSON String to pass in the input, since the argument body is passed as a String. Constructing an argument body of the two required fields, this is how the sample looked like:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>package TestApp.Testapp123;
import java.io.*;
import okhttp3.*;

 class main {
  public static void main(String []args) throws IOException{
     
	 OkHttpClient client = new OkHttpClient().newBuilder()
	 .build();
	  MediaType mediaType = MediaType.parse(&quot;application/json&quot;);
	  RequestBody body = RequestBody.create(mediaType, &quot;{\&quot;name\&quot;:\&quot;doggie\&quot;,\&quot;photoUrls\&quot;:[\&quot;photoUrls1\&quot;]}&quot;);
	  Request request = new Request.Builder()
	 .url(&quot;https://petstore.swagger.io/v2/pet&quot;)
	 .method(&quot;POST&quot;, body)
	 .addHeader(&quot;Accept&quot;, &quot;application/json, application/xml&quot;)
	 .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)
	 .addHeader(&quot;api_key&quot;, &quot;special-key&quot;)
	 .build();	  
	  Response response = client.newCall(request).execute();
	  System.out.println(response.body().string()); 	
	    }
	  }</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">We ran the code after this tweaking, and it worked like a charm. So how do this sample further translates to real-world usage? If we were to take inputs for the Pet entry from a user, how do we send that as arguments? And before that how do we ensure the data taken from the user is the of the correct type? To tackle that we wrote a model class for the Pet Object, with all the underlying attributes including getters and setters.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>package TestApp.SimpleConsoleAppFix;

import java.util.List;

import io.swagger.petstore.models.Category;
import io.swagger.petstore.models.StatusEnum;
import io.swagger.petstore.models.Tag;

public class PetModel {
	
	    public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public Category getCategory() {
		return category;
	}
	public void setCategory(Category category) {
		this.category = category;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public List&lt;String&gt; getPhotoUrls() {
		return photoUrls;
	}
	public void setPhotoUrls(List&lt;String&gt; photoUrls) {
		this.photoUrls = photoUrls;
	}
	public List&lt;Tag&gt; getTags() {
		return tags;
	}
	public void setTags(List&lt;Tag&gt; tags) {
		this.tags = tags;
	}
	public StatusEnum getStatus() {
		return status;
	}
	public void setStatus(StatusEnum status) {
		this.status = status;
	}
	    Long id;
	    Category category;
	    String name;
	    List&lt;String&gt; photoUrls;
	    List&lt;Tag&gt; tags;
	    StatusEnum status;

}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e551" class="">Following which we wrote the code to take in input values for these attributes. Now that we ensured we took in these values, with their correct data types, how do we pass these in the request, since the request passes the arguments in the form of a string. Manually doing this was, of course, unfeasible and out of the question, so we had to write in an object to string mapper to do the job for us. This took in these various attribute fields and put them together in the form of a JSON string.</p>
<p id="b586" class="">It was at this point that we were able to achieve a business use case out of the sample. We could pass in the input parameters, with their correct types, concatenated as a JSON string and passed along with the argument. The model allowed us to keep local records of the sent values as well.https://blog.devapi.dream.press/media/a6a1ace16d322eaaf541f83acf4905f9</p>
<p id="4294" class="">Working with multiple endpoints and multiple models would have taken us even more time, depending on the use case and business logic. For instance, for the GET endpoints, we would have to write a string to object mapper to parse values from the response string back to our model. While the sample does a great job pushing developers in the right direction, it is clear that it is not a plug and play situation. Developers have to put in a lot of code to get the calls running, and have to figure out on their own what goes before or comes after the API call.</p>
<p><em>Now imagine if there were samples that could take care of all these logistics, you had to write no communication code at all, and could just plug and play a sample into action. The good news is, you no longer have to imagine. The language idiomatic samples generated alongside an SDK already do that for you.</em></p>
<h2 id="21e8">Language Idiomatic Code Samples — The Way To Go</h2>
<p id="b15b">SDKs have often been labeled as the cornerstone of the API developer experience. What SDKs essentially do is that they abstract out all underlying details of making an API call, making your API look like a library. They provide developers a complete framework to model their applications, including all the necessary dependencies, referenced libraries, system libraries, i/o mechanisms, and class models.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_ncYb-AnKZ5JZxOytMwp1PA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="4ce3" class="">Furthermore SDKs automatically format API responses to match the data types used in the programming language. They add an interface on top of the API, so your app interacts with the modeled data from SDK, instead of raw API arguments and responses. By providing SDKs, you can help developers focus on the business logic while taking care of API communication code.</p>
<p id="933e">Code samples generated with SDKs have a lot more work done on them. Since the SDK abstracts out request construction, none of the construction bit makes part of the sample, making the sample look very lean. Such samples can easily fit in with your applications in a very scalable manner, you only have to add minimal communication code, since there exist mechanisms to access, manipulate and work around with all the data fields, that go in and come out of an API call.</p>
<h2 class="has-text-align-center">. . .</h2>
<p id="308d" class="">Concluding this all, we strongly recommend that developers make use of code samples to consume APIs. No matter what style, design, or approach. Code samples will help you get started easily and save you tons of time. While for most people, the simple HTTP snippets may do the job, it is samples with more language structure that help with real-world use and can fit in straight with your applications.</p>
<p id="8467" class="">Again we emphasize the fact that the developer experience is a key driver for an API adoption. APIs are meant to execute integrations, and the easier to integrate, the better the API. Luckily for you, we at APIMatic hold all sorts of expertise to help improve the experience you deliver to developers. Reach out to us today at&nbsp;<a href="https://apimatic.io/contact">https://apimatic.io/contact</a>&nbsp;and let’s discuss what can be done to enhance your offerings today.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/the-anatomy-of-api-code-samples/">The Anatomy of API Code Samples</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/the-anatomy-of-api-code-samples/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Testing Auto-Generated SDKs — Problems, Techniques and Goals</title>
		<link>/blog/testing-auto-generated-sdks-problems-techniques-and-goals/</link>
					<comments>/blog/testing-auto-generated-sdks-problems-techniques-and-goals/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Thu, 27 Jul 2017 11:02:53 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Jenkins]]></category>
		<category><![CDATA[Sdk]]></category>
		<category><![CDATA[Sdk Generation]]></category>
		<category><![CDATA[Testing]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=532</guid>

					<description><![CDATA[<p>Ensuring the quality of automatically generated code has always been a tough nut to crack at APIMatic. Code generation engines dynamically generate code; a section of code that appears in a generated SDK might be different or even non-existent in other SDKs. How, then, can the correctness of generated code be ensured when its form [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/testing-auto-generated-sdks-problems-techniques-and-goals/">Testing Auto-Generated SDKs — Problems, Techniques and Goals</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="532" class="elementor elementor-532" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-49564178 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="49564178" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-37bf436c" data-id="37bf436c" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-37fd1f69 elementor-widget elementor-widget-text-editor" data-id="37fd1f69" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-533" src="/wp-content/uploads/2021/12/1_u63JGTl-GhgdpBOH9Ns1YQ.jpg" alt="Testing Auto-Generated SDKs — Problems Techniques &amp; Goals by APIMatic" width="1000" height="400"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="4fef" class="">Ensuring the quality of automatically generated code has always been a tough nut to crack at APIMatic. Code generation engines dynamically generate code; a section of code that appears in a generated SDK might be different or even non-existent in other SDKs. How, then, can the correctness of generated code be ensured when its form is determined by limitless combinations of endpoint configurations, model structures, and code generation settings? In this article, we will share with you our humble beginnings in the world of generated code testing, our current state of affairs, and our future goals and aspirations.</p>
<blockquote class="wp-block-quote">
<p><em>The only way to make sure that the generated code works exactly as expected is to write unit tests for it.</em></p>
</blockquote>
<p id="f39a" class="">To ensure that a code generation engine is working correctly, it is not enough to only test the code which generates code. Individual components of the engine might be generating pieces of code correctly but it is necessary to test that these pieces of generated code fit together perfectly and work as expected in the form of an SDK. Independent testing of the generated SDK is therefore also required to guarantee quality. But how does one go about doing that? You can compile the generated SDK and the compiler will catch syntax errors for you. But what do you do about logic errors? And how do you test SDKs of interpreted programming languages which necessitate running the code to check for simple syntax errors?</p>
<h2 id="7e65" class="">The Past — Manual Testing</h2>
<p id="a85e" class="">The only way to make sure that the generated code works exactly as expected is to write unit tests for it and that is how our initial testing efforts began. We created a comprehensive API description covering the most commonly expected endpoint configurations, model structures, and code generation settings.</p>
<p id="678b" class="">A test API, aptly named Tester API, was created against this API description, SDKs were generated and developers manually wrote unit tests to test these SDKs. Whenever changes were made to the code generation engine to add new features or fix bugs, developers regenerated SDKs for the Tester API and ran the unit tests they had previously written.</p>
<p id="8e88" class="">These unit tests had to be updated whenever the Tester API was improved or added to. When additional test APIs were created to test varying code generation settings or features like API authentication, it started becoming increasingly tedious for developers to maintain unit tests for all of them and manually run them after every small change in the engine. Due to these obvious limitations and scalability issues, this manual approach was quickly discarded in favor of a more automated one.</p>
<blockquote class="wp-block-quote">
<p><em>We design unit tests for our APIs once and leave it up to our code generation engine to generate language specific unit tests.</em></p>
</blockquote>
<h2 id="0f99" class="">The Present — Jenkins CI and Automatically Generated Unit Tests</h2>
<p id="c5e9" class="">We had been working on adding functionality in our code generation engine to generate unit tests with our SDKs when we realized that it was the perfect opportunity to simultaneously set up a testing server in-house. Given our need to test SDKs of multiple APIs in ten different languages, we required flexibility and power and therefore opted for an on-premise Jenkins installation.</p>
<p id="562b" class="">Gone are the days of manually writing and maintaining unit tests for our&nbsp;<em>SDKs</em>; we design unit tests for our&nbsp;<em>APIs</em> once and leave it up to our code generation engine to generate language-specific unit tests. Whenever a developer makes a commit to our code generation engine, our Jenkins server pulls the code from the online repository, compiles the project, runs internal unit tests, generates SDKs of all our supported platforms for all our test APIs, and then runs the unit tests for all these SDKs. The whole automated process, involving testing SDKs of about a dozen APIs, takes about thirty minutes and if all tests pass, the developer is allowed to release his changes.</p>
<p id="ca9a" class="">There are limitations with this approach as well. Even though our code generation engine generates unit tests for us and our Jenkins server runs them, we still have to&nbsp;<em>design</em>&nbsp;these unit tests and add them to the API descriptions ourselves. We also have to manually update the corresponding test APIs when the API descriptions are improved or added to. Furthermore, although we now have a very wide testing coverage for our generated code, we cannot yet guarantee that all corner cases are covered; ideally, every SDK generated by our code generation engine should be automatically tested before reaching the hands of our clients.</p>
<blockquote class="wp-block-quote">
<p><em>Any SDK delivered in the hands of our customers will be guaranteed to work correctly.</em></p>
</blockquote>
<h2 id="7b33" class="">The Future — Mock APIs and Automatically Designed Unit Tests</h2>
<p id="1f24" class="">Planning the future of SDK testing at APIMatic has got us all very excited and we have some very cool ideas which we would like to implement as soon as possible. We are aiming to introduce a testing framework that will enable us to achieve 100% test coverage for each and every SDK generated by our code generation engine. Any SDK delivered in the hands of our customers will be guaranteed to work correctly.</p>
<p id="7173" class="">This can be achieved by leveraging the power of our code generation engine to create mock APIs which can serve randomly generated static data. To create a mock API, all one needs to know is the structure of the data and the methods of receiving and serving it. This information is completely and very conveniently captured by API descriptions. Once we automatically start creating mock APIs, our code generation engine will be able to not only&nbsp;<em>generate</em> SDK-specific unit tests but also&nbsp;<em>design</em>&nbsp;these unit tests based on the mock API it has created.</p>
<p id="31ea" class="">We expect that this framework, once implemented, will allow us to actively monitor for faulty SDK generations from our service. We will be able to squash out bugs very quickly without having to wait for bug reports and this shall eventually enable us to deliver SDKs of unprecedented quality to our customers.</p>
<p id="8c2c" class="">We always welcome feedback, comments, and suggestions from our customers. Please <a href="mailto:sales@apimatic.io">reach out</a> if you have any questions or would like to discuss better ways to ensure the quality of our generated code!</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/testing-auto-generated-sdks-problems-techniques-and-goals/">Testing Auto-Generated SDKs — Problems, Techniques and Goals</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/testing-auto-generated-sdks-problems-techniques-and-goals/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Neutrino API: Leveraging APIMatic to Reach a Wider Developer Audience</title>
		<link>/blog/neutrino-api-leveraging-apimatic-to-reach-a-wider-developer-audience/</link>
					<comments>/blog/neutrino-api-leveraging-apimatic-to-reach-a-wider-developer-audience/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Thu, 27 Jul 2017 11:02:53 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Developer Relations]]></category>
		<category><![CDATA[Sdk]]></category>
		<category><![CDATA[Success Story]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=547</guid>

					<description><![CDATA[<p>Neutrino API&#160;launched back in 2013 on a mission to fix those inherently complex problems which crop up in almost all software projects. The Neutrino API platform provides a highly available, performant global network that lets developers focus on their product and not on building and maintaining complex in-house tools not relevant to their core business. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/neutrino-api-leveraging-apimatic-to-reach-a-wider-developer-audience/">Neutrino API: Leveraging APIMatic to Reach a Wider Developer Audience</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="547" class="elementor elementor-547" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-1a696a67 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="1a696a67" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-4704375c" data-id="4704375c" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-1d6904f5 elementor-widget elementor-widget-text-editor" data-id="1d6904f5" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-548 aligncenter" src="/wp-content/uploads/2021/12/1_vhEdZQU4bYr65rBtA7sZWA.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="fc16" class=""><a href="https://www.neutrinoapi.com/">Neutrino API</a>&nbsp;launched back in 2013 on a mission to fix those inherently complex problems which crop up in almost all software projects. The Neutrino API platform provides a highly available, performant global network that lets developers focus on their product and not on building and maintaining complex in-house tools not relevant to their core business. Today, Neutrino API serves thousands of applications all over the world and handles more than 25 million API requests a day.</p>
<p id="cf90" class="">The team at Neutrino API uses APIMatic to create high-quality Software Development Kits (SDKs) for developers using their APIs. We recently had a chance to talk to Jaron Turnbull from the team to learn how APIMatic has helped them reach a wider developer audience for their APIs while simultaneously saving them time and cutting huge SDK development costs. Below follows our discussion with him on the topic.</p>
<blockquote class="wp-block-quote">
<p><em>APIMatic has saved us at least a couple of hundred hours of development time.</em></p>
</blockquote>
<p id="131a" class=""><strong><em>How did you discover APIMatic and how long have you been using it?</em></strong></p>
<p class=""><br><strong>Jaron:</strong> We discovered APIMatic via Google a couple of years back when we were looking for tools to automatically generate SDKs. We were originally planning on building and maintaining our SDKs in-house but then we realized just how much work was involved and so we started looking for tools that would do that for us and that’s where APIMatic came in. We’ve probably been using it ever since it was first released.</p>
<p id="07f9" class=""><em><strong>How many APIs do you have?</strong>&nbsp;<strong>And how often do they evolve?</strong></em></p>
<p id="ff26" class=""><strong>Jaron:</strong> We have over thirty APIs. They are constantly being updated behind the scenes but the API definitions tend not to change a huge amount. The responses get new fields added to them quite frequently so we update our specifications about once a month.</p>
<blockquote class="wp-block-quote">
<p><em>We’re also using (APIMatic) as a storage platform for all our API definitions. It replaced an in-house tool we were previously using to describe our APIs.</em></p>
</blockquote>
<p id="2a51" class=""><em><strong>Do you use APIMatic only to generate SDKs?</strong></em></p>
<p class=""><br><strong>Jaron:</strong> We were initially just using it to generate SDKs for our APIs. But now we’re also using it as a storage platform for all our API definitions. It actually replaced an in-house tool we were previously using to describe our APIs. We also now use the API transformer to transform our API definitions into different formats and that’s one of the key areas where APIMatic has helped us.</p>
<p id="6f25" class=""><em><strong>Do you have developers in your team who test SDKs before they are released?</strong></em></p>
<p id="31f1" class=""><strong>Jaron:</strong> Yes, we do. It only takes about ten to fifteen minutes to test an SDK and make sure everything is working as expected.</p>
<p id="052a" class=""><em><strong>How long does the whole process take? From updating the specification to the release of SDKs?</strong></em></p>
<p id="2733" class=""><strong>Jaron:</strong> For a small change, it usually takes an hour to update the specification in APIMatic, generate the SDKs, test them and then upload them to our website. It would have taken at least a day if we were to do the whole process manually.</p>
<p id="990c" class=""><em><strong>Why do you need to transform your API definitions into different formats?</strong></em></p>
<p id="82b4" class=""><strong>Jaron:</strong> A few of our users need them since they have been using other tools to generate SDKs and testing kits for our APIs and they want to continue doing so. We also occasionally hear from some people who need the specifications to generate their own documentation rather than use ours.</p>
<p id="b616" class=""><em><strong>What monetary or temporal benefit did you get from using APIMatic?</strong></em></p>
<p id="5e82" class=""><strong>Jaron:</strong> APIMatic has saved us at least a couple of hundred hours of development time so far. A small SDK for a single API would probably take around forty to fifty hours of development time at least. Multiply that with the number of SDKs we provide and you can get a rough estimate. Additionally, APIMatic lets us make changes to our API definition in one place and we can get updated definitions in so many different formats instantly. Doing that manually would take a long time.</p>
<p id="1ce0" class=""><em><strong>What is your favorite part about APIMatic?</strong></em></p>
<p id="ef75" class=""><strong>Jaron:</strong> When we first started using APIMatic, we were thinking that defining our APIs in your editor would be a boring and tedious job but then we found the JSON importer and it was a pleasure to work with. That was definitely the highlight for me.</p>
<p id="a6f0" class=""><em><strong>What are your future plans for use for APIMatic?</strong></em></p>
<p id="8e6c" class=""><strong>Jaron:</strong> We’re going to continue using it as we do. Also, we haven’t yet generated and tested SDKs for a couple of platforms APIMatic offers and we are planning on doing that soon.</p>
<p id="aeaa" class="">We at APIMatic are very happy to hear that the team from Neutrino API has enjoyed using APIMatic and has benefited from it in so many different ways. Stay tuned for further updates and <a href="mailto:sales@apimatic.io">get in touch</a> if you would like to find out how you can start using APIMatic today to generate SDKs and documentation for your APIs!</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/neutrino-api-leveraging-apimatic-to-reach-a-wider-developer-audience/">Neutrino API: Leveraging APIMatic to Reach a Wider Developer Audience</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/neutrino-api-leveraging-apimatic-to-reach-a-wider-developer-audience/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>APIMatic: The first ever SDK generator to support OAuth 2.0</title>
		<link>/blog/apimatic-the-first-ever-sdk-generator-to-support-oauth-2-0/</link>
					<comments>/blog/apimatic-the-first-ever-sdk-generator-to-support-oauth-2-0/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 24 Jul 2017 11:02:51 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Authentication]]></category>
		<category><![CDATA[Oauth]]></category>
		<category><![CDATA[Oauth2]]></category>
		<category><![CDATA[Sdk]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=541</guid>

					<description><![CDATA[<p>Some of the most popular and well-respected APIs use OAuth 2.0 to authorize user data sharing. Facebook, GitHub, and many others are among those who have adopted the standard. We have been planning on adding proper support for OAuth 2.0 in our SDKs for quite some time now and are excited to announce that the [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/apimatic-the-first-ever-sdk-generator-to-support-oauth-2-0/">APIMatic: The first ever SDK generator to support OAuth 2.0</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="541" class="elementor elementor-541" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-7baf9e4b elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="7baf9e4b" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-2a4d3967" data-id="2a4d3967" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-c29d724 elementor-widget elementor-widget-text-editor" data-id="c29d724" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="4ffa" class="">Some of the most popular and well-respected APIs use OAuth 2.0 to authorize user data sharing. Facebook, GitHub, and many others are among those who have adopted the standard. We have been planning on adding proper support for OAuth 2.0 in our SDKs for quite some time now and are excited to announce that the first development iteration has been completed.</p>
<p id="5801" class="">OAuth 2.0 is an open standard for authorization defined in&nbsp;<a href="https://tools.ietf.org/html/rfc6749">RFC 6749</a>. It allows a resource owner (user) to provide a third-party client (application) secure delegated access to their data on a resource server without sharing their credentials. OAuth 2.0 is being widely adopted nowadays by API providers.</p>
<p id="4d9d" class="">The previous support for OAuth 2.0 in our SDKs was limited to only adding authentication token headers in requests. This release mainly addresses token acquirement and refresh mechanisms that were previously left up to the user.</p>
<h2 id="97e3" class="">All Grant Types Supported</h2>
<p id="0452" class="">This wider support for OAuth 2.0 has been added in SDKs of all our supported platforms except for Go (which will be getting it very soon). The implicit grant flow is only implemented for AngularJS because it is meant to be used in user agent-based applications i.e. those applications which run in the browser.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-542 aligncenter" src="/wp-content/uploads/2021/12/1_UAZ5p0ZI5ay5KMd_gr2VgA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="8015">Get Started with OAuth-enabled SDKs</h2>
<p id="48a7" class="">If your API supports OAuth 2.0 for authorization, the first step to do is to update the authentication settings in your API description. If you are editing your API description using our API editor, you can follow these steps to get started:</p>
<p id="cb0d">1. In the authentication settings tab, select the correct OAuth 2.0 grant type.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-543 aligncenter" src="/wp-content/uploads/2021/12/1_vS38YQjwGjIBMPKGbTwBMw.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8c8e">2. Add all scopes the SDK may use.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-544 aligncenter" src="/wp-content/uploads/2021/12/1_4zapXT7xE6TB0ZhGNjYI2Q.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3293">3. Set up any required OAuth2 settings.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-545" src="/wp-content/uploads/2021/12/1_m7__zYe2CKrMldlZoS6UhQ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="af00" class="">Any required configuration parameters like Redirect URL, Client ID, Client Secret etc. will automatically be generated in the SDK’s configuration file. For resource owner password credentials grant and client credentials grant the SDK user simply needs to set the values of these variables and then call the authorize function with the required scopes. The SDK will fetch the access token, store it in memory, use it for every secure endpoint call and even refresh it if/when it expires.</p>
<h2 id="04c1">How Tokens are Acquired</h2>
<p id="f937" class="">The implementation of the token acquirement mechanism varies for different grant types.</p>
<p id="4f77" class="">For the client credentials and resource owner password credentials grants, if the user has not authorized the client, the SDKs seamlessly obtains an access token before making a call to a secure endpoint with the assumption that all subsequent API calls do not require an access token tied to any specific scopes. In most cases, however, it is expected that the user will explicitly authorize the client with specific scopes before calling a secure endpoint.</p>
<p id="70fb" class="">For the authorization code grant type, the SDKs build the authorization URL for the user. It is up to the user to visit the URL, authorize the application and provide the authorization code back to the SDK by calling the authorize function. The SDKs will exchange this authorization code for an access token and refresh it whenever required.</p>
<h2 id="a840">How we Handle Token Refresh</h2>
<p id="4ef4">The OAuth 2.0 RFC allows token refresh mechanisms for the authorization code grant and resource owner password credentials grant. Our SDKs keep track of access token expiry and seamlessly refresh the token whenever required.</p>
<h2 id="f800" class="">Callback Hooks for Token Storage</h2>
<p id="814e" class="">Our implementation does not make any assumptions of the storage options available to the developer. Instead, the developer may provide a callback which the SDKs call when the access token is obtained or refreshed. This callback can implement storage logic for the access token. The SDKs allow the developer to easily set a previous access token on initialization.</p>
<p id="7eef" class="">We at APIMatic always strive to make our code flexible to meet the needs of so many different developers while maintaining code quality. Please reach out if you have any feedback or questions regarding our implementation; we are always happy to hear from our users!</p>
<p id="d7a1" class="">Also, you can get started with&nbsp;<a href="https://docs.apimatic.io/getting-started/defining-your-first-api">creating API SDKs</a>&nbsp;now or learn more about how to&nbsp;<a href="https://docs.apimatic.io/define-apis/oauth2-authorization">create OAuth2-enabled SDKs</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/apimatic-the-first-ever-sdk-generator-to-support-oauth-2-0/">APIMatic: The first ever SDK generator to support OAuth 2.0</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/apimatic-the-first-ever-sdk-generator-to-support-oauth-2-0/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Behind the Scenes of SDK Generation</title>
		<link>/blog/behind-the-scenes-of-sdk-generation/</link>
					<comments>/blog/behind-the-scenes-of-sdk-generation/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 17 Jul 2017 11:02:53 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Sdk]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=535</guid>

					<description><![CDATA[<p>Automated SDK generation is a tricky challenge; on one hand, you want to keep SDKs lean with minimal code and dependencies and on the other hand, you want to allow API providers to customize the generated code according to the needs of their developers such that SDKs can be more than mere language wrappers of [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/behind-the-scenes-of-sdk-generation/">Behind the Scenes of SDK Generation</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="535" class="elementor elementor-535" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-77137095 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="77137095" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-41d1c8b1" data-id="41d1c8b1" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-66e942b5 elementor-widget elementor-widget-text-editor" data-id="66e942b5" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="bf09" class="">Automated SDK generation is a tricky challenge; on one hand, you want to keep SDKs lean with minimal code and dependencies and on the other hand, you want to allow API providers to customize the generated code according to the needs of their developers such that SDKs can be more than mere language wrappers of an API.</p>
<p id="2a7a" class="">In this post, we will share how our code generation engine works and how we have managed to allow code customizations without letting API providers be bogged down in manual efforts.</p>
<p id="1dcc" class="">APIMatic’s Code Generation Engine follows a number of steps to generate client libraries from API description files. The code generation process starts with an input API description file. This file can be in any of the multiple API description formats we support like OpenAPI, RAML, or API Blueprint, etc.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_536" aria-describedby="caption-attachment-536" style="width: 1024px" class="wp-caption aligncenter"><img class="wp-image-536" src="/wp-content/uploads/2021/12/1_yD9ALr6xQvOo3aD0Rg6GXg-1024x630.jpg" alt="SDK Generation in APIMatic" width="1024" height="630"><figcaption id="caption-attachment-536" class="wp-caption-text">SDK Generation in APIMatic</figcaption></figure>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="fa73" class="">Step 1: Transformation</h2>
<p id="7332" class="">The first step is the conversion or transformation of the input API description file into our own representation format, internally known as Standard Description Language (SDL). This is the same format that is publicly referred to as the APIMatic format. Transformation is only done if the API description is not already in the APIMatic format and you’re generating from the API or importing your API description into our API description editor. The APIMatic format has evolved over time to capture information that is useful for SDK generation but is otherwise missing in API description formats. It also serves as a superset of API description features over other formats.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-537 aligncenter" src="/wp-content/uploads/2021/12/1_ROXRhk6N9lL3dsOH23pdHg.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="31c9">Step 2: Validation (and correction)</h2>
<p id="7553" class="">After an input file is transformed into APIMatic’s format, it is then validated. Validation is quite a thorough process comprising of a large number of sub-steps. It starts with the validation of basic API settings, server configurations, and code generation settings. Authentication settings are validated after that, followed by validation of models, errors, and endpoints.</p>
<p id="72c7" class="">Our API validator aids the user by automatically rectifying small issues like duplicate property names and throws warnings to reflect any changes made. Bigger issues (for example, invalid test case input) result in errors which the user needs to fix in their API description.</p>
<h2 id="0ee5" class="">Step 3: SDK Generation</h2>
<p id="9114" class="">Following the validation and correction of an API description is the code generation step. Different parts of the API description are looped over and code representations are generated. Some important entity conversions from an API description to an SDK are:</p>
<ul class="">
<li>Settings -&gt; Configuration files</li>
<li>Endpoints -&gt; Functions</li>
<li>Groups -&gt; Controller class files</li>
<li>Models -&gt; Model class files</li>
<li>Errors -&gt; Exception class files</li>
</ul>
<p id="63bc" class="">Along with these core files, an HTTP abstraction layer is generated to wrap the HTTP client is used by the SDK so as to facilitate the user in case he decides to use a different client. One or more helper class files are generated which abstract out a lot of the common code from the SDK and a client library interface is provided to wrap the SDK and make it easier to use. Some language or platform-dependent files are generated as well, for example, gemspec, Gemfile, and Rakefile are generated for Ruby SDKs. These files specify SDK dependencies, test commands and other information required to publish the SDK on hosting services like <a href="https://rubygems.org/">RubyGems</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-538 aligncenter" src="/wp-content/uploads/2021/12/1_XJabqxinV89cO0mc5zJZkg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="0e86">Step 4: Documentation Generation</h2>
<p id="0a15" class="">Every generated SDK includes a README.md file. Depending on the user’s pricing plan, this README file might contain a very basic getting started guide or it may contain detailed and comprehensive documentation for the entire SDK. In the latter case, dynamic screenshots specific to the user’s API are generated and uploaded to our servers. These screenshots walk a developer through getting started with the SDK and are linked in the markdown README file. The README also contains a complete class reference and code samples for the SDK and creates a delightful developer experience when rendered.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-539 aligncenter" src="/wp-content/uploads/2021/12/1_S9XduLf-793bPeaPHp4ruQ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="ebbe">Step 5: Packaging</h2>
<p id="237f" class="">After all the SDK files have been generated, there are multiple packaging options available to APIMatic users. You can either get the SDK packaged in a zip file or have it deployed to Github.</p>
<p id="8f70" class="">The output of the process may be a zipped SDK available for download, a new branch on the user’s Github repository or, our latest offering, a complete&nbsp;<a href="https://www.apimatic.io/developer-experience-portal/">Developerless API Portal</a>.</p>
<h2 id="b3b6" class="">SDKs, not mere wrappers</h2>
<p id="4013" class="">The SDKs generated by our code generation engine come with utility classes, authentication helpers, and configuration files to aid usage. They provide strict language bindings so developers never have to deal with HTTP or JSON, but instead communicate with the API using language objects and functions. They are also built around &nbsp;SOLID&nbsp;&nbsp;software design principles to allow easy extension in functionality.</p>
<p id="c817" class="">We allow API providers to customize code generation using simple code generation settings. From generic code styling settings like class naming to advance code customization settings like asynchronous or synchronous code generation and advanced documentation generation; we have a lot to offer.</p>
<h2 id="107e">Is automatic SDK generation for you?</h2>
<p id="19b8" class="">SDKs help API providers increase API adoption by enabling developers from different platforms or languages to get started with their API quickly. With instant SDK generation times and cheap costs, code generation engines might be the obvious way to go if you need SDKs for your APIs.</p>
<p id="eb3a" class="">In spite of all the benefits of generating SDKs using a code generation engine, there are certain scenarios where it might be wiser to write SDKs manually. One example is when you are planning to put some specific business logic like complex cryptographic logic&nbsp;in your SDKs to simplify API design or to exploit client-side processing to maximize API scalability. We counter this to some extent by providing HTTP abstraction and&nbsp;<em>before&nbsp;</em>and&nbsp;<em>after&nbsp;</em>request hooks in SDK code to allow wrappers to be written over generated code. Still, it is up to the API provider to decide if that is enough for their specific use case.</p>
<p id="f803" class="">It is important to delineate your requirements before deciding how you will provide SDKs to developers using your API. Our team is always available for discussion; don’t hesitate <a href="mailto:sales@apimatic.io">getting in touch</a> if you’re still unsure about code generation being the right fit for you.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/behind-the-scenes-of-sdk-generation/">Behind the Scenes of SDK Generation</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/behind-the-scenes-of-sdk-generation/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
