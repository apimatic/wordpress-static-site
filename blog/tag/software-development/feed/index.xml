
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Software Development Archives - APIMatic</title>
	<atom:link href="/blog/tag/software-development/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Tue, 21 Dec 2021 06:52:41 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.4</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>Software Development Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>The Anatomy of API Code Samples</title>
		<link>/blog/the-anatomy-of-api-code-samples/</link>
					<comments>/blog/the-anatomy-of-api-code-samples/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 08 Jun 2020 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Code Samples]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Code Sample]]></category>
		<category><![CDATA[Sdk]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=359</guid>

					<description><![CDATA[<p>Hence it comes as no surprise why code samples make an important part of the developer experience checklist list for several APIs programs, including the likes of Amazon, Facebook, Twilio, and Stripe. All of them have code samples included one way or the other and have found massive success. And for a very good reason. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/the-anatomy-of-api-code-samples/">The Anatomy of API Code Samples</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="359" class="elementor elementor-359" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-2c773500 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="2c773500" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-41f291e6" data-id="41f291e6" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-7abbf594 elementor-widget elementor-widget-text-editor" data-id="7abbf594" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.5.6 - 28-02-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<!-- wp:image -->
<figure class="wp-block-image size-large"></figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9c8b" class="">While APIs form an important part of modern software development, it’s crucial to ensure that the utility offered by an API does not come at the cost of hindered productivity. Often it takes developers multiple hours to get familiar with an API before they can start building and integrating with it, however, a great developer experience can ensure developers get started with the least of steps and minimal time. In this blog, we will discuss how code samples help contribute towards an outstanding developer experience. We will discuss in detail what makes good samples, the different styles of samples, and how samples gel in with documentation and other elements to form a formidable developer experience.</p>
<h2 id="74b0" class="">Part I: Code Samples — Why Should We Care?</h2>
<p id="6565" class="">Learning new technologies is a complex task, even for the savviest of developers. Often it requires them to go through in-depth documentation, guides, and tutorials, something which they are very keen to skip on. What code samples do instead, is provide them with a task-based learning activity, which requires concrete action.</p>
<blockquote class="wp-block-quote">
<p>Developers love learning by experience.</p>
</blockquote>
<p id="60f5" class="">Developers are hands-on learners and code is another language they speak. When they see code, they want to try it, break it apart, put it into action. It’s their favorite call-to-action, often when figuring out if an API is the right fit for them, developers would have already tested out the code samples on developer portals to make their choice.</p>
<p id="d54b" class="">This was proved by a&nbsp;<a href="https://eventil.com/talks/PPSznP-jarod-reyes-how-twilio-writes-documentation">user study</a>&nbsp;conducted by Twilio, where they found that pages with lesser words before code, did better than pages with more sentences before code.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_dlX9uwiw3sdqOg9VFMaDKg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="a6b5">Hence it comes as no surprise why code samples make an important part of the developer experience checklist list for several APIs programs, including the likes of Amazon, Facebook, Twilio, and Stripe. All of them have code samples included one way or the other and have found massive success. And for a very good reason.</p>
<h3 id="c41c">API Calls are Complex Structures</h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_th9O3N-5hKaf_z2EAFepQQ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="0a22">Before we further talk about code samples, it’s important to understand the need for them in the first place. Why can’t developers do without them?</p>
<p id="3347">And it all starts with putting an API call together. A lot goes into an API call, all these protocols, and conventions, and developers get all caught up in it, instead of focusing on their actual projects. It can take developers multiple hours to figure out what to put into a call, taking a toll on their productivity and creativity and all adding up to integration time.</p>
<p id="e3da" class="">What code samples do is put there calls together for them, in languages of their choice, so they don’t have to do it. Nicely done samples can get developers to&nbsp;<strong>the first Hello World</strong>&nbsp;with an API without writing a single line of code. Samples that go beyond that can be put straight into production. Which now leads to our next question.</p>
<h3 id="0d90">How many code samples can you write?</h3>
<p id="cae9">Not enough! Especially if you are looking for coverage of every endpoint. APIs tend to change and evolve and to update the samples manually with every iteration, even you somehow managed to produce them is not feasible.</p>
<p id="226a" class="">A viable approach here is to auto-generate these samples using an out of the box documentation solution. Different tools have different ideas on how to package deliver these samples. While some do the bare minimum, others go the extra mile to see developers have to put in as little work to get them running. It’s important for API owners to select the right tool to provide the best samples to their consumers, it should be a top priority choosing a documentation solution.</p>
<h2 id="db1d">Part II : Code Samples — Several Different Styles</h2>
<p id="3b6d" class="">To help API owners make well-informed choices, we ran a study to compare this different style of samples, which we analyzed keeping in mind the following qualities:</p>
<ul class="">
<li><strong>Learning Objective</strong>&nbsp;— They demonstrate actual (non-theoretical) use of API</li>
<li><strong>Runnable</strong>&nbsp;— Are runnable out of the box on a console and IDEs</li>
<li><strong>Interactive</strong>&nbsp;— Come with a playground to tweak them around</li>
<li><strong>Language Idiomatic —&nbsp;</strong>Proper language Structure to gel in with production-ready applications</li>
</ul>
<p id="d76f" class="">We categorized our learning into 5 different styles, the summary of which is categorized in the table below:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_ciLtfA5TKB_gpe_Io6eBGg@2x.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="178f"><strong>Style 1: Static, Non- Runnable HTTP Snippets</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="alignnone" src="/wp-content/uploads/2021/12/1_utlmN5MUbvMqVh3hRBnOTw.png" alt="The Anatomy of API Code Samples" width="700" height="294"></p>
<figcaption>Code Sample on Postman</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>The first style is made of static samples, which are not runnable out of the box and required some tweaking done on them. The samples while easily navigable alongside the reference docs, come with no code playground and cannot be tried or tested on the portal.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_wNmdSk-xDCaLpftrbDJG8A.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="13bd" class="">We call the samples,&nbsp;<strong>HTTP snippets</strong>, because they essentially look like an HTTP call, without any proper language structure around them. Samples for some languages were copy-paste ready, while others took a bit of tweaking to run. In the case of Java, we had to configure maven dependencies for the build, and the generator could not pick some values such as the example body and the auth header, which have to be manually added.</p>
<p id="580c" class="">These samples were built upon the&nbsp;<a href="http://www.mashape.com/">Mashape</a>&nbsp;<code>httpsnippet</code> library, which has been made open source by Kong to be included within your documentation products. This specific sample was generated on the Postman platform. While there was no on-portal console, on the Postman app you can run a call using Postman collections.</p>
<h3 id="fc1d"><strong>Style 2: Dynamic, Non- Runnable HTTP Snippets</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_6UNsCWYCQM1Anwrbz6lLMQ.png" alt=""></p>
<figcaption>Code Sample on Stoplight.io</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">The second style of samples made of dynamic HTTP snippets. While the sample came along with a console, they were incomplete and had to be tweaked to be made runnable on the console and IDEs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-385 aligncenter" src="/wp-content/uploads/2021/12/1_WMUhQmNcXNDGLrkPLEfkYg.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="ec4f">After a few simple fixes, including the missing headers and entering a body, we got the samples running.</p>
<p id="1b16">The console, while getting the job done, made it a difficult task to add in these fields, offering no help on what goes inside the call. For somebody completely unaware of the API and starting new, making use of the console could prove to be a challenge.</p>
<p id="6bfc" class="">These samples, too, were built on the Mashape’s HTTP Snippet library and resembled barebone curl command lacking language structure.</p>
<p id="85db" class="">Samples in this style are available in Shell, Javascript, Node, C, Java, PHP, Objective-C, Swift, Python, Ruby, C#, GO and OCaml, covering pretty much all major platforms. We found this style on&nbsp;Stoplight.io.</p>
<h3 id="5646"><strong>Style 3: Dynamic, Runnable HTTP Snippets</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_4e7PmSXiQ1aKqaXKMbLluw.png" alt=""></p>
<figcaption>Code Sample on Readme.io</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="319f">The third style of samples made of dynamic snippets that were runnable out of the box. We had to add nothing to the samples to make them work, they came with all the required constructs.</p>
<p id="bed3">The samples come with an intuitive playground which lets you know what kind of field goes where with what data types. This makes it very easy to construct a sample.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_FcRjxPahKOa71Z_fbu5vSw.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9218">Although the samples did a good job explaining what goes in and out of an API call, they were still not idiomatic and required work to be done on them. For instance, there is no body-serialization going on, all these different fields that have to go as arguments, go as one single string and there is no mechanism to put those values together in the form of one single string. These samples were found on Readme.io.</p>
<p id="7964" class="">What we also found missing in all three of these styles was lack of getting started guides, for instance, the HTTP client requires to be included as a dependency and then included as imports within the sample, something which has been left to the discretion of the user to figure out. For novice developers, setting up development environments may also prove to be a challenge, something which the samples or the documentation does not help with at all.</p>
<h3 id="384d"><strong>Style 4: Dynamic, Runnable HTTP snippets, with Proper Guides</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_Nys41hEwySBdPhLYQxYJGw-1.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>The fourth style of samples, while also dynamic and runnable, came with an extra advantage. We found configuration instructions for them, which made it easier to work with them.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_0cK-QcLXleJ_VoBfOeTkXg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">The sample can be tried and tested on the in-product interactive console. Although the console was not as intuitive as the one found in Style 3, particularly making it tough to add arguments, you have to make sure to not mess up a single space of bracket when making up the JSON string, or the request won’t go.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_oelI4U_0KTc12oayvGuZHQ.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="d3c5">Style 5: Dynamic, Runnable &amp; Language Idiomatic snippets</h3>
<p id="86cf">These samples are different than the ones we saw above, you see no specifics of making an API call here, no URLs passed or methods declared or headers going in. Instead, you see some object-oriented code here, using proper crud mechanisms.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_DspO9rFjpbnhtLZjxYFZ0Q.png" alt=""></p>
<figcaption>Code Sample generated on APIMatic.io</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8cb9" class="">This is because these samples were generated alongside an SDK, an SDK abstracts out all the details about making an API call and generates additional language structure around these samples, so developers have to write as little communication code as possible. This includes body serialization and response deserializations, which makes it very easy to work with data points.</p>
<p id="266d" class="">The samples can be tried and tested out and tweaked using an interactive explorer, which comes with intuitive, form-based ways to input. The console validates every field, so no incorrect data goes in and helps you construct samples without touching code at all. With the console you can construct API calls with your sample arguments and authentication keys, and copy-paste the resulting samples in your production-ready applications.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_wcQclzK732E-djl-Ws-SlQ.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="279e">And all of that comes with proper documentation, the platform gives API providers the facility to document every parameter in each of the endpoints and data models. Providers can also auto-generate &#8220;getting started guides&#8221; for different IDEs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_bvvGJZTDaI0E2-k57HCWHg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="has-text-align-center" style="text-align: left;">Once set, the developers navigate to their desired use case, copy-paste the code, and start working on the business logic — letting the SDK and the sample take care of logistics.</p>
<h2 id="21f7">Part III: Making Code Samples Work in Production</h2>
<p id="77cf" class="">Looking at the different styles of samples, the question that now arises is how practical are these samples to use? Do they completely replace the need to code, or are they just a push towards the right direction? Do they fully demonstrate the use case for the endpoint? Or do they just explain the logistics of making an API call?</p>
<h3 id="d87e">Language Coded HTTP Snippets or More?</h3>
<p id="6704">If you closely look at many of the auto-generated samples, especially the styles 1 to 4, what they essentially do is eliminate the redundant work of configuring environments, and help consumers figure out what kind of syntax to use. However, when making real-world use of API, you need a lot more. Do these samples, which essentially lack language structure and look like language translated HTTP requests, cut it? The answer is<strong>&nbsp;NO&nbsp;</strong>and for the following reasons:</p>
<ul class="">
<li><strong>No Data Types:</strong>&nbsp;The samples takes input and output in the form of a string, leaving it to the consuming developers to write an efficient i/o mechanism to complete these requests. Often the fields inside the body are not documented.</li>
<li><strong>No Data Models:</strong>&nbsp;Modelling the JSON/XML as classes make it easier to deal with the data, both input, and output. These “models” add a whole different layer on top of the API, with your application having to interact with the model, instead of queried response in JSON or XML.</li>
<li><strong>No Validation and Error Handling:</strong>&nbsp;Since there is no proper I/O mechanism, and both inputs are taken and output returns in form of JSON strings, it’s impossible to validate the sent data and handle error cases to determine what went wrong with the request.</li>
</ul>
<p id="d900">To further demonstrate our point, we will write a&nbsp;<strong>Sample App&nbsp;</strong>to make a new&nbsp;<strong>pet&nbsp;</strong>entry to a store. The app will utilize Code Samples generated by&nbsp;<strong>Postman&nbsp;</strong>for the endpoint<strong>&nbsp;Add Pet.</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_utlmN5MUbvMqVh3hRBnOTw-1.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e759" class="">Copy-pasting the code straight away did not work. To configure the HTTP client, we had to include the maven dependency to the build. Following which we found the authentication header missing. We passed in the credentials:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><strong><code>.addHeader(&quot;api_key&quot;, &quot;special-key&quot;)</code></strong></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b89b" class="">And then had to build a JSON String to pass in the input, since the argument body is passed as a String. Constructing an argument body of the two required fields, this is how the sample looked like:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>package TestApp.Testapp123;
import java.io.*;
import okhttp3.*;

 class main {
  public static void main(String []args) throws IOException{
     
	 OkHttpClient client = new OkHttpClient().newBuilder()
	 .build();
	  MediaType mediaType = MediaType.parse(&quot;application/json&quot;);
	  RequestBody body = RequestBody.create(mediaType, &quot;{\&quot;name\&quot;:\&quot;doggie\&quot;,\&quot;photoUrls\&quot;:[\&quot;photoUrls1\&quot;]}&quot;);
	  Request request = new Request.Builder()
	 .url(&quot;https://petstore.swagger.io/v2/pet&quot;)
	 .method(&quot;POST&quot;, body)
	 .addHeader(&quot;Accept&quot;, &quot;application/json, application/xml&quot;)
	 .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)
	 .addHeader(&quot;api_key&quot;, &quot;special-key&quot;)
	 .build();	  
	  Response response = client.newCall(request).execute();
	  System.out.println(response.body().string()); 	
	    }
	  }</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">We ran the code after this tweaking, and it worked like a charm. So how do this sample further translates to real-world usage? If we were to take inputs for the Pet entry from a user, how do we send that as arguments? And before that how do we ensure the data taken from the user is the of the correct type? To tackle that we wrote a model class for the Pet Object, with all the underlying attributes including getters and setters.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>package TestApp.SimpleConsoleAppFix;

import java.util.List;

import io.swagger.petstore.models.Category;
import io.swagger.petstore.models.StatusEnum;
import io.swagger.petstore.models.Tag;

public class PetModel {
	
	    public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public Category getCategory() {
		return category;
	}
	public void setCategory(Category category) {
		this.category = category;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public List&lt;String&gt; getPhotoUrls() {
		return photoUrls;
	}
	public void setPhotoUrls(List&lt;String&gt; photoUrls) {
		this.photoUrls = photoUrls;
	}
	public List&lt;Tag&gt; getTags() {
		return tags;
	}
	public void setTags(List&lt;Tag&gt; tags) {
		this.tags = tags;
	}
	public StatusEnum getStatus() {
		return status;
	}
	public void setStatus(StatusEnum status) {
		this.status = status;
	}
	    Long id;
	    Category category;
	    String name;
	    List&lt;String&gt; photoUrls;
	    List&lt;Tag&gt; tags;
	    StatusEnum status;

}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e551" class="">Following which we wrote the code to take in input values for these attributes. Now that we ensured we took in these values, with their correct data types, how do we pass these in the request, since the request passes the arguments in the form of a string. Manually doing this was, of course, unfeasible and out of the question, so we had to write in an object to string mapper to do the job for us. This took in these various attribute fields and put them together in the form of a JSON string.</p>
<p id="b586" class="">It was at this point that we were able to achieve a business use case out of the sample. We could pass in the input parameters, with their correct types, concatenated as a JSON string and passed along with the argument. The model allowed us to keep local records of the sent values as well.https://blog.devapi.dream.press/media/a6a1ace16d322eaaf541f83acf4905f9</p>
<p id="4294" class="">Working with multiple endpoints and multiple models would have taken us even more time, depending on the use case and business logic. For instance, for the GET endpoints, we would have to write a string to object mapper to parse values from the response string back to our model. While the sample does a great job pushing developers in the right direction, it is clear that it is not a plug and play situation. Developers have to put in a lot of code to get the calls running, and have to figure out on their own what goes before or comes after the API call.</p>
<p><em>Now imagine if there were samples that could take care of all these logistics, you had to write no communication code at all, and could just plug and play a sample into action. The good news is, you no longer have to imagine. The language idiomatic samples generated alongside an SDK already do that for you.</em></p>
<h2 id="21e8">Language Idiomatic Code Samples — The Way To Go</h2>
<p id="b15b">SDKs have often been labeled as the cornerstone of the API developer experience. What SDKs essentially do is that they abstract out all underlying details of making an API call, making your API look like a library. They provide developers a complete framework to model their applications, including all the necessary dependencies, referenced libraries, system libraries, i/o mechanisms, and class models.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_ncYb-AnKZ5JZxOytMwp1PA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="4ce3" class="">Furthermore SDKs automatically format API responses to match the data types used in the programming language. They add an interface on top of the API, so your app interacts with the modeled data from SDK, instead of raw API arguments and responses. By providing SDKs, you can help developers focus on the business logic while taking care of API communication code.</p>
<p id="933e">Code samples generated with SDKs have a lot more work done on them. Since the SDK abstracts out request construction, none of the construction bit makes part of the sample, making the sample look very lean. Such samples can easily fit in with your applications in a very scalable manner, you only have to add minimal communication code, since there exist mechanisms to access, manipulate and work around with all the data fields, that go in and come out of an API call.</p>
<h2 class="has-text-align-center">. . .</h2>
<p id="308d" class="">Concluding this all, we strongly recommend that developers make use of code samples to consume APIs. No matter what style, design, or approach. Code samples will help you get started easily and save you tons of time. While for most people, the simple HTTP snippets may do the job, it is samples with more language structure that help with real-world use and can fit in straight with your applications.</p>
<p id="8467" class="">Again we emphasize the fact that the developer experience is a key driver for an API adoption. APIs are meant to execute integrations, and the easier to integrate, the better the API. Luckily for you, we at APIMatic hold all sorts of expertise to help improve the experience you deliver to developers. Reach out to us today at&nbsp;<a href="https://apimatic.io/contact">https://apimatic.io/contact</a>&nbsp;and let’s discuss what can be done to enhance your offerings today.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/the-anatomy-of-api-code-samples/">The Anatomy of API Code Samples</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/the-anatomy-of-api-code-samples/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>State of Developer Experience: SMS APIs 2020</title>
		<link>/blog/state-of-developer-experience-sms-apis-2020/</link>
					<comments>/blog/state-of-developer-experience-sms-apis-2020/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 02 Dec 2019 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Communication APIs]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Sms]]></category>
		<category><![CDATA[Sms Marketing]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=436</guid>

					<description><![CDATA[<p>Every day, 23 billion SMS messages are sent worldwide, which is equivalent to 16 million messages per minute, exchanged between 7 billion mobile subscribers across the world — (CTIA) The SMS industry is huge, and the bulk SMS industry huger. Wide adoption and availability of the technology has made it the number one choice of [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/state-of-developer-experience-sms-apis-2020/">State of Developer Experience: SMS APIs 2020</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="436" class="elementor elementor-436" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-21c95151 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="21c95151" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-33c470a0" data-id="33c470a0" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-188ddceb elementor-widget elementor-widget-text-editor" data-id="188ddceb" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-437 aligncenter" src="/wp-content/uploads/2021/12/1_9S0vdIiVL9SvUXrR4vLH8w-1024x512.jpg" alt="State of Developer Experience: SMS APIs 2020" width="1024" height="512"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<blockquote class="">
<p id="16fa" class="">Every day, 23 billion SMS messages are sent worldwide, which is equivalent to 16 million messages per minute, exchanged between 7 billion mobile subscribers across the world — (CTIA)</p>
</blockquote>
<p id="4cab" class="">The SMS industry is huge, and the bulk SMS industry huger. Wide adoption and availability of the technology has made it the number one choice of communication for businesses, who can now reach out to millions of people across the globe with the minimum of effort. Businesses today are making use of SMS messages to send alerts of all kinds, and for a very good reason.</p>
<blockquote class="">
<p id="d3ad" class="">SMS messages are more likely to be opened than Emails, a typical message is read within 3 minutes with a CTR of 19% versus 2% for email.</p>
</blockquote>
<p id="b46e" class="">A lot of that is being done over (A2P), Application-to-Person, where an application is programmed to trigger messages at particular intervals or events. There are a number of tools available to run these campaigns, but none as customizable and powerful as SMS APIs which give direct control to businesses to build messaging facilities straight into their systems.</p>
<p id="9dc1" class="">As of now, they are more than&nbsp;<strong>750 Messaging APIs</strong>&nbsp;currently listed on Programmable Web, with more and more services being listed daily. Using SMS APIs, companies can send complex 2-Way SMS messages, marketing messages, verification messages, notifications, alerts and warnings of all kinds.</p>
<p id="0f97" class="">To see what makes some of these APIs so popular, we shortlisted a pool of them, analyzed what they had to offer, and what really makes them so popular in this age and time. The APIs that we analyzed include:</p>
<ul class="">
<li>Twilio</li>
<li>Nexmo</li>
<li>Plivo</li>
<li>Telstra</li>
<li>AT&amp;T</li>
<li>Bandwidth</li>
<li>ClickSend</li>
<li>MessageMedia</li>
</ul>
<p id="db07" class="">For the analysis, we started off by looking at the features these APIs have to offer, followed by the compliances they meet, and then their Developer Experience programs. By the end of the blog, you would know what does it take to stand out in the industry and compete with the giants we know today.</p>
<h2 id="9de9"><strong>Essential Features — SMS APIs 2019</strong></h2>
<p id="53af" class="">Analyzing these APIs in terms of the functionality they provide, we recognized that there are a set of features that are common to most of them. These features are the bare essentials if you want to make it in the SMS APIs space. They include:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-438 aligncenter" src="/wp-content/uploads/2021/12/1_OVg9CFI3FVS4MJiJUYoohA.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8d87" class="">Many of the APIs included in this study go beyond that and have added more value, building on these features. For instance Twilio allows sending of MMS messages, allowing senders to attached pictures or other forms of media. Furthermore, they have a mechanism to recognize the optimum routes to send out messages, ensuring guaranteed delivery in record time. Nexmo features a persistent sending ID, using the same number to send messages to one person. Plivo features number pooling, to distribute campaign loads and ensure quicker delivery.</p>
<h2 id="3099"><strong>Compliance Requirements — SMS APIs 2019</strong></h2>
<p id="8c9e" class="">For the telecommunication industry, one of the biggest challenges faced is being compliant with local and international regulations. Often continents, countries, states and even specific carrier networks, have a set of rules they abide with, and unless an SMS API caters to these rules, messages may never be delivered as intended and campaigns may go in vain.</p>
<p id="6064" class="">For most top SMS APIs, all these regulations are met and precautions are implemented, some important regulations and guides include:</p>
<ul class="">
<li><a href="https://www.fdic.gov/regulations/compliance/manual/8/viii-5.1.pdf">The TCPA (<em>Telephone Consumer Protection Act)</em></a></li>
<li><a href="https://api.ctia.org/wp-content/uploads/2019/07/190719-CTIA-Messaging-Principles-and-Best-Practices-FINAL.pdf">CTIA Messaging Principles and Best Practices</a></li>
<li><a href="https://docs.wixstatic.com/ugd/9456a5_72a6056a11f5401c95d29181e850625b.pdf">CTIA Short Code Monitoring Handbook</a></li>
</ul>
<p id="9a39">Some common practices to be globally compliant by most regulations include:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-439 aligncenter" src="/wp-content/uploads/2021/12/1_X_kTbzcew9iAPJo5qvqq4A.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="57e4" class=""><strong>What Really Makes Great SMS APIs?</strong></h2>
<p id="6b08" class="">So by now, if you are trying to rate one SMS API over the other, you probably would run into too many of them offering the same set of features, with different implementations, all offering them one way or the other, leaving you guessing that which of them is really worth it?</p>
<p id="ecc8" class="">And for that, we take you to the question,&nbsp;<strong>what makes a great API?</strong></p>
<p id="5e94" class="">And the unanimous answer to that is great&nbsp;<strong>Developer Experience.</strong>&nbsp;All the best APIs are easy to consume and require shorter development time to integrate. At the end of the day, each API is supposed to facilitate interoperability, and the easier is it to integrate, the better the API.</p>
<p id="a149" class="">To see how these SMS APIs stood out, we analyzed their publicly available Docs and Developer Portals and came up with the matrix below, which summarizes our findings.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-440 aligncenter" src="/wp-content/uploads/2021/12/1_q_AESiXsFaY4P0uKPSMWHg-1024x640.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="4f3d">Where each of these API providers fills in quite a number of checks on the Developer Experience Checklist, each of them stood out in some respective fields.</p>
<p id="481b" class="">Twilio, Nexmo and ClickSend do a wonderful job with their Landing Pages, which do a great job onboarding users with what facilities they offer, what features does the API come with and how can they help them solve problems with tons of uses cases, tutorials, and Sample Apps. Almost all API Providers have made use of visuals and diagrams to explain the inner workings of an API.</p>
<p id="ef3a" class="">Bandwidth offers a Sandbox environment where users could play around with the API, similarly, MessageMedia offers an API console where Code Samples can be tried around with. Telstra has a run in postman button, where you can try out sample calls, the click of a button takes you to the postman tool.</p>
<p id="ec68">Both Twilio and Nexmo offer a dedicated API Service Status page, with intuitive layout structures that help consumers get to their desired bit of information faster.</p>
<p id="d7b9" class="">SDKs and Code Samples are also something that all these popular APIs have to offer, popular languages being: Ruby, PHP, Python, JavaScript, C# and Node.</p>
<h2 id="1752" class=""><strong>Great Developer Experience: A Challenge</strong></h2>
<p id="d64f" class="">If you are out at this making an SMS API, it’s essential that you miss out on none of these offerings, or you will stand no chance against the competition. Often smaller teams come up with brilliant technology but lack the numbers to focus on anything else except the core offering. It is just as essential to focus on material revolving around the API, the marketing pages, documentation, client libraries and much more, all of which take a lot of time, effort and energy, but without none of which your API will see success or adoption.</p>
<p id="54e5" class="">While companies like Twilio, Nexmo, and AT&amp;T can afford to heavily invest in programs like that, for startups and smaller companies it becomes impossible to spare time or money. With the cost and time it takes to produce all of this material, it’s not scalable with evolution, often Docs and SDKs lag far behind when APIs are multiple versions ahead, and this is the reason.</p>
<p id="4f0d" class="">So the challenge here is how do you take your brilliant API out to developers when you don’t have the means to keep it developer-friendly for long?</p>
<p id="050f" class="">And the answer lies in automation, while a human developer may take several days to produce and maintain all of these components, Code-Gen Engines can take an API Spec as input to automatically generate all of these components and all of it within a few minutes. Want to make updates to your API? Don’t worry, build the engine into your CI/CD pipeline and generate new components with every new push, release or update.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-441 aligncenter" src="/wp-content/uploads/2021/12/0_UFKse1UtCEOQwgJr.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="691f" class="">All you now have to do is, add more and more features to your API, make it compliant to the point you can rollover your competition, while a Code-Gen Engine takes care of the material you need to put it out in front of Developers.</p>
<p id="7373" class="">Need to talk more about automating Developer Experience?&nbsp;<a href="https://www.apimatic.io/contact">Speak to us</a>&nbsp;today and we’ll help you get started.</p>
<p class="">Thanks to&nbsp;Adam DuVander.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/state-of-developer-experience-sms-apis-2020/">State of Developer Experience: SMS APIs 2020</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/state-of-developer-experience-sms-apis-2020/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>State of Developer Experience: Banking and FinTech 2019</title>
		<link>/blog/state-of-developer-experience-banking-and-fintech-2019/</link>
					<comments>/blog/state-of-developer-experience-banking-and-fintech-2019/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Tue, 09 Jul 2019 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[FinTech APIs]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Banking]]></category>
		<category><![CDATA[Fintech]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=660</guid>

					<description><![CDATA[<p>The Banking and Finance industry is one of the most heavily regulated sectors of the world. The regulations, although important to protect the integrity of the system and customer interest, come at the cost of hindered advancement and such had been the case for the industry. This was until the rise of FinTech companies, who [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/state-of-developer-experience-banking-and-fintech-2019/">State of Developer Experience: Banking and FinTech 2019</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="660" class="elementor elementor-660" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-34f857ff elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="34f857ff" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-4aea8260" data-id="4aea8260" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4a141574 elementor-widget elementor-widget-text-editor" data-id="4a141574" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-661 aligncenter" src="/wp-content/uploads/2021/12/1_AwRHHaXNeo1O2pu7hQz8ag-1024x512.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="d6ac" class="">The Banking and Finance industry is one of the most heavily regulated sectors of the world. The regulations, although important to protect the integrity of the system and customer interest, come at the cost of hindered advancement and such had been the case for the industry.</p>
<p id="db59" class="">This was until the rise of FinTech companies, who leveraged APIs as gateways to expose traditional financial services so that third-party developers could build custom solutions on top of them. There’s a lot you can achieve with FinTech APIs, without having to go through the labor of manually implementing any functionality.</p>
<blockquote class="wp-block-quote">
<p>A simple query on&nbsp;<a href="https://www.programmableweb.com/search/financial"> ProgrammableWeb</a>shows there are&nbsp;<em>1956</em>&nbsp;APIs listed under the tag of Financial APIs, with around&nbsp;<em>290</em>&nbsp;listed this very year.</p>
</blockquote>
<p id="e432" class="">FinTech APIs are putting immense pressure on Traditional Banking and Financial Organisations, who are actively trying to catch up. Customers today expect advanced, frictionless experiences and banks with traditional business models are failing to provide them.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-662 aligncenter" src="/wp-content/uploads/2021/12/1_o6g31nFwrWSkx9twG7rzOw.jpg" alt=""></p>
<figcaption>A stat from EY’s FinTech Adoption Index shows that globally, 64% of “Digitally active consumers” are using FinTech applications in favor of traditional banking ones.</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="d65f" class="">When <a href="https://assets.ey.com/content/dam/ey-sites/ey-com/en_gl/topics/banking-and-capital-markets/ey-global-fintech-adoption-index.pdf">Ernst and Young&nbsp; </a>conducted their first study on FinTech adoption in 2015, they found adoption rates for FinTech as low as 10% amongst the consumers they surveyed. The number rose to 33% in 2017 and now stands at 64%. More and more individuals especially millennials, are shying away from traditional banking and instead are inclined more towards digital solutions put out by these FinTech companies.</p>
<p id="4c55" class="">It’s clearly time for banks to explore newer business models and to expose data and functionality in a similar fashion, acting as the infrastructure or platform on which financial services of the future are built. Else tech giants or startups in the space will ultimately wipe them over.</p>
<h2 id="d558" class="">Open Banking and Europe’s PSD2</h2>
<p id="9911" class="">In 2015 the European Parliament adopted new legislation, Payment Services Directive 2 better known as <a href="https://www.ecb.europa.eu/paym/intro/mip-online/2018/html/1803_revisedpsd.en.html">PSD2</a>, to streamline the digitalisation of banks and financial services. The directive obligates banks across Europe to make banking data and services available to third-party developers, so they can build value-added services on top of them.</p>
<p id="dca9">The concept of Open Banking, on the other hand, has been around for much longer and it suggests that banks provide access to user data via Open APIs, so that they can partner with external entities to improve customer experience.</p>
<p id="0b6b" class="">The Open Banking Initiative is powering PSD2 today, for which deadlines are running out and banks are putting out APIs on a daily basis. The directive has provided Banks with an excellent opportunity to make their mark, tight deadlines have forced banks to work faster on API preparation, resulting in 529 Banking APIs publicly listed as of today.</p>
<p id="4a24">Banks, because of the initiative, and the legislation are on their way to make a comeback, but is just putting out an API enough?</p>
<h2 id="33c8" class="">Developer Experience Makes APIs Useable</h2>
<p id="5ca8" class="">Developers today have a wide array of choices. A number of Banking and Finance APIs today provide the same utility and services, some implementing them in a different manner, some adopting different technology stacks, but what truly sets these APIs apart is the ease when it comes to consumption.</p>
<p id="07ff" class="">Developers want to get started as soon as possible, spend as little time getting acquainted with the API, and focus more on building creative solutions on top of them. In order for an API to be widely adopted, it must have a great developer experience.</p>
<p id="0ba7" class="">Since Developer Experience is a huge deciding factor when it comes to adopting an API, we sat down and shortlisted 8 popular Banking and Finance APIs and analysed what they have to offer in terms of Developer Experience, and what makes them popular choices amongst developers.</p>
<p id="6fa9" class="">Using the famous Developer Experience checklist as criteria and point of reference, we noticed some common trends and practices, which are objectively summarised in the table below:</p>
<blockquote class="wp-block-quote">
<p>Read in detail what forms the Developer Experience Checklist for APIs: <a href="https://blog.apimatic.io/what-exactly-is-developer-experience-1646b813df14">What exactly is Developer Experience?</a></p>
</blockquote>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-663" src="/wp-content/uploads/2021/12/1_buxsZK1nfOKAtciwSwysOg-1.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="19ca" class="">Quickly skimming through the table you would notice that most of these APIs offer a number of components from the Developer Experience checklist, and hence comes as no surprise why they are doing so well. One area we saw FinTech APIs lead, was with offering API implementations in multiple languages, in the form of SDKs, so developers can instantly start making use of these APIs in languages they are comfortable with.</p>
<p id="91fc" class="">We further ran a detailed analysis to find out how these APIs have gone about with their Developer Experience and what sets them apart from each other and remaining of the competition, which you can go through here:&nbsp;<a href="https://blog.apimatic.io/popular-developer-experience-practices-fintech-and-banking-apis-a5474fe535e4"> Popular Developer Experience Practices: FinTech and Banking APIs.</a></p>
<h3 id="8e19"><strong>PSD2 is an Opportunity for Digital Transformation</strong></h3>
<p id="2287" class="">FinTech APIs have built popularity, cashing on the exemplary experiences they provide, both to developers and customers, and Banking APIs that have followed suit have done well. But this is not the case for every bank out there. PSD2, although very explicitly requires banks to open up data and banking functionalities, it does not specify how banks are supposed to meet these requirements, with many just checking them off with bare minimum implementations.</p>
<p id="8b13" class="">Banks that are looking to just adhere to regulatory requirements and not do more, may miss out on big opportunities to expand and grow new business models, and may not be able to put themselves on the map with FinTech APIs.</p>
<blockquote class="wp-block-quote">
<p>According to a survey, only 59% of Europe’s 442 banks met PSD2’s 14th March deadline, to have a publicly available testing facility or a sandbox environment .</p>
</blockquote>
<p id="a963">Of course, it is easier said than done and many banks are still struggling to prepare their APIs, with most of them slacking behind. In order to fulfill legal requirements, the API experience gets second fiddle. While understandable, it leads to a missed opportunity nonetheless</p>
<p id="adf4" class="">With the final 29th September deadline looming ahead, a number of Banking APIs are going to hit the markets, and only the ones that come with a developer experience will catch all the buzz, leaving the rest trailing on traction.</p>
<h2 id="32b5" class="">Automation is the Key to Scaling Developer Experience</h2>
<p id="0227" class="">So where does this leave API teams today who are still working on their API and have no time or resources to work on the consumption part of it?</p>
<p id="8a9a" class="">And the answer lies in&nbsp;<strong>Automation</strong>.</p>
<p id="833d" class="">With all hands busy on deck working on the core functionality of APIs, there is no reason that resources have to be dedicated to just work on producing the artifacts that make APIs easier to consume. Instead, let the machines do the working for you!</p>
<p id="3749">A lot can be done with an API Specification today. The document, when passed through CodeGen engines, can drive entire Developer Experience(DX) for APIs with automatic generation of DX components. And not just Documentation or Portals, but also complex components like SDKs, Code Samples, API Explorers and can even CI/CD pipelines so none of this has to be updated manually.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_664" aria-describedby="caption-attachment-664" style="width: 800px" class="wp-caption aligncenter"><img class="wp-image-664" src="/wp-content/uploads/2021/12/1_ZE_9hIZFJCH8to2mVeNeig.gif" alt="Generate DX Components with just an API Specification" width="800" height="450"><figcaption id="caption-attachment-664" class="wp-caption-text">Generate DX Components with just an API Specification</figcaption></figure>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="0f4d" class="">Get Started ASAP</h2>
<p id="5df6" class="">Where are you with Developer Experience for your APIs? Pushing for that 29th September Deadline and have no idea where to get started? Don’t worry about it.</p>
<p id="a7bb">Luckily for you, here at APIMatic, this is our specialty. We hold the necessary skills and expertise to help you set up an automated Developer Experience solution, and with our in-house technology, can get you running within weeks!</p>
<p id="f9ff" class="">You can always&nbsp;<a href="https://apimatic.io/contact">reach out to our team</a>&nbsp;to discuss Developer Experience and we’ll help you find an easy way out that fits your need. There’s no reason you have to stay behind and not compete with the top Banking and FinTech APIs of today.&nbsp;<a href="https://apimatic.io/account/register"> Get started&nbsp; </a>as soon as you can!</p>
<p class="">Thanks to&nbsp;Adam DuVander.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/state-of-developer-experience-banking-and-fintech-2019/">State of Developer Experience: Banking and FinTech 2019</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/state-of-developer-experience-banking-and-fintech-2019/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>How to Create SDKs for your API in less than a Minute ⏰</title>
		<link>/blog/how-to-create-sdks-for-your-api-in-less-than-a-minute/</link>
					<comments>/blog/how-to-create-sdks-for-your-api-in-less-than-a-minute/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 26 Nov 2018 11:27:02 +0000</pubDate>
				<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Sdks]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=553</guid>

					<description><![CDATA[<p>Having a quality Developer Experience does not stop at having great API docs. You need to provide client or helper libraries in the form of SDKs (Software Development Kits) to help accelerate the API consumption process. Many API experts and gurus over the years have advocated the importance of shipping out SDKs with APIs, including: [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/how-to-create-sdks-for-your-api-in-less-than-a-minute/">How to Create SDKs for your API in less than a Minute ⏰</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="553" class="elementor elementor-553" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-16a5e6e1 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="16a5e6e1" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-5cc2933e" data-id="5cc2933e" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-1ca8595 elementor-widget elementor-widget-text-editor" data-id="1ca8595" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-554 aligncenter" src="/wp-content/uploads/2021/12/1_NgUaKbvONyap68fNeb11OQ.jpg" alt="How to Create SDKs for your API in less than a Minute using APIMatic" width="800" height="350"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="74c5" class="">Having a quality Developer Experience does not stop at having great API docs. You need to provide client or helper libraries in the form of SDKs (Software Development Kits) to help accelerate the API consumption process. Many API experts and gurus over the years have advocated the importance of shipping out SDKs with APIs, including:</p>
<blockquote class="wp-block-quote">
<p><a href="https://www.linkedin.com/in/kinlane/">Kin Lane</a>the&nbsp;<a href="https://apievangelist.com/">API Evangelist</a>, for whom SDKs form an important part of the&nbsp;<a href="https://apievangelist.com/2018/07/12/my-api-lifecycle-checklist-and-scorecard/"> Developer Experience checklist.</a></p>
<p><a href="https://www.linkedin.com/in/kvantomme/">Kristof Van Tomme </a>who lists SDKs as one of the&nbsp;<a href="https://nordicapis.com/how-bad-developer-portals-kill-apis/">eight important key features</a>&nbsp;of every successful developer portal.</p>
<p><a href="https://www.linkedin.com/in/duvander/">Adam Duvander</a><strong>,&nbsp;</strong>whose&nbsp;<a href="https://everydeveloper.com/developer-experience/">DX Index</a>&nbsp;comprises 13 separate criteria, each weighted according to importance. At top of the list, lies libraries available in popular languages.</p>
</blockquote>
<p id="e648" class="">It is no longer enough to expose your API endpoints with just the HTTP Docs or API references. You need to attract developers with platforms that are native to them, you need to enable them to comfortably play around with your code, and this is what SDKs help with.</p>
<p id="1305" class=""><mark>In simpler terms, SDKs are like a cockpit for your API, they put your consumers into the driving seat and ensure that they feel powerful and in total control!</mark></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-555 aligncenter" src="/wp-content/uploads/2021/12/1_VupZPPjtjhb2QeaWFQr0jQ.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="c145" class="">Many API Providers after accepting the need of giving out SDKs, ponder over what languages should they offer them in? The golden answer for this is as many as you can. Developers today are working with a number of languages and platforms, the diversity when it comes to adoption of new technology is all time high. According to a survey on&nbsp;<a href="https://www.programmableweb.com/news/what-programming-language-most-popular-apis/2013/06/03"> Programmable web</a>, these are the languages programmers are using the most to consume APIs:</p>
<ol class="">
<li>PHP</li>
<li>Python</li>
<li>Ruby</li>
<li>.NET / C#</li>
<li>Java</li>
<li>Perl</li>
<li>ColdFusion</li>
<li>Node.js</li>
<li>ActionScript</li>
</ol>
<p id="aa4d" class="">Some of these languages may be losing popularity, and new languages are being adopted day by day but the fact still remains that APIs are being consumed in multiple languages and you need to cater the need.</p>
<p id="54ab" class="">Which again gives birth to the question:</p>
<h2 id="97f0" class="">How are you going to create SDKs in all these languages?</h2>
<p id="2d24" class="">While it may seem easy, writing client libraries for an API that you wrote yourself, it’s not so simple. It does not only require hours of redundant labour work but also a number of resources, loads of time and a lot of testing, making SDKs more of a chore. Companies who have the $$$ and resources to build in-house SDKs with language experts are at an advantage, leaving the rest dreaming.</p>
<p id="60c0" class="">Maintaining SDKs is a whole different story. Even companies with huge API teams struggle to update their SDKs on time. APIs tend to evolve and version over time and with every new update, the SDKs go obsolete. Reflecting these changes across SDKs in multiple languages in a way that does not break things is tough, time-consuming work.</p>
<p id="8a6b" class=""><mark>Simple maths reveal that around 83% of the total SDK cost comes from keeping it up to date and bug-free after every API update.</mark></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-556 aligncenter" src="/wp-content/uploads/2021/12/1_1cyAbmzqIEDsFn6W2GIf0A.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9cff" class="">Its safe to assume that in order to write a single SDK, a developer who is proficient enough to write idiomatic code is required full time. Assuming the developer takes a week to build and test that SDK on a pay rate of $46/hour (bls.gov), then the cost turns out to be $1,852 for SDK in one language.</p>
<p id="67a2" class="">Cost of maintaining an SDK although depends on many variables like how frequent the API is changed or what’s the size of the library. For the sake of simplicity let’s assume it takes two days a month on average for a developer to maintain an SDK. With same cost assumptions, the burn turns out to be $8,885 for maintaining a single SDK over a year. Summing up both building and maintenance cost gives us a figure of $11,000 per API per SDK per language.</p>
<p id="e055" class="">Multiply this by the number of languages or APIs, we’re looking at sizeable costs, for just manually writing and maintaining SDKs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-557 aligncenter" src="/wp-content/uploads/2021/12/1_Czg0DEbC41Fx0Az2AaEU4g.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="2b93" class="">Not to mention the delays in time-to-market caused by making changes in API(s), reflecting them in Client libraries, checking for breaking changes and finally releasing updated documentation.</p>
<p id="2bec" class="">The SDK dream with all the $$$ and effort involved turns into an SDK nightmare. With many even questioning their worth and value.</p>
<blockquote class="wp-block-quote">
<p><em>“Necessity is the mother of Invention”</em></p>
</blockquote>
<p id="5197">Over years scientists and engineers have worked hard to replace redundant work with automation, that’s how the first wheels, machines and engines were made.</p>
<p id="c8ad">And as soon a need was recognized to automate the laborious process of creating SDKs, birth was given to code generators for APIs.</p>
<h2 id="afce">What are Code Generators?</h2>
<p id="69eb" class="">Code Generators are the engines which enable automatic generation of SDKs. They have now been around for some years but are still a new concept in the API space. The objective is to use your API Specification as a single source of truth to derive fully working functional SDKs out of them in minutes.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-558 aligncenter" src="/wp-content/uploads/2021/12/1_FLECCuyGQLDzoeCoxHdYCA.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="faa4" class="">The APIMatic CodeGen Engine takes in an API Specification in any format (Swagger/OpenAPI, RAML, API Blueprint etc.), and spews out fully functional SDKs, complete with:</p>
<ul class="">
<li>Client Libraries</li>
<li>Dynamic Code Samples</li>
<li>Documentation</li>
<li>Getting Started Guides</li>
</ul>
<p id="b2d9">And all of that in a variety of programming languages!</p>
<p id="7fb8">Unlike every piece of revolutionary technology in history, CodeGen Engines have amassed a number of critics and sceptics, who argue how something so complex can be achieved in minutes like that. Good thing for us, it is science, not magic. And every concept of science has an explanation to it.</p>
<p id="f6bc">Here’s what we do to generate SDKs automatically for you:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-559 aligncenter" src="/wp-content/uploads/2021/12/1_yD9ALr6xQvOo3aD0Rg6GXg-1-1024x630.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:list -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<ol class="">
<li>Take API Description in any popular format</li>
<li>Convert it to our Standard Description Language (SDL) or the APIMatic format</li>
<li>Run a series of validations</li>
<li>Loop different parts of the API description and generate code representations</li>
<li>Convert important entities from an API Description to SDK.</li>
<li>Generate an HTTP abstraction layer to wrap the HTTP client</li>
<li>Generate one or more helper class files to abstract out a lot of the common code from the SDK</li>
<li>Provide a client library interface to wrap the SDK and make it easier to use.</li>
<li>Generate language or platform-dependent files, such as gemspec, Gemfile and Rakefile are generated for Ruby SDKs</li>
<li>Generate Readme files, Getting Started Guides, Code Samples and Documentation</li>
<li>Package everything in zip files ready to be deployed on GitHub or designated repos</li>
</ol>
<p id="0517" class="">Now all of that may sound like a really complicated process, but we believe API Providers should not be worrying about this. APIMatic is here to do the hard work, we are here to produce fully functioning quality SDKs, and to achieve all of this from signup to your first SDK Generation,&nbsp;<strong>take up less than a minute</strong>. Use APIMatic’s CodeGen API to build the engine into your CI/CD pipeline and never worry about updating SDKs ever again!</p>
<p id="59af" class="">Another question that bugs many providers is what if they want their SDKs to follow certain conventions. Luckily they do not have to worry, APIMatic’s CodeGen Engine does not produce generic, one fit all SDKs. With our CodeGen settings, we allow providers to chose what works or does not work for them such as</p>
<ol class="">
<li>Automatic appending of JSON accept and content-type headers</li>
<li>Allowing skipping of SSL Certificate validation</li>
<li>Setting timeouts for endpoint calls</li>
<li>Perform linting</li>
</ol>
<p id="4c14" class="">Furthermore, we can make more customisations to the engine and mould it to the specific requirement of providers as a premium offering.</p>
<p id="94bd">APIMatic’s CodeGen Service is more than just a Code Generator, it’s an entire platform. Where you can</p>
<ol class="">
<li>Maintain, edit and manage different version of API specifications</li>
<li>Publish generated SDKs on Github or package repositories</li>
<li>Host SDKs on completely customisable Developer Portals, complimented with Reference Docs Live and Dynamic Code Samples</li>
</ol>
<p id="5a60" class="">Not sure how you can build in the API Code Engine to your pipeline? Reach out to us today to book a Demo!</p>
</div>
</div>
</div>
</div>
<!-- /wp:list -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/how-to-create-sdks-for-your-api-in-less-than-a-minute/">How to Create SDKs for your API in less than a Minute ⏰</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/how-to-create-sdks-for-your-api-in-less-than-a-minute/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Building REST APIs the Right Way</title>
		<link>/blog/building-rest-apis-the-right-way/</link>
					<comments>/blog/building-rest-apis-the-right-way/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Thu, 15 Mar 2018 11:02:51 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api Lifecycle]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=576</guid>

					<description><![CDATA[<p>Let’s be honest, if you want developers to make use of your APIs, you need to make sure they deliver. And despite the incredible functionality and value your API brings to the table, if it is not designed or implemented well, it may never become a cult favorite or something developers are going to recommend [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/building-rest-apis-the-right-way/">Building REST APIs the Right Way</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="576" class="elementor elementor-576" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-11ed5981 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="11ed5981" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-54793eb0" data-id="54793eb0" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-553bcc0f elementor-widget elementor-widget-text-editor" data-id="553bcc0f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-577 size-large" src="/wp-content/uploads/2021/12/1_N-9YGz-Hv6J6IvZ3yeelFg-1024x546.jpg" alt="Building REST APIs the Right Way" width="1024" height="546"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8ae5" class="">Let’s be honest, if you want developers to make use of your APIs, you need to make sure they deliver. And despite the incredible functionality and value your API brings to the table, if it is not designed or implemented well, it may never become a cult favorite or something developers are going to recommend to their peers.</p>
<p id="472a" class="">Just like any interface, the goal with an API should be to provide a seamless experience that gets users (developers) building fast and easy. And this is not something that happens by mere chance or luck, instead, this is something API teams need to force into existence.</p>
<p id="44ac" class="">While there is no certain formula to build APIs developers love, there are a few practices and patterns you can follow to ensure you put out the best for your users, something that is familiar yet comfortable and gets them to complete their desired actions without any sort of hassle.</p>
<p id="53ad" class="">In the blog, we will discuss some of the steps you can take — from design to consumption — to ensure you end up with APIs that see both developer popularity and adoption.</p>
<h2 id="c8f3" class="">1. Think, Plan, Strategize</h2>
<blockquote class="wp-block-quote">
<p><em>“Give me six hours to chop down a tree and I will spend the first four sharpening the axe.“ ~Abraham Lincoln</em></p>
</blockquote>
<p id="d6fb" class="">Every good thing starts with a plan, and that’s how you should start with your API. You cannot simply come up with an API just because you want to, you need to put solid research into it. You should know what kind of users are you targeting, why would they want an API from you, how are they going to make use of that API and what value are they going to get out of it. Understanding the market is also crucial, do you have competition already offering what you have? How are you going to top them? Can you even compete in your niche? If not then is it even worth working on it?</p>
<p id="f618">Once you have answers to these questions, work on your Business Model. Decide if you want to go for an External or Internal API? In the case of External API, would you like to open it to the Public or your Partners only? Plan how would you monetize it. You could start from the freemium model but then again can you really afford to do that? Always remember the strategy you chose to address these concerns should be well aligned with your needs and objectives.</p>
<p id="f724" class="">When planning, it’s also important to list what your API needs to do. List in detail, the features you intend to implement, at this stage you don’t need to worry about “Hows”, just focus on the “Whats”. Involve your potential consumers if you can, take their feedback, and prioritize your efforts accordingly. Build user stories and personas based on that feedback and make sure your use cases qualify for that.</p>
<h2 id="8e2e" class="">2. Design is Everything</h2>
<p id="4620" class="">Once you are done with the initial planning, you need to translate that to design. Many API teams will miss out on the step and jump straight into development, and then go through several iterations over and over again to perfect the initial architecture. But with changing times and practices the&nbsp;<strong>Design First</strong>&nbsp;approach is becoming more of a hit rather than a miss.</p>
<p id="7afa" class="">With the approach, your plan is converted into a human and machine-readable contract called the API Description. The description exposes all of your resources and methods and helps you identify bugs and fixes in the early stages of your API. To execute this you can make use of design tools such as Stoplight or Mulesoft, or APIMatic’s own specification editor.</p>
<p id="c3bd" class="">Designing your API before implementing also allows you to take user feedback with the help of API mockups. You can incorporate this feedback into your work to make sure you end up with a flawless product. A well-composed API Description can also be effectively used by your developers to understand how to best work with your API.</p>
<p id="0021" class="">It’s really important to adhere to your Design throughout your API Lifecycle and if any flaws are recognized during the implementation phase, you should go back to ground zero to alter your design instead of making amends on the go.</p>
<h2 id="05e0" class="">3. Code For a Developer</h2>
<blockquote class="wp-block-quote">
<p><em>“Any fool can write code that a computer can understand. Good programmers write code that humans can understand.” ~Martin Fowler</em></p>
</blockquote>
<p id="ec65" class="">Always remember when working with APIs, you are essentially producing code for developers, and for that reason your code should be fairly simple and self-explanatory. Not every developer in the world works with the same tools hence your code should not be tied to a certain technology stack and should be consumable in any environment. There are certain norms and conventions you can follow when implementing your API and although not the word of law, can really help with API adoption.</p>
<h2 id="e7c7" class="">4. Taxonomy Runs the Show</h2>
<p id="8e09">Your API should require as little Documentation as possible to get running. Conforming to the correct taxonomy and naming conventions is the key to that.</p>
<p id="5cf0" class="">Starting with Resources, always use nouns and in the plural form to name them. This keeps your resources flexible and decoupled from your methods and actions. Avoid naming Endpoints as such:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-bash">/createaccount
/deleteaccount
/listaccount
/editaccount</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="7ee2" class="">Verbs as you can see, are tightly coupled to a specific action and limit your resource. But by using nouns and then taking advantage of HTTP Action Verbs such as (GET, POST, PUT) you get the freedom to reuse resources, which enables you to accomplish multiple tasks.</p>
<p id="3056">Ideal endpoints should look like this:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-bash">/accounts
/accounts/1/names
/customers</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="c79d" class="">It’s very important that you never deviate from the norms and conventions to not mislead developers. For instance, when working with HTTP Action Verbs, use the standardized commands for each action. To create a new record, always use “POST”, to read a record, use “GET” and similarly “PUT” and “PATCH” when making updates, and “DELETE” to delete a record. Mixing these up or not using any of these verbs for their intended action such as passing the data as query string when telling developers to use the “POST” command could cause utter confusion.</p>
<p id="8539" class="">Another case where following the correct taxonomy is very important is with error messages, always effectively communicate with the developers about what’s going wrong, for example: in the case of REST APIs, use the standard HTTP Error codes to avoid any confusion. Other popular error message formats include Google Errors, vnd. error, and JSON API’s error format.</p>
<h2 id="0736" class="">5. Multiple Data Formats Will Keep Your API Alive</h2>
<p id="9c0e" class="">When working with APIs, JSON has been the format of choice for many, but often your consumers may find themselves working with a different data format. For this purpose, always use a Content-Type Header which decouples your API’s dependency from a certain format. A Content-Type Header can easily determine what format of data are users requesting so your API could respond to them accordingly. Also, technology keeps on changing and evolving, and just like JSON replaced XML, we may (or may not) see YAML replacing JSON in the future and to avoid your API from going obsolete it’s only logical to support as many data formats as you can.</p>
<p id="a10b">A sample query with a content-type header in HTTP looks like this:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-http">POST /sample HTTP/2.1
Content-Length: 74567
Content-Type:multipart/form-data; boundary= — — — — — — — — — — — — — -974767299852498929531610575
Content-Disposition: form-data; name=”description” </code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="93c6" class="">6. Hypermedia: A Dilemma</h2>
<p id="f3ee" class="">(HATEOAS) or Hypermedia as the Engine of Application State is another great practice to assist developers to consume your API. With the hypertext links, you can easily guide developers to discover paths and features right when they are implementing your API.</p>
<p id="881e">For Example:</p>
<ul>
<li>The following code contains an Account Object:</li>
</ul>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-java">class Account {
    String name;
    String id;
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<ul>
<li>A normal JSON response is normally rendered as:</li>
</ul>
</div>
</div>
</div>
</div>
<!-- /wp:list -->

<!-- wp:preformatted -->
<pre><code class="language-json">{
    “name”: “John”,
    “id”: “1”
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<ul>
<li>HATEOAS response will look like this:</li>
</ul>
</div>
</div>
</div>
</div>
<!-- /wp:list -->

<!-- wp:preformatted -->
<pre><code class="language-json">{
    &quot;name&quot;: &quot;John&quot;,
    &quot;links&quot;: [{
        &quot;rel&quot;: &quot;self&quot;,
        &quot;href&quot;: &quot;http://localhost:8080/account/1&quot;
    }]
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3034" class="">Here, “rel” means relationship, and “self” means a self-referencing hyperlink. The “href” is the URL address that uniquely defines the resource. Concise instructions as such make it really easy for developers to navigate and make calls.</p>
<p id="3f23">HATEOAS is also a great way to introduce new features. Instead of making developers go through release notes, you can just direct them to new paths and actions using these hypertext links. Although not completely killing the need for documentation, HATEOAS has greatly reduced the reliance of developers on API documentation for every other call.</p>
<p id="bb44" class="">Where many people believe in hypermedia as the means of defining user experience, there are some that consider it as unnecessary bloatware. The common thought is, you are developing an API for a completely unknown consumer and it’s impossible to provide valuable information to direct the user or client to the next possible action. Some even argue that by adding additional links to your responses, you are increasing the load on your servers, marginally slowing down your response time.</p>
<p id="3c7f" class="">However, despite skeptics, many API frameworks now include hypermedia specs and it’s something that is being widely adopted. When done well enough and supported with thorough documentation, hypermedia will always help with the consumption of your API, that’s what we believe in.</p>
<h2 id="c388" class="">7. Test Everything</h2>
<p id="492b" class="">Your API should be thoroughly tested before every new release. Create test cases for all possible API inputs combination, test for failure, and invalid parameters. Test how your API deals with unforeseen circumstances and make sure they are dealt away with proper response codes. Stress-test your API as well, see how it handles the additional load. Run “Data Type Validation” tests, to confirm the data connected to objects is accurate and that all URLs are properly formed. All routes should be tested as well to verify that they invoke the correct operation. Ensure that there is no mismatches between routes. Also, verify that routes are protected properly with suitable authentication methods.</p>
<p id="9484">Test all possible combinations of request headers that a client can specify and make sure that your API responds to them accordingly. In case objects demand parameters, test query strings as well to see if they produce the desired outcome.</p>
<p id="c966" class="">There is no GUI available when working with APIs which makes it really hard to test them but there are certain tools such as&nbsp;&nbsp;Postman and Request Bin that can be used to make API testing easier. You can specify test cases when designing your API as well in the API Description, and there are services that will generate test cases for you in languages of your choice.</p>
<p id="cc86" class="">Again, at end of the day, an API is a software product and like all software products should be completely bug-free and should work as described and expected and you should make sure of that.</p>
<h2 id="40de" class="">8. Version When Necessary</h2>
<p id="4572">Even perfectly designed APIs may require updates to keep up with changing needs and requirements. It’s really important to version and document these changes with every new release.</p>
<p id="c5c5" class="">Ideally, your API should be decoupled enough that any change you make in the background is a seamless transition but in case of major changes it’s important to ensure that your latest releases are compatible with previous versions. It’s also important to ensure that your system does not come to a halt while you are updating it. Even momentary pauses may cause a loss of quality when it comes to API Calls and functionality. Releasing too many versions can also confuse your consumers, versioning may not be the best approach for every situation, like adding new endpoints, supporting newer data types, etc. do not warrant a new version. Only version your APIs when:</p>
<ol class="">
<li>You had to completely overhaul your API because your functionality is completely deviating from the evolving needs of your consumers.</li>
<li>You made some extensive changes to your API like renaming operations, removing operations, made changes to operation parameters, or made changes to the primary data types.</li>
<li>You introduced new technology at the backend which makes it impossible to make your API backward compatible.</li>
</ol>
<p id="274a">How you version your APIs is also important, many API Providers put the version number in the header, some put it in the query parameter but the most popular and consistent approach has been to add the version notation to the URI/URL Parameter.</p>
<h2 id="57be" class="">9. Authenticate, Limit, Throttle</h2>
<p id="8c29" class="">It’s really important to authenticate the access to your API and limit usage where applicable. This can be done by providing your API users with a unique token or a key. Using the token/key you can monitor usage and set permissions/SLAs for your consumers depending on their needs. You can restrict usage as well, for example setting the limit to 5, 50, 500 calls per second to prevent abuse of your resources, ensuring all users get the same performance out of your system. This also helps you filter out power users, who you can pitch enterprise solutions to according to their need.</p>
<p id="33c4" class="">The industry standard when it comes to authentication is OAuth 2.0. Along with helping API providers with control access and limitations, OAuth 2.0 also helps consumers with improved security and better end-to-end experiences with web and mobile apps. Security is really important for consumers and when done right could be the sole reason for developers to opt for you over a competitor API.</p>
<h2 id="7379" class="">10. Consumption is Success</h2>
<blockquote class="wp-block-quote">
<p><em>“You’ve got to start with the customer experience and work back toward the technology, not the other way around.” — Steve Jobs</em></p>
</blockquote>
<p id="475a" class="">You can put in all the hours in the world to research, plan, and develop your API and still not see success when the Customer Experience, in this case, Developer Experience is poor. Just making an API is never enough and should never be the goal. You have to maintain and operate it in a way that consumption stays as smooth and seamless as possible. Your API cannot be truly successful when it’s not easy to consume.</p>
<h2 id="53e2" class="">11. An API is as Good as its Documentation &#8211; and SDKs!</h2>
<p id="5ccb" class="">Unless your API is open-source, Documentation is the only medium of communication between you and your developers and when it’s not clear or well presented, developers will always have problems using your API.</p>
<p id="34c3" class="">Ideally, a developer should get up and running with your API in minutes and your documentation is the key to that. Your documentation should be able to put developers in a position where they can start making calls instantly. Complete API documentation requires more than just your API reference in HTML or PDF form. It requires having a developer portal that pulls together everything that they will need to be successful. You can also offer an API Console on your Portal to let developers experiment with your code.</p>
<p id="c07e" class="">Put out SDKs (Client Libraries) in as many languages as possible to maximize your adoption rates. With your SDK, provide a complete guideline with tutorials and sample code snippets so developers can use them to communicate with your API with the minimum of effort. SDK generation however is not that simple and requires a lot of man-hours and effort to put together.</p>
<p id="35a2" class="">In fact, both Documentation and SDKs aren’t something you can easily produce from scratch, also with constant updates and new releases, it may become impossible to maintain them, especially if you deal with different languages. However, there are certain tools that you can use to generate SDKs and Documentation in real-time without having to write a single line of code. Our own in-house <a href="https://www.apimatic.io/developer-experience-portal/">Developer Experience Portal</a>&nbsp;is a great way to get developers started with your API. Just give us your API descriptions (we accept over 15 different formats) and we’ll generate a whole API Portal for you, complete with SDKs, Documentation, User Guides, and Live Code Samples. The portals are completely customizable and can be integrated with your current systems and will and take just minutes to set up.</p>
<p id="c044">Since Documentation is the face of your API, it should be one of the most important things on your agenda. When considering an API, the very first thing developers look for is documentation and when done nicely, it can easily drive them to test your API, which ultimately leads them to adopt it.</p>
<h2 id="14c4" class="">12. Ensure Responsiveness and Scalability</h2>
<p id="865b" class="">Another important aspect of API consumption is your infrastructure underlying it. It’s really important to ensure that developers are facing no problems when actually accessing or making use of your API. Your API may be utilized by many at the same time and it’s important that it stays responsive under heavy load. To make sure your API stays scalable enough to support a highly varying workload, it’s essential to make use of an API Gateway. The API Gateway integrates with your backend services and acts as an orchestration layer governing everything that interacts with your API. Ideally, an API Gateway should provide the following services:</p>
<ol class="">
<li>Control and automate the connection between an API and the client applications making use of it.</li>
<li>Monitor traffic from individual applications. APIs can’t handle unlimited calls and it’s really important to throttle requests.</li>
<li>Provide caching mechanism to improve response rates.</li>
<li>Secure API using various procedures to prevent misuse.</li>
</ol>
<p id="917c" class="">Concluding this all, we’ll always advise API Developers to keep their APIs as simple as possible. It’s important to think like an API User instead of an API Designer, most API users are looking to make their lives easy and if your API is not helping them achieve that objective, it’s probably not a very good one. When it comes to API development it’s never about what your API does, it always about how it does it, and the easier, the better.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/building-rest-apis-the-right-way/">Building REST APIs the Right Way</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/building-rest-apis-the-right-way/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
