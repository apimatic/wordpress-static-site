
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Sdks Archives - APIMatic</title>
	<atom:link href="/blog/tag/sdks/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Thu, 24 Mar 2022 08:04:10 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.4</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>Sdks Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Automating Developer Experience with APIMatic CLI</title>
		<link>/blog/automate-dx-with-apimatic-cli/</link>
					<comments>/blog/automate-dx-with-apimatic-cli/#respond</comments>
		
		<dc:creator><![CDATA[Nida I Zamir]]></dc:creator>
		<pubDate>Fri, 21 Jan 2022 11:15:14 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Automation]]></category>
		<category><![CDATA[CLI]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API portal]]></category>
		<category><![CDATA[APIMatic CLI]]></category>
		<category><![CDATA[automation]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1627</guid>

					<description><![CDATA[<p>APIs act as a bridge to multiple tiers in distributed software systems. However, reflecting the changes of fast-evolving APIs among these connected tiers is a huge drain in productivity, and increases the time to market. This means that your software tiers must always remain in sync, and in an ideal world also minimize the redundancy [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/automate-dx-with-apimatic-cli/">Automating Developer Experience with APIMatic CLI</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p><img class=" wp-image-9666 aligncenter" src="/wp-content/uploads/2022/01/Dev-Cycle-1024x690-1.png" alt="" width="549" height="370" srcset="/wp-content/uploads/2022/01/Dev-Cycle-1024x690-1.png 1024w, /wp-content/uploads/2022/01/Dev-Cycle-1024x690-1-300x202.png 300w, /wp-content/uploads/2022/01/Dev-Cycle-1024x690-1-768x518.png 768w" sizes="(max-width: 549px) 100vw, 549px" /></p>
<div class="boldgrid-section">
<div class="container">
<p class=""><span style="font-weight: 400;">APIs act as a bridge to multiple tiers in distributed software systems. However, reflecting the changes of fast-evolving APIs among these connected tiers is a huge drain in productivity, and increases the time to market. </span><span style="font-weight: 400;">This means that your software tiers must always remain in sync, and in an ideal world also minimize the redundancy of generating documentation and SDKs on each update. </span></p>
<p class=""><span style="font-weight: 400;">The <a href="https://docs.apimatic.io/apimatic-cli/intro-and-install/">APIMatic CLI</a> ensures that your developer experience checklist is in check at all times by automating the redundant, time and resource-consuming tasks of API validation, documentation, and SDK maintenance. The APIMatic CLI offers feature parity by providing automation in the form of: </span></p>
<ul class="">
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">API Validator</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">API Transformer </span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">SDK Generator</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">API Portal Generator</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<hr />
</div>
</div>
</div>
</div>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div><span style="font-weight: 400;">You can integrate the APIMatic CLI into your CI/CD pipelines for a seamless and automated experience. For example, every time your pipeline detects a change in the API, it can trigger </span><a href="https://www.apimatic.io/continuous-code-generation/"><span style="font-weight: 400;">automatic code generation</span></a><span style="font-weight: 400;"> for the API without any human intervention and you can ship updated SDKs as soon as the API is updated. </span></div>
</div>
</div>
</div>
</div>
<p class=""><span style="font-weight: 400;">For a quick walkthrough of the newly introduced CLI, we’ll be using the Uber API specification.</span></p>
<h2 class=""><span style="font-weight: 400;">Installing the APIMatic CLI</span></h2>
<p class=""><span style="font-weight: 400;">Installing the CLI is quick and painless. You only need </span><b>Node.JS</b><span style="font-weight: 400;"> and </span><b>npm </b><span style="font-weight: 400;">as a pre-requisite to execute the following command, and you’re good to go:</span></p>
<pre class=""><code class="language-bash">npm install -g @apimatic/cli</code></pre>
<h2 class=""><span style="font-weight: 400;">Validating the API for Unforeseen Errors</span></h2>
<p class=""><span style="font-weight: 400;">Validating the API definition against robust internal checks ensures you have a smooth experience using APIMatic’s services. Fixing these validation issues before proceeding to generate portals or SDKs helps save debugging time. The </span><a href="https://docs.apimatic.io/rulesets/overview/"><span style="font-weight: 400;">validation output</span></a><span style="font-weight: 400;"> is categorized into three categories defined below:</span></p>
<ul class="">
<li style="font-weight: 400;" aria-level="1"><b>Errors</b><span style="font-weight: 400;">: Any syntax/semantic issues found in the API definition.</span></li>
<li style="font-weight: 400;" aria-level="1"><b>Warnings</b><span style="font-weight: 400;">: Any unexpected behavior that may affect the output.</span></li>
<li style="font-weight: 400;" aria-level="1"><b>Info</b><span style="font-weight: 400;">: Recommendations or suggestions that can help enhance your API definition and its completeness.</span></li>
</ul>
<p>&nbsp;</p>
<p class=""><span style="font-weight: 400;">To validate your API definition, run the </span><b>apimatic api:validate</b><span style="font-weight: 400;"> command by providing the path to the file:</span></p>
<p class=""><img class="aligncenter wp-image-1634 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/validation.png" alt="validate using CLI" width="637" height="91" /></p>
<p class=""><span style="font-weight: 400;">The API definition validated here does not seem to have any critical errors and warnings that need fixing, so we can move forward to either generate SDKs and API Portals or transform the API specification into another format.</span></p>
<h2 class=""><span style="font-weight: 400;">Generating SDKs to Speak in the Language of Developers</span></h2>
<p class=""><span style="font-weight: 400;">Once the API is validated, you can proceed to generate multi-language SDKs from the API definition, directly via the command line. The </span><b>apimatic sdk:generate</b><span style="font-weight: 400;"> command generates an SDK in a specified language and downloads it to the specified destination folder.</span></p>
<p class=""><span style="font-weight: 400;">For example, I generated a Python SDK from the Uber API using the APIMatic CLI: </span></p>
<p class=""><span style="font-weight: 400;"><img class="aligncenter wp-image-1631 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/sdk.png" alt="" width="742" height="102" /></span></p>
<p class=""><span style="font-weight: 400;">Now check the destination folder, where the SDK has been downloaded in .zip form. Extracting the .zip file shows the complete SDK files, including a comprehensive README to use the SDK:</span></p>
<p class=""><img class="aligncenter wp-image-1632 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/sdk-downloaded.png" alt="sdk generation using cli" width="661" height="323" /></p>
<p class=""><span style="font-weight: 400;">You can use your favorite IDE to start building applications using the Uber API SDK straightaway. To read more about APIMatic SDKs, please refer to the </span><a href="https://docs.apimatic.io/generate-sdks/overview-sdks/"><span style="font-weight: 400;">APIMatic SDK documentation</span></a><span style="font-weight: 400;">.</span></p>
<h2 class=""><span style="font-weight: 400;">Generating API Portal for Higher Adoption</span></h2>
<p class=""><span style="font-weight: 400;">APIMatic embraces the ‘documentation as code’ philosophy, allowing you to specify all aspects of the API documentation as code. The </span><a href="https://www.apimatic.io/developer-experience-portal/"><span style="font-weight: 400;">API Portal</span></a><span style="font-weight: 400;"> bundles API documentation, SDKs, and code samples into a static website. Just like with all products of APIMatic, the API Portal can be generated right from the terminal as well, letting the entire process be made part of the release pipeline.</span></p>
<p class=""><span style="font-weight: 400;">In order to generate an API Portal, the CLI expects inputs to be provided in a specific format:</span></p>
<ul class="">
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">A </span><i><span style="font-weight: 400;">content </span></i><span style="font-weight: 400;">directory containing Markdown guides.</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">A </span><i><span style="font-weight: 400;">spec </span></i><span style="font-weight: 400;">directory containing API specifications.</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">A </span><i><span style="font-weight: 400;">static </span></i><span style="font-weight: 400;">directory containing images or any other static content referenced in the documentation.</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">A configuration file called </span><i><span style="font-weight: 400;">APIMATIC-BUILD.json</span></i><span style="font-weight: 400;">.</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<hr />
</div>
</div>
</div>
</div>
<p class=""><span style="font-weight: 400;">Place all the artifacts in a directory, including the Uber API under the </span><i><span style="font-weight: 400;">spec </span></i><span style="font-weight: 400;">directory:</span></p>
<p class=""><img class="aligncenter size-full wp-image-1629" src="https://devapi.dream.press/wp-content/uploads/2022/01/portal-directory.png" alt="" width="281" height="194" /></p>
<p class=""><span style="font-weight: 400;">The </span><b>apimatic portal:generate</b><span style="font-weight: 400;"> command takes the contents of this directory to convert it into a static portal’s components.</span></p>
<p class=""><img class="aligncenter wp-image-1630 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/portal-generated.png" alt="portal generation using cli" width="624" height="80" /></p>
<p class=""><span style="font-weight: 400;">The static website can now be hosted on a hosting service of your choice, let’s say by creating a website on Netlify, and the Uber API portal is live:</span></p>
<p class=""><img class="aligncenter wp-image-1628 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/cli-portal.gif" alt="APIMatic CLI Portal" width="1346" height="634" /></p>
<h2 class=""><span style="font-weight: 400;">Transforming the API into Multiple API Formats</span></h2>
<p class=""><span style="font-weight: 400;">You can also automatically transform your API into more than </span><a href="https://www.apimatic.io/transformer/"><span style="font-weight: 400;">10 popular API specification formats</span></a><span style="font-weight: 400;"> including OpenAPI, RAML, API Blueprint, WSDL, Postman, and more. Many APIMatic users integrate automated transformations into their CI/CD pipelines via the Transformer API, which helps them take away the pain of having to manually rewrite the APIs. The same process can be replicated with a script that executes the CLI command for Transformer as well.</span></p>
<p class=""><span style="font-weight: 400;">The following example shows how the </span><b>apimatic api:transform</b><span style="font-weight: 400;"> command converts the Uber API (in OpenAPI 3.0 format) to RAML, and saves it to a specific directory: </span></p>
<p class=""><img class="aligncenter wp-image-1633 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/transformed.png" alt="transform using cli" width="682" height="130" /></p>
<h2 class=""><span style="font-weight: 400;">Conclusion</span></h2>
<p><span style="font-weight: 400;">Automation lets developers concentrate on business objectives and innovative solutions instead of diverting their time and efforts towards redundant tasks like maintaining documentation and building SDKs for each API update. Hence, the APIMatic CLI has been introduced as yet another automation option </span><a href="http://apimatic.io/"><span style="font-weight: 400;">among our growing toolset</span></a><span style="font-weight: 400;"> so you only need to focus on your API, while we take care of the rest.</span></p>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/automate-dx-with-apimatic-cli/">Automating Developer Experience with APIMatic CLI</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/automate-dx-with-apimatic-cli/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>DX of SDKs vs Direct API Calls</title>
		<link>/blog/dx-of-sdks-vs-direct-api-calls/</link>
					<comments>/blog/dx-of-sdks-vs-direct-api-calls/#respond</comments>
		
		<dc:creator><![CDATA[Adam DuVander]]></dc:creator>
		<pubDate>Mon, 11 Oct 2021 10:32:19 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Code Samples]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API Calls]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Direct API Calls]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1519</guid>

					<description><![CDATA[<p>What&#8217;s it like to call your API? Developers want to use your API to accomplish something, and you want to make it as easy as possible for them to incorporate your service. To allow developers to call your API directly from any technology, your docs provide DIY instructions. To go a step further and give [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/dx-of-sdks-vs-direct-api-calls/">DX of SDKs vs Direct API Calls</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1519" class="elementor elementor-1519">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-7825289e elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="7825289e" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-5ad04015" data-id="5ad04015" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-687f92af elementor-widget elementor-widget-text-editor" data-id="687f92af" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.1 - 23-03-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter wp-image-1552 " src="/wp-content/uploads/2021/12/dx-of-sdks-vs-api-calls-1024x459.png" alt="" width="771" height="346"></p>
<p class=""><span style="font-weight: 400;">What&#8217;s it like to call your API? Developers want to use your API to accomplish something, and you want to make it as easy as possible for them to incorporate your service. To allow developers to call your API directly from any technology, your docs provide DIY instructions. To go a step further and give developers additional conveniences and tooling, you can provide Software Development Kits (SDKs). SDKs include code to call your API so that developers don&#8217;t have to write it themselves from scratch.</span></p>
<p class=""><span style="font-weight: 400;">While calling an API directly vs. using an SDK does not change the ultimate functionality of the API, it can dramatically affect the developer experience. In most cases, one method will be preferred over the other, varying according to each developer’s needs, preferences, and skills. An SDK offers simplicity and speedier development but applies only to a particular development framework. SDKs require resources to develop and maintain. Direct calls offer platform flexibility and are available to all developers, but are harder to use without expertise.</span></p>
<p class=""><span style="font-weight: 400;">In this article, we&#8217;ll be looking at why your developer experience may focus on direct API calls, SDKs, or both.</span></p>

<h2 class=""><span style="font-weight: 400;">Direct API Calls: The Basics</span></h2>
<span style="font-weight: 400;">For communicating with a service, sending API calls directly to URL endpoints is the simplest way. Of course, when we say </span><i><span style="font-weight: 400;">simplest</span></i><span style="font-weight: 400;">, we mean in terms of program complexity, not ease of use.</span>
<p class=""><span style="font-weight: 400;">When using an API without an SDK, you make calls to its URL endpoints directly using standard internet protocol commands for transferring packets of information over the network. There&#8217;s no abstraction between you and the service, so every parameter must be written into the call. It must also conform to a standard format.</span></p>
<p class=""><span style="font-weight: 400;">An example of how to construct a direct API call using Python is shown in the code snippet below. Notice the URL for the API endpoint is specified explicitly, alongside required header parameters that describe the request. This information is bundled and transmitted using the <code>requests</code> library, which then receives any response data returned by the API and stores it in the <code>resp</code> variable. Note that the cost of deserialization is added here for the API call.</span></p>

<pre class=""><code class="language-python">import requests
from requests.structures import CaseInsensitiveDict

url = &quot;https://connect.squareup.com/v2/payments&quot;

headers = CaseInsensitiveDict()
headers[&quot;Square-Version&quot;] = &quot;2021-06-16&quot;
headers[&quot;Authorization&quot;] = &quot;Bearer ACCESS TOKEN&quot;
headers[&quot;Content-Type&quot;] = &quot;application/json&quot;

resp = requests.get(url, headers=headers)
print(resp.status_code)

decoded = jsonpickle.decode(resp.text)
</code></pre>
<p class=""><span style="font-weight: 400;">Another example of a non-trivial API call can be seen here, pulled from the User Authentication documentation for the</span> <a href="https://www.dropbox.com/developers/documentation"><span style="font-weight: 400;">Dropbox API</span></a><span style="font-weight: 400;">:</span></p>


<figure id="attachment_1520" aria-describedby="caption-attachment-1520" style="width: 790px" class="wp-caption aligncenter"><img class="wp-image-1520 " src="/wp-content/uploads/2021/12/dropbox-1024x677.png" alt="dropbox user authentication" width="790" height="523"><figcaption id="caption-attachment-1520" class="wp-caption-text">Dropbox User Authentication Docs</figcaption></figure>

<span style="font-weight: 400;">For many developers, the need to specify every parameter is exactly what they want: the full power of the service at their fingertips.</span>
<p class=""><span style="font-weight: 400;">Low-level control can be unnecessary and overwhelming, though, especially for new developers. With just the basic building blocks, it can become a challenge for developers to perform more complicated tasks.</span></p>
<p class=""><span style="font-weight: 400;">Not only can direct API calls be complicated to do correctly, but they can also be frustrating to try to troubleshoot. API response codes aren&#8217;t particularly specific when providing error messages; Many developers may give up after countless generic 404 errors.</span></p>
<p class=""><span style="font-weight: 400;">Ultimately, many developers will wish they could have something a little more prepared for them. For those developers, you can please them by offering SDKs in their language.</span></p>

<h2 class=""><span style="font-weight: 400;">SDKs: What Are They?</span></h2>
<p class=""><span style="font-weight: 400;">SDKs are a compilation of environment-specific developer tools designed to access your API. SDKs make it more straightforward for developers to use your API using a programming language framework they prefer. For the developer who wants a little more guidance, SDKs will be the most appealing way for them to access your service.</span></p>
<p class=""><span style="font-weight: 400;">SDKs abstract away the minutiae of the API that often bog down implementation for developers. They can be thought of as an API wrapper that makes accessing that API more friendly to a particular type of developer. A developer has to download and install an SDK that matches the language of their development environment, where it will then provide a host of streamlined functionalities for interacting with your API. If the developer is using Python, for instance, they’ll most likely download an SDK through pip, such as this example from </span><a href="https://www.algolia.com/doc/guides/getting-started/quick-start/tutorials/quick-start-with-the-api-client/python/?client=python"><span style="font-weight: 400;">Algolia’s documentation</span></a><span style="font-weight: 400;">:</span></p>


<figure id="attachment_1521" aria-describedby="caption-attachment-1521" style="width: 721px" class="wp-caption aligncenter"><img class="wp-image-1521 " src="/wp-content/uploads/2021/12/algolia-1024x350.png" alt="Algolia Documentation" width="721" height="247"><figcaption id="caption-attachment-1521" class="wp-caption-text">Algolia SDK download through pip</figcaption></figure>
<p class=""><span style="font-weight: 400;">The example call to Dropbox&#8217;s API, shown earlier, constructed with their Python SDK is shown below. In contrast to a direct API call, it does not require the developer to hard code a URL and headers. Instead, the API token is passed to a provided client object that handles those details.</span></p>

<pre class=""><code class="language-python">import dropbox
token = &#039;My-API-Token&#039;
dbx = dropbox.Dropbox(token)

My_Field = dropbox.file_properties.PropertyField(&#039;Security Policy&#039;,&#039;Confidential&#039;)
My_Template_ID = &#039;ptid:1...&#039;
My_Property_Group = dropbox.file_properties.PropertyGroup(template_id=My_Template_ID, fields=[My_Field])

dbx.file_properties_properties_add(&quot;/my_awesome/word.docx&quot;, My_Property_Group)
</code></pre>
<span style="font-weight: 400;">While APIs aren&#8217;t language-specific, SDKs are. A developer will download the SDK for the specific language they want to work with. API providers that intend to offer SDKs have to research what languages most appeal to their core user base. Developers who have the use of an SDK will be incredibly satisfied by the bevy of tools made available for them, including, but not limited to:</span>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Autocomplete SDK commands inline</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Code samples for commands</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Example applications</span></li>
</ul>
<span style="font-weight: 400;">A beneficial everyday use case where SDKs are much easier to use than direct API calls is when developers need to perform complicated authentication procedures. Doing this correctly and securely with only direct API calls can be tricky, but most SDKs take these steps and make them easily implementable with just a few commands. The low-level API call parameters and structure are abstracted away from the developer and handled by the SDK.</span>

<span style="font-weight: 400;">In many ways, SDKs are the epitome of one of the main purposes of APIs: to give the developer the ability to build off existing technology as easily and quickly as possible.</span>
<p class=""><span style="font-weight: 400;">For many developers, SDKs are the preferred method of interacting with APIs. For others, there are cases for making direct API calls without an SDK. Now that we&#8217;ve looked at both options let&#8217;s see why developers would lean towards one or the other.</span></p>

<h2><span style="font-weight: 400;">Choosing Between SDKs and Direct API Calls</span></h2>
<p class=""><span style="font-weight: 400;">In an ideal world, there will be an SDK available to meet the developer’s exact needs. SDKs cost resources to produce and maintain, however. And even when SDKs are available, there are quite a few situations where the available SDKs might not work for what a developer wants to do. Just to list a few:</span></p>

<ul>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">An SDK may not be available in their desired language</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">The SDK may not be updated to incorporate new API features yet</span></li>
</ul>
<p class=""><span style="font-weight: 400;">In both of these situations, directly using the API might be the only option. After all, it takes time and effort for an API provider to build SDKs. If there&#8217;s only one Julia developer using your API who wants a Julia SDK, it might not justify the use of resources.</span></p>
<p class=""><span style="font-weight: 400;">Even for the SDKs of languages you deem popular enough to support, it takes time and effort to update those SDKs. Functionality added to an API yesterday may not be supported in the SDK by today.</span></p>
<p class=""><span style="font-weight: 400;">For the vast majority of use cases, developers will appreciate having SDKs available and will eagerly use them. This is especially true for those who are making use of multiple APIs in their applications. For that reason, SDKs are worth the time and effort to develop for your primary user groups. The effort it takes to provide up-to-date SDKs will save them effort as they can seamlessly incorporate API calls into their app code.</span></p>
<p class=""><span style="font-weight: 400;">And for those edge case developers, those who code in esoteric languages, those who need maximum security control over what the API is doing, and those who want to be on the cutting edge no matter what, direct API calls are most useful.</span></p>
<p class=""><span style="font-weight: 400;">A great example of a company showing both direct API and SDK calls in their documentation is </span><a href="https://stripe.com/docs/api/"><span style="font-weight: 400;">Stripe</span></a><span style="font-weight: 400;">:</span></p>


<figure id="attachment_1522" aria-describedby="caption-attachment-1522" style="width: 576px" class="wp-caption aligncenter"><img class="wp-image-1522 size-full" src="/wp-content/uploads/2021/12/stripe.gif" alt="Stripe API documentation showing both SDKs and API calls" width="576" height="296"><figcaption id="caption-attachment-1522" class="wp-caption-text">Stripe API documentation showing both SDKs and API calls</figcaption></figure>

<span style="font-weight: 400;">Both direct API calls and SDKs are tools that you should make available in your developers&#8217; toolboxes. And the more tools at their disposal, the more effective your developers will be.</span>
<p class=""><span style="font-weight: 400;">At the end of the day, the goal of your developer experience should be improving the accessibility of your product to developers of all backgrounds. Providing SDKs is the best way to make your API a little more manageable for them to implement.</span></p>
<p class=""><span style="font-weight: 400;">
</span>Have a look at how <a href="https://www.apimatic.io/developer-experience-portal">APIMatic enhances the developer experience</a> of your API with robust SDKs auto-generated in all popular languages from a single API definition file.</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/dx-of-sdks-vs-direct-api-calls/">DX of SDKs vs Direct API Calls</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/dx-of-sdks-vs-direct-api-calls/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Using Optional and Nullable Properties in API Requests</title>
		<link>/blog/using-optional-and-nullable-properties-in-api-requests/</link>
					<comments>/blog/using-optional-and-nullable-properties-in-api-requests/#respond</comments>
		
		<dc:creator><![CDATA[Maryam Adnan]]></dc:creator>
		<pubDate>Thu, 16 Sep 2021 09:00:51 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[OpenAPI]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[nullable]]></category>
		<category><![CDATA[OpenApi]]></category>
		<category><![CDATA[optional]]></category>
		<category><![CDATA[optional/nullable]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1436</guid>

					<description><![CDATA[<p>An essential part of an API endpoint is its parameters. While certain parameters must be included in each request, there may be some parameters that may or not may not be included in the request. The optional property was introduced to create unique combinations of such parameters in API requests. In other cases, some parameters [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/using-optional-and-nullable-properties-in-api-requests/">Using Optional and Nullable Properties in API Requests</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1436" class="elementor elementor-1436">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-4ea2926a elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="4ea2926a" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1c6630db" data-id="1c6630db" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-274d9c90 elementor-widget elementor-widget-text-editor" data-id="274d9c90" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter wp-image-1451" src="/wp-content/uploads/2021/12/Using-OptionalNullable-Properties-in-API-Requests_Blog_Facebook-1-e1631787822746-1024x436.png" alt="Using Optional and Nullable Properties in API Requests | APIMatic Blog" width="623" height="265"></p>
<p class=""><span style="font-weight: 400;">An essential part of an API endpoint is its parameters. While certain parameters must be included in each request, there may be some parameters that may or not may not be included in the request. The </span><span style="font-weight: 400;"><code>optional</code> </span><span style="font-weight: 400;">property was introduced to create unique combinations of such parameters in API requests. In other cases, some parameters may be allowed to hold a null value, which is catered via <code>nullable</code> properties that help in coping with the errors if null is not handled correctly.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">While all endpoint parameter types (query, body, form, and path) can have optional nullable properties, we’ll be focusing on the optional nullable properties of a model’s fields being passed as request parameters in a </span><b>client SDK</b><span style="font-weight: 400;">.&nbsp;</span></p>
<p class=""><i><span style="font-weight: 400;">This blog is the first part of a series on how optional and nullable properties can be used flexibly and in multiple combinations to cater to each parameter of your API requests. </span></i></p>

<h2 class=""><strong>Required, Optional, and Nullable Properties in OpenAPI</strong></h2>
<p class=""><span style="font-weight: 400;">The </span><a href="https://github.com/OAI/OpenAPI-Specification:"><span style="font-weight: 400;">OpenAPI Specification</span></a> <span style="font-weight: 400;">is a simple yet powerful way of describing RESTful APIs, in a machine and human-readable format, using JSON or YAML.</span><span style="font-weight: 400;"> OpenAPI has some examples of Uber’s API listed down </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v2.0/json/uber.json"><span style="font-weight: 400;">in their repository</span></a> <span style="font-weight: 400;">to help understand how the endpoint is specified with OpenAPI.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">The OpenAPI specification allows defining parameters for an operation or path. Parameters can be of different types i.e header, query, cookies, path parameters.</span></p>

<h3 class=""><b>Required Parameters</b></h3>
<p class=""><span style="font-weight: 400;">One of the attributes that can be defined for these parameters is</span><b> “required”</b><span style="font-weight: 400;"> which simply means whether it is a </span><i><span style="font-weight: 400;">required </span></i><span style="font-weight: 400;">parameter or an </span><i><span style="font-weight: 400;">optional </span></i><span style="font-weight: 400;">one. Let&#8217;s take a look at an example of Uber’s </span><a href="https://developer.uber.com/docs/riders/references/api/v1.2/products-get"><span style="font-weight: 400;">Get Products</span></a><span style="font-weight: 400;"> endpoint specification:</span></p>

<pre class=""><code class="language-json">&quot;paths&quot;: {
	&quot;/products&quot;: {
  	&quot;get&quot;: {
        ...
        &quot;parameters&quot;: [
            {
                &quot;name&quot;: &quot;latitude&quot;,
                &quot;in&quot;: &quot;query&quot;,
                &quot;description&quot;: &quot;Latitude component of location.&quot;,
                &quot;required&quot;: true,
                &quot;style&quot;: &quot;form&quot;,
                ...
            },
            {
                &quot;name&quot;: &quot;longitude&quot;,
                &quot;in&quot;: &quot;query&quot;,
                &quot;description&quot;: &quot;Longitude component of location.&quot;,
                &quot;required&quot;: true,
                &quot;style&quot;: &quot;form&quot;,
                ...
            }
    	]
  	    }
      }
  }</code></pre>
<p class=""><span style="font-weight: 400;">You can get more details </span><span style="font-weight: 400;">regarding </span><a href="https://swagger.io/docs/specification/describing-parameters/"><span style="font-weight: 400;">Required and Optional Parameters</span></a> <span style="font-weight: 400;">in the official OAS document.</span></p>

<h3 class=""><b>Nullable Parameters</b></h3>
<p class=""><span style="font-weight: 400;">OpenAPI supports values of data types to be null. To specify, one can use the </span><b>“</b><span style="font-weight: 400;">nullable: true</span><b>” </b><span style="font-weight: 400;">property while defining a data type in OAS version 3.0.0. Let&#8217;s look at the definition of the </span><code>Profile</code> <span style="font-weight: 400;">schema that is defined for the response that we receive for the endpoint </span><a href="https://developer.uber.com/docs/riders/references/api/v1.2/me-get#resource"><span style="font-weight: 400;">User Profile</span></a>. <span style="font-weight: 400;">The attribute </span><code>promo_code</code><span style="font-weight: 400;"> is nullable here:</span></p>

<pre class=""><code class="language-json">&quot;Profile&quot;: {
	&quot;title&quot;: &quot;Profile&quot;,
	&quot;required&quot;: [
  	&quot;middle_name&quot;,
  	&quot;rider-id&quot;
	],
	&quot;type&quot;: &quot;object&quot;,
	&quot;properties&quot;: {
        &quot;first_name&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;description&quot;: &quot;First name of the Uber user.&quot;
        },
        ...
        &quot;promo_code&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: &quot;true&quot;,
            &quot;description&quot;: &quot;Promo code of the Uber user.&quot;
        }
    }
}</code></pre>
<p class=""><span style="font-weight: 400;">For more detail, please refer to the </span><a href="https://swagger.io/docs/specification/data-models/data-types/"><span style="font-weight: 400;">Null Property</span></a> <span style="font-weight: 400;">section in the OAS document.</span></p>

<h2 class=""><strong>Optional and Nullable Properties in APIMatic&#8217;s Client SDKs</strong></h2>
<p class=""><span style="font-weight: 400;"><a href="https://apimatic.io/">APIMatic</a> is a developer experience platform that focuses on increasing your API’s adoption with comprehensive documentation, multi-language SDKs, and much more. The SDKs are autogenerated for your API and contain support for optional and nullable properties, that are translated from your OpenAPI specification file. </span></p>
<p class=""><span style="font-weight: 400;">The client SDK is built up of a multitude of endpoints sending data from client to server with the help of parameters. Those parameters can be sent in different parts of a request and hence they are distinguished on the location in which they are sent. Endpoint parameters can be of four types:</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Query parameters</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Path parameters&nbsp;</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Body parameters</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Form parameters</span></li>
</ol>
<p class=""><span style="font-weight: 400;">These parameters can have multiple properties associated with them like their schema, description, summary, and more. </span><b>Required </b><span style="font-weight: 400;">and </span><b>nullable </b><span style="font-weight: 400;">are two of those properties that can be set for these parameters.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">During client and server communication, data is serialized from object to JSON string and gets deserialized from JSON string to an object. The data being passed in the parameters can be a simple field, or a model containing multiple fields. Model fields can have </span><em>required</em> <span style="font-weight: 400;">and </span><em>nullable</em> <span style="font-weight: 400;">properties in the same way as a request parameter itself. Regardless of the type of data being passed, </span><em>optional</em> <span style="font-weight: 400;">and </span><em>nullable</em> <span style="font-weight: 400;">is in context to the representation of that data in JSON string during serialization.</span></p>
<p class=""><span style="font-weight: 400;">An</span><strong> o</strong><span style="font-weight: 400;"><strong>ptional</strong> </span><span style="font-weight: 400;">property means that it may or may not be present in the resultant JSON string, while a </span><span style="font-weight: 400;"><strong>required</strong> </span><span style="font-weight: 400;">property means that it will always be present in the JSON string. </span><span style="font-weight: 400;"><strong>Nullable</strong> </span><span style="font-weight: 400;">means that if the property is present in JSON, it can hold a null value, and </span><strong>non-nullable</strong><span style="font-weight: 400;"> means that the value of that property cannot be null in the JSON string. Therefore, we can formulate a total of four combinations for this:</span></p>

<h3><b>1. Optional Nullable</b></h3>
<p class=""><span style="font-weight: 400;">If a field (whether it is a parameter or a part of a model) is uninitialized, i.e., not specified, then </span><span style="font-weight: 400;">it should be ignored in the JSON string during serialization. If it is initialized and assigned a null value explicitly, then it should be represented in the JSON string.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">Let&#8217;s consider the example of a model/definition </span><code>Profile</code><span style="font-weight: 400;"> which consists of the following fields:</span></p>

<pre class=""><code class="language-c">Profile
{
   string picture;
   string first_name;
   string middle_name;
   string last_name;
   string uuid;
   string rider_id;
   string email;
   bool mobile_verified;
   string promo_code;
}</code></pre>
<p class=""><span style="font-weight: 400;">Its OpenAPI specification looks like this:</span></p>

<pre class=""><code class="language-json">&quot;Profile&quot;: {
	&quot;title&quot;: &quot;Profile&quot;,
	&quot;required&quot;: [&quot;middle_name&quot;, &quot;rider-id&quot;],
	&quot;type&quot;: &quot;object&quot;,
	&quot;properties&quot;: {
  	&quot;first_name&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;description&quot;: &quot;First name of the Uber user.&quot;
  	},
  	&quot;last_name&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;description&quot;: &quot;Last name of the Uber user.&quot;
  	},
  	&quot;middle_name&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;nullable&quot;: &quot;true&quot;,
    	&quot;description&quot;: &quot;Last name of the Uber user.&quot;
  	},
  	&quot;email&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;description&quot;: &quot;Email address of the Uber user&quot;
  	},
        &quot;mobile_verified&quot;: {
    	&quot;type&quot;: &quot;boolean&quot;,
    	&quot;description&quot;: &quot;Mobile verification of Uber user&quot;
  	},
  	&quot;rider-id&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;description&quot;: &quot;Rider id of the Uber user&quot;
  	},
  	&quot;picture&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;description&quot;: &quot;Image URL of the Uber user.&quot;
  	},
  	&quot;promo_code&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;nullable&quot;: &quot;true&quot;,
    	&quot;description&quot;: &quot;Promo code of the Uber user.&quot;
  	}
    }
}</code></pre>
<p class=""><span style="font-weight: 400;">During the instantiation of <code>Profile</code>, if &nbsp;</span><code>promo_code</code><b>&nbsp;</b><span style="font-weight: 400;">is initialized with a null value in the client SDK and sent in the request, the resultant JSON string after serialization will hold its null value as its nullable property:</span></p>

<pre class=""><code class="language-json">{
    &quot;picture&quot;: &quot;https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg&quot;,
    &quot;first_name&quot;: &quot;Uber&quot;,
    ...
    &quot;mobile_verified&quot;: true,
    &quot;promo_code&quot;: &quot;null&quot;
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><code>promo_code</code><b>&nbsp;</b><span style="font-weight: 400;">is uninitialized during the <code>Profile</code> instantiation for the request, the resultant JSON will ignore <code>promo_code</code>, as it was an </span><b>optional </b><span style="font-weight: 400;">field.</span></p>

<pre class=""><code class="language-json">{
    &quot;picture&quot;: &quot;https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg&quot;,
    &quot;first_name&quot;: &quot;Uber&quot;,
    ...
    &quot;mobile_verified&quot;: true,
}</code></pre>
<p class=""><span style="font-weight: 400;">If &nbsp;</span><code>promo_code</code><b>&nbsp;</b><span style="font-weight: 400;">is initialized with a proper value during the <code>Profile</code> instantiation for sending it in the request, the resultant JSON will include the field as specified:</span></p>

<pre class=""><code class="language-json">{
    &quot;picture&quot;: &quot;https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg&quot;,
    &quot;first_name&quot;: &quot;Uber&quot;,
    ...
    &quot;mobile_verified&quot;: true,
    &quot;promo_code&quot;: &quot;uberd340ue&quot;
}</code></pre>
<h3><b>2. Optional Non-Nullable</b></h3>
<p class=""><span style="font-weight: 400;">If a field (whether it’s a parameter or a part of the model) is uninitialized, i.e., not specified, then </span><span style="font-weight: 400;">it should be ignored in JSON string during serialization but as it can not be initialized with a null value, hence we should ignore it JSON. Let’s look at the </span><code>Profile</code> <span style="font-weight: 400;">JSON schema again, where the attribute </span><code>picture</code><b>&nbsp;</b><span style="font-weight: 400;">is optional non-nullable as specified in the OAS of Profile.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">If </span><code>picture</code><span style="font-weight: 400;">&nbsp;is initialized with a non-null value when sending it in a request, the resultant JSON string will look like this:</span></p>

<pre class=""><code class="language-json">{
    &quot;picture&quot;: &quot;https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg&quot;,
    &quot;first_name&quot;: &quot;Uber&quot;,
    &quot;middle_name&quot;: &quot;null&quot;,
    &quot;last_name&quot;: &quot;Developer&quot;,
    &quot;uuid&quot;: &quot;f4a416e3-6016-4623-8ec9-d5ee105a6e27&quot;,
     ...
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><b><code>picture</code>&nbsp;</b><span style="font-weight: 400;">is initialized with a <strong>null</strong> value, it can be ignored in the resultant JSON as it is an optional attribute.</span></p>

<pre class=""><code class="language-json">{
    &quot;first_name&quot;: &quot;Uber&quot;,
    &quot;middle_name&quot;: &quot;null&quot;,
    &quot;last_name&quot;: &quot;Developer&quot;,
    &quot;uuid&quot;: &quot;f4a416e3-6016-4623-8ec9-d5ee105a6e27&quot;,
     ...
}</code></pre>
<h3 class=""><b>3. Required Nullable</b></h3>
<p class=""><span style="font-weight: 400;">Required Nullable attributes will always become part of the resultant JSON string as they are required. It will always be included in the JSON, whether it has a null or non-null value.&nbsp;</span><span style="font-weight: 400;">Let&#8217;s consider the </span><code>middle_name</code><b>&nbsp;</b><span style="font-weight: 400;">as a </span><strong>required nullable </strong><span style="font-weight: 400;">attribute.</span></p>
<p class=""><span style="font-weight: 400;">If </span><code>middle_name</code><b>&nbsp;</b><span style="font-weight: 400;">is initialized with a null value or uninitialized in the request, its JSON output will be:</span></p>

<pre class=""><code class="language-">{
   ...
    &quot;middle_name&quot;: &quot;Software&quot;,
    &quot;last_name&quot;: &quot;Developer&quot;,
    &quot;uuid&quot;: &quot;f4a416e3-6016-4623-8ec9-d5ee105a6e27&quot;,
   ...
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><code>middle_name</code><b> </b><span style="font-weight: 400;">is initialized with a proper value, the resultant JSON will be:</span></p>

<pre class=""><code class="language-json">{
    ...
    &quot;middle_name&quot;: &quot;faloola&quot;,
    &quot;last_name&quot;: &quot;Developer&quot;,
    &quot;uuid&quot;: &quot;f4a416e3-6016-4623-8ec9-d5ee105a6e27&quot;,
    ...
}</code></pre>
<h3><b>4. Required Non-Nullable</b></h3>
<p class=""><span style="font-weight: 400;">Required Non-Nullable attributes are also a </span><b>must </b><span style="font-weight: 400;">in JSON string during serialization. A null value is not allowed to be specified as <em>required</em> so it cannot be ignored.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">The </span><code>rider_id</code><b>&nbsp;</b><span style="font-weight: 400;">is a non-nullable attribute in the </span><span style="font-weight: 400;">Profile </span><span style="font-weight: 400;">schema. The null value cannot be specified in this case, and with a non-null value its resultant JSON will be:</span></p>

<pre class=""><code class="language-json">{
    &quot;picture&quot;: &quot;https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg&quot;,
    &quot;first_name&quot;: &quot;Uber&quot;,
    &quot;middle_name&quot;: &quot;null&quot;,
    &quot;last_name&quot;: &quot;Developer&quot;,
    &quot;uuid&quot;: &quot;f4a416e3-6016-4623-8ec9-d5ee105a6e27&quot;,
    &quot;rider_id&quot;: &quot;8OlTlUG1TyeAQf1JiBZZdkKxuSSOUwu2IkO0Hf9d2HV52Pm25A0NvsbmbnZr85tLVi-s8CckpBK8Eq0Nke4X-no3AcSHfeVh6J5O6LiQt5LsBZDSi4qyVUdSLeYDnTtirw==&quot;,
    &quot;email&quot;: &quot;uberdevelopers@gmail.com&quot;,
    &quot;mobile_verified&quot;: true,
    &quot;promo_code&quot;: &quot;uberd340ue&quot;
}</code></pre>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h2 class=""><strong>Conclusion</strong></h2>
<p class=""><span style="font-weight: 400;">It is entirely up to you how you incorporate the optional and nullable properties in your API calls. It is essential to handle null reference exceptions being thrown to the end-user, to avoid any unpleasant experience with your API. Learn more about what APIMatic offers for a comprehensive <a href="https://www.apimatic.io/features/">developer experience</a> and how you can generate feature-packed <a href="https://www.apimatic.io/account/register">SDKs with your API</a> in just a few clicks. Stay tuned for more blogs that go into detail on how optional and nullable properties can be implemented in Java, C#, Python, Ruby, PHP, and TypeScript.</span></p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/using-optional-and-nullable-properties-in-api-requests/">Using Optional and Nullable Properties in API Requests</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/using-optional-and-nullable-properties-in-api-requests/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The Great SDK Battle: Build vs Buy</title>
		<link>/blog/the-great-sdk-battle-build-vs-buy/</link>
					<comments>/blog/the-great-sdk-battle-build-vs-buy/#respond</comments>
		
		<dc:creator><![CDATA[Mehdi Raza Jaffery]]></dc:creator>
		<pubDate>Wed, 08 Sep 2021 08:10:28 +0000</pubDate>
				<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1407</guid>

					<description><![CDATA[<p>In this API-driven era, offering just an API won’t cut it anymore. The APIs need proper documentation, helping code samples, and SDKs to ensure that the end-user quickly gets to the first Hello World. While an SDK is a “make-it-or-break-it” deal for your API, it is just as difficult to get it right. Engineering the [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/the-great-sdk-battle-build-vs-buy/">The Great SDK Battle: Build vs Buy</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1407" class="elementor elementor-1407">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-1ed8f23b elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="1ed8f23b" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-694f00b6" data-id="694f00b6" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4dcf0310 elementor-widget elementor-widget-text-editor" data-id="4dcf0310" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="wp-image-1431 aligncenter" src="/wp-content/uploads/2021/12/build-vs-buy-1024x367.png" alt="SDKs: Build vs Buy" width="700" height="251"></p>
<p class=""><span style="font-weight: 400;">In this API-driven era, offering just an API won’t cut it anymore. The APIs need proper documentation, helping code samples, and SDKs to ensure that the end-user quickly gets to the first </span><i><span style="font-weight: 400;">Hello World</span></i><span style="font-weight: 400;">. While an SDK is a “make-it-or-break-it” deal for your API, it is just as difficult to get it right. Engineering the SDK is only the first step of this cycle. Once your SDK is published, it needs to be maintained consistently with each bug fix, feature, or new API version.</span></p>
<p class=""><em><span style="font-weight: 400;">This blog is the first part of a series on what goes behind SDK creation and maintenance.&nbsp;</span></em></p>

<h2 class=""><b>What to Look Out For While Creating SDKs?</b></h2>
<p class=""><span style="font-weight: 400;">From an engineering perspective, each phase of building an SDK is crucial and comes with its own set of challenges. In time-critical situations, you may overlook some issues that can impact your SDK’s usability and maintainability in the long run. Hence, while creating SDKs, you need to address these issues for </span><b>each API, in each language</b><span style="font-weight: 400;">:</span></p>

<h3 class=""><b>&nbsp;Step 1: Designing an SDK</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><b>Structure: <span style="font-weight: 400;">Need to design SDKs for the user, for future extensibility.</span></b></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Language versions:</b><span style="font-weight: 400;"> What min/max versions to support? What are the version-specific issues and your upgrade policy?</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Dependencies: <span style="font-weight: 400;">This includes fixes, workarounds, limitations, quality, upgrade policy, language support.</span></b></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Guidelines: <span style="font-weight: 400;">The design, linting, and static analysis guidelines to apply throughout the codebase.</span></b></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3 class=""><b>Step 2: Implementing the SDK</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Translate schema to concrete types</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Implementing API calls</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Wrap HTTP implementation in an HTTP layer as HTTP clients come and go, so you may consider a middleware arch</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle cancellation of API calls</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle API/transient errors and recover gracefully</span><span style="font-weight: 400;">&nbsp;(timeout, retries)</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle concurrency via thread-safe calls or chaining</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle response caching</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle API throttling</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Create interfaces for extension</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Log important events (integrate into system logging)</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3 class=""><b>Step 3: Testing the SDK</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Testing all parts of the SDK code</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Cross-platform/version testing against different language versions, OSes</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Integration tests (end-to-end testing of SDKs)</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Testing your code generator (if you&#8217;re using one)</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3><b>Step 4: Writing SDK Reference</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Writing getting started guides</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Writing usage examples for every endpoint</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Creating a reference website for the SDK user</span></li>
 	<li aria-level="1"><span style="font-weight: 400;">Creating sample applications (in addition to the code samples per endpoint) to get started quickly</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3 class=""><b>Step 5: Packaging/Publishing the SDKs</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Publishing packages on package repositories</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Recreating bugs reports</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handling customer issues and feedback related to SDK on GitHub or other forums</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<p class=""><span style="font-weight: 400;">The engineering effort required to maintain the SDK program explodes with the number of supported languages, as all the steps mentioned above for creating <b>one</b> SDK will need to be done for <b>each API and each language, every time</b>. Careful planning can reduce some of this cost, but the perpetual maintenance cost will still exist.</span></p>
<p class=""><img class="aligncenter wp-image-1426 " src="/wp-content/uploads/2021/12/SDK-1024x676.png" alt="SDK Maintenance" width="381" height="252"></p>

<h2 class=""><b>Why Do SDKs Need Maintenance?</b></h2>
<p class=""><span style="font-weight: 400;">Once you’ve successfully implemented and published your SDK, the endless cycle of maintenance begins. Maintenance is required from an engineering as well as a business perspective, hence making the cost of maintenance much higher than the development cost, as again, this applies to the SDKs of <strong>each language per API</strong>.</span></p>

<h3 class=""><b>Maintenance From Engineering Perspective</b></h3>
<p class=""><span style="font-weight: 400;">If you think creating an SDK is enough, updating it is much more resource and time-intensive. Technology and APIs are continuously evolving, and SDKs need to keep up with them. You will need to update your SDKs (on time!) for the following reasons:</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><b>Updates to the API</b><span style="font-weight: 400;">: With every update to the API, the SDKs need to be updated for all languages simultaneously or the SDKs will lag behind the API updates.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>New language or framework versions: </b><span style="font-weight: 400;">This occurs more often than you realize and is a major operational burden.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Language ecosystem evolution:</b><span style="font-weight: 400;"> New IDEs, new build tools, major fragmentation in the ecosystem requires constant maintenance.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>New dependency versions</b><span style="font-weight: 400;">: This results in more fixes, updates, security fixes, development of supported features.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Bug fixes in the SDK:</b><span style="font-weight: 400;"> You need to test and fix bugs continuously to ensure no blockers occur at the user’s end, negatively impacting your API’s experience.</span></li>
</ol>
<h3 class=""><b>Maintenance From Business POV</b></h3>
<p class=""><span style="font-weight: 400;">Apart from the high maintenance required by your SDKs to tackle engineering concerns, you also need to consider business-oriented issues that may affect your SDK delivery and performance:&nbsp;&nbsp;</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><b>Lock-in on internal SDK team: </b><span style="font-weight: 400;">A custom internal tool or process that requires maintenance and a lot of engineering time/resources.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Speed of update:</b><span style="font-weight: 400;"> SDKs and documentation lagging behind API releases unless you write a general-purpose code generator.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Opportunity cost:</b><span style="font-weight: 400;"> Can other areas in your API program use this engineering time?</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Time-to-market:</b><span style="font-weight: 400;"> If you&#8217;re just starting with building SDKs, when will they be available and what do you do in the meantime?</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Operational burden:</b><span style="font-weight: 400;"> Reduces developer velocity and happiness over time due to fighting fires, adds project risk to API program, increases costs for the organization.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Operational excellence:</b><span style="font-weight: 400;"> Can you achieve the same level of quality and attention to detail compared to a company that exists only for creating SDKs?</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Keeping the SDK program running:</b><span style="font-weight: 400;"> Maintaining SDKs takes time and energy. Building it isn’t where most of the expense lies. Instead, that comes with running and maintaining complicated processes and tools behind the SDK program.</span></li>
</ol>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<p class=""><span style="font-weight: 400;">According to </span><a href="https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm"><span style="font-weight: 400;">bls.gov</span></a><span style="font-weight: 400;">, the median salaries in 2020 were as follows:</span></p>

<ul class="">
 	<li><span style="font-weight: 400;">Developer: $110,140 per year</span></li>
 	<li><span style="font-weight: 400;">Tester: $110,140 per year</span></li>
 	<li><span style="font-weight: 400;">Technical Writer: $74,650 per</span></li>
</ul>
<p class=""><span style="font-weight: 400;">To make things simple, let’s assume that building a <strong>single SDK for 1 API in just one language</strong> (including research, documentation, and testing) takes 4 weeks to build. This makes the upfront cost around $22,687. Now add in the maintenance time to 2-3 days per month, and SDK maintenance can go up to $29,089, bringing the total to $51,776. Hence, building and maintaining <strong>a single SDK</strong> in a fairytale situation, without any hiccups, can cost around $52,000.</span></p>
<p class=""><span style="font-weight: 400;">Now imagine if you&#8217;re building SDKs for 8 languages for 10 APIs, this will skyrocket this figure to almost $4M.&nbsp;</span></p>


<figure id="attachment_1434" aria-describedby="caption-attachment-1434" style="width: 601px" class="wp-caption aligncenter"><img class="wp-image-1434 " src="/wp-content/uploads/2021/12/TotalCost-01-2-1024x576.png" alt="Total Cost to Build 1 SDK in 1 Language" width="601" height="338"><figcaption id="caption-attachment-1434" class="wp-caption-text">Total Cost to Build 1 SDK in 1 Language per API</figcaption></figure>
<h2 class=""><b>APIMatic as a Code Generator</b></h2>
<p class=""><span style="font-weight: 400;">You can choose to address all of the aforementioned issues yourself and write the SDK code by hand, or even try to solve your problems using an in-house code generator, but the process itself is quite hard and can take up to years to streamline. Not to forget the time and resource overhead involved. However, </span><a href="https://apimatic.io/"><span style="font-weight: 400;">APIMatic</span></a> <span style="font-weight: 400;">can handle these issues automatically at the back-end for you, while you focus on building new solutions. APIMatic’s flagship code generator creates SDKs for multiple languages, including:</span></p>

<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">PHP&nbsp;</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Ruby</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Python</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">C# (.NET)</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Java</span></li>
 	<li aria-level="1">Typescript (coming soon)</li>
</ul>
<p class=""><span style="font-weight: 400;">These SDKs are featured packed with thread-safe configurations, retries, logging, and more. The SDKs accurately map your API definition files into helper classes, model classes, exception classes, and controllers. APIMatic also creates comprehensive, language-specific guides with the SDKs that contain tailored tutorials based on your language and popular IDEs to help users easily get started with the SDK in their applications. For more detail, read here on </span><a href="https://docs.apimatic.io/generate-sdks/overview-sdks/"><span style="font-weight: 400;">APIMatic SDKs</span></a>.</p>
<p class=""><span style="font-weight: 400;">APIMatic creates SDKs from </span><b>OpenAPI 2.0 and 3.0, API Blueprint</b><span style="font-weight: 400;">, </span><b>RAML</b><span style="font-weight: 400;"> as well as several other popular </span><a href="https://www.apimatic.io/transformer/"><span style="font-weight: 400;">API specification formats</span></a><span style="font-weight: 400;">.</span></p>

<h3 class=""><b>Reduce Time to Market</b></h3>
<p class=""><span style="font-weight: 400;">Internal SDK programs can become costly to maintain over time due to churn (new API versions, language features, and library versions or API program engineering turnover). If you are forking open-source code generators, it means you will be maintaining all the custom templates and syncing your project with the upstream for fixes/bugs perpetually. Also, there is no customer support.</span></p>
<p class=""><span style="font-weight: 400;">APIMatic significantly cuts down on costs and time for creating and maintaining SDKs in any language. You only bring in your API specification file and roll out your updated</span><span style="font-weight: 400;"> SDKs in minutes, rather than weeks, months, or years.&nbsp;</span></p>

<h3 class="">Automate SDK Generation and Maintenance</h3>
<p class="">APIMatic offers programmatic access to their flagship Code Generator, which allows integrating the autogeneration of SDKs directly into your CI/CD pipelines. So every time the API is updated, the corresponding updated SDKs are automatically generated, without any manual interference. Learn more about how APIMatic offers <a href="https://www.apimatic.io/continuous-code-generation">CodeGen-as-a-Service</a>.</p>

<h3 class=""><b>Ensure Robustness with Battle-Tested SDKs</b></h3>
<p class=""><span style="font-weight: 400;">SDKs generated by APIMatic are already deployed by large companies and installed several million times, meaning that the SDKs are reviewed by a larger user base that helps us design better SDKs.</span></p>

<h2 class=""><strong>To Sum It Up</strong></h2>
<p class=""><span style="font-weight: 400;">Creating SDKs in multiple languages is quite resource-intensive and expensive. Apart from just development, a major chunk of time and resources is spent on maintaining the SDKs, both from an engineering and business point of view, for all languages for each API. APIMatic is a developer experience platform that takes care of all the SDK generation and maintenance work behind the scenes while your developers can focus on their applications and innovative solutions. See firsthand how APIMatic can help <a href="https://www.apimatic.io/account/register">enhance your developer experience</a>.</span></p>
<p class="">&nbsp;</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/the-great-sdk-battle-build-vs-buy/">The Great SDK Battle: Build vs Buy</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/the-great-sdk-battle-build-vs-buy/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Curating Postman Collections To Generate Quality API Documentation &#038; SDKs</title>
		<link>/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/</link>
					<comments>/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Thu, 08 Apr 2021 10:00:45 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Postman]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Api Description]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[postman collections]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic-blog.000webhostapp.com/?p=140</guid>

					<description><![CDATA[<p>Are you looking to provide a smooth developer experience with your APIs and as a result maximize API consumption? Then, you can’t really afford to put off API documentation as a last thought. After all, it is one of the critical pieces of any good developer experience program along with platform SDKs, code samples etc. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/">Curating Postman Collections To Generate Quality API Documentation &#038; SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="140" class="elementor elementor-140">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-18c89b1c elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="18c89b1c" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-7cf44855" data-id="7cf44855" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-3be71a1f elementor-widget elementor-widget-text-editor" data-id="3be71a1f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Are you looking to provide a smooth developer experience with your APIs and as a result maximize API consumption? Then, you can’t really afford to put off API documentation as a last thought. After all, it is one of the critical pieces of any good developer experience program along with platform SDKs, code samples etc.</p>
<p class="">Who are the end-users of a documentation, really? <strong>Humans</strong>. So, naturally, your API documentation can only be termed “good quality” if it comes with a human element in it— easy to read, navigate and comprehend. Similarly, a good quality SDK is one which is usable, idiomatic, comes bundled with language-specific documentation and is simple enough to be used by any average developer. This implies that <strong>user-friendliness</strong> is a key factor in determining the quality of your API developer experience program.</p>
<p class=""><a href="https://www.postman.com/" target="_blank" rel="noreferrer noopener">Postman</a> is a tool widely used by developers for API testing and for collaborating over APIs with teams. You can then easily export your API requests in the form of a Postman Collection file and use it to generate complete API documentation as well as SDKs. In this blog, I share a few tips to gear your API documentation and SDKs towards your developers from as early as your starting point — Postman requests and the resulting Postman Collection.</p>
<h2 class="">1. Assign a User Friendly and Unique Name to Your Postman&nbsp;Requests</h2>
<p class="">Let’s say you create a new request in Postman Collection and set its URL to something like <code>&lt;a href=&quot;http://i-am-just-an-example.com/dummy&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;http://i-am-just-an-example.com/dummy&lt;/a&gt;</code>&nbsp;.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/17MzqF90_GLGOfw3t7uso4w.png" alt="Where to set a request’s URL in Postman"></p>
<figcaption>Specify your request’s URL in Postman’s request&nbsp;UI</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Now, when you proceed to save this request, you’ll notice that Postman sets the request URL as the default name for your request. You can go ahead and save your request without changing this name and Postman won’t complain.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1ZpJ_c7rH5Ju8sVlsvRlSfA.png" alt="The dialog box that appears if you try to save your request in Postman"></p>
<figcaption>The dialog box that appears if you try to save your request in&nbsp;Postman</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Imagine having 50+ such requests in your Postman Collection, each with a name set as the request’s URL. Look how hard it is to locate a particular request in the left bar or in the documentation preview navigation:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1R3H8f2vXzAYd_MDq6pT0mw.png" alt="How a Postman Collection with lots of requests looks like if the requests’ default names are not changed"></p>
<figcaption>How a Postman Collection with lots of requests looks like if the requests’ default names are not&nbsp;changed</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">If you, as an API provider, are having trouble looking for a request, imagine how hard it will be for a completely new user looking to consume your API.</p>
<p class="">So, while Postman sets the request URL as your default name for a request to save you some time, it is highly recommended that you <strong>replace</strong> those names with ones which are more <strong>meaningful</strong>, <strong>short</strong> and <strong>user-friendly</strong>. Here is an example of <a href="https://www.apimatic.io/apidocs/apimatic/" target="_blank" rel="noreferrer noopener">APIMatic’s API</a> (ungrouped version) that I imported into Postman which makes better use of request naming:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/18hAcSdqQJ0bSIskfmG3QqA.png" alt="How a Postman Collection with lots of requests looks like if the requests’ default names are changed to more meaningful ones"></p>
<figcaption>How a Postman Collection with lots of requests looks like if the requests’ default names are changed to more meaningful ones</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>A good request name will, therefore:</p>
<ul class="">
<li>Be short and sweet — ideally less than 30 characters.</li>
<li>Ideally not contain any special characters/symbols.</li>
<li>Indicate the API resource you are trying to access/modify e.g. for APIMatic’s API this could be an “SDK”.</li>
<li>Indicate the action being performed on the API resource e.g. creating/generating an SDK.</li>
</ul>
<p class="">Of course, a good name is highly dependent on a good API design as well. However, generally speaking, your request name must at least clearly indicate to the user what he/she can achieve upon making this request.</p>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<h2 id="c437" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">2. Increase Discoverability ? — Group Related Requests</h2>
<p id="a218" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">In the previous section, you saw that the requests were thrown directly into a Collection without any grouping. To improve developer experience, you need to reduce the time it takes for your users to find a particular request/endpoint. Since Postman supports nesting, you should group related requests into&nbsp;<strong class="il jh">folders</strong>. Generally, all requests/endpoints dealing with a particular resource or feature should be grouped together. Here is what the&nbsp;<a class="cd ji" href="https://www.apimatic.io/apidocs/apimatic/" rel="noopener">APIMatic’s API</a>&nbsp;looks like after grouping:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep lp">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/15qhFoCGvNQnb8_OnEfhbbg.png" alt="What grouping requests in a folder in Postman looks like" width="1000" height="274"><figcaption class="wp-caption-text">What grouping requests in a folder in Postman looks like</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<h2 id="0594" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">3. Add Plenty of Descriptive Content in Your Postman Collections</h2>
<p id="ac80" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Your end-users are new to your API and know nothing about your offerings. Therefore, your documentation must be very clear and descriptive about everything. As a starting point, make sure that you have descriptions set for each of your important components in your Postman Collection.</p>
<p id="35cd" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Postman&nbsp;<a class="cd ji" href="https://learning.postman.com/docs/publishing-your-api/authoring-your-documentation/" rel="noopener">supports GitHub flavored Markdown syntax</a>so you can easily add any kind of descriptive content (lists, images, tables, etc.) pretty much everywhere including (but not limited to):</p>
<h3 id="782a" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.1. API Itself</h3>
<p id="98a8" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">A good place to inform your users what your API offers and how they can quickly gain access to its endpoints. Here is how Postman describes its API in its Postman Collection:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep mh">
<div class="mm s bz kk">
<div class="mn mo s">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1eKoeKSSAkYzStm2omxWsPw.png" alt="How descriptive content at API level is rendered in documentation" width="700" height="593"><figcaption class="wp-caption-text">How descriptive content at API level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="fa90" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.2. Folder Level</h3>
<p id="444e" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">When you click on a folder in the collection, you can add/edit its description (or documentation for newer Postman App versions). Here you can tell users more about what gels together the requests in this particular folder, e.g., which common feature they target or what common resource they are related to.</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep ms">
<div class="mm s bz kk">
<div class="mt mo s">
<div class="bv mi t u v mj aj dk mk ml">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1cRc_XuhnRHWsfHcAXP4_5Q.png" alt="How descriptive content at API level is rendered in documentation" width="700" height="239"><figcaption class="wp-caption-text">How descriptive content at folder level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="0c00" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.3. Request Level</h3>
<p id="a6ac" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">You can save a request’s description when saving/editing the request or later in the documentation section if you are using the latest Postman app. For request descriptions, tell users what the particular request/endpoint is expected to do, e.g., the kind of inputs it will accept and what it will return.</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep mu">
<div class="mm s bz kk">
<div class="mv mo s">
<div class="bv mi t u v mj aj dk mk ml">
<p class="mod-reset">&nbsp;</p>
</div>
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1tQMekQgXb9s3ZnTgUkEeHg.png" alt="How descriptive content at request level is rendered in documentation" width="700" height="265"><figcaption class="wp-caption-text">How descriptive content at request level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="9314" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.4. Request Parameters Level</h3>
<p id="2d0e" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">You can specify descriptions for your request parameters including query parameters and path variables. You can comment about what information that parameter stores and optionally any details related to the expected type of the parameter (a number, object or string, etc.) or any restrictions to its value, etc.</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep mw">
<div class="mm s bz kk">
<div class="mx mo s">
<div class="bv mi t u v mj aj dk mk ml">
<p class="mod-reset">&nbsp;</p>
</div>
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1A1R6_J_APXsxBjzBC-Jqsw.png" alt="How descriptive content at request params level is rendered in documentation" width="700" height="402"><figcaption class="wp-caption-text">How descriptive content at request params level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h2 id="d582" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">4. Don’t Forget the Examples!</h2>
<h3 id="2f63" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">4.1. Request Parameter Values</h3>
<p id="ecd4" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">During an API testing session, you must have provided some input values to the request parameters in order to get the response. If you have saved and published your collection with those values, they will show up in your documentation as examples, as can be seen below:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep my">
<div class="mm s bz kk">
<div class="mz mo s">
<div class="bv mi t u v mj aj dk mk ml">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1cOOkc3cv1pZEk1tdZ3edTQ.png" alt="How request params input values are rendered in documentation" width="700" height="266"><figcaption class="wp-caption-text">How request params’ input values are rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="7414" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">4.2. Request-Response Examples</h3>
<p id="4dfa" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Setting request values is not enough for giving a full picture of the capabilities of your particular request to your user. What happens if the user doesn’t send a required parameter? What happens if the parameter value is wrong? What happens if the user doesn’t authenticate the request? Luckily, Postman Collections have a<a class="cd ji" href="https://learning.postman.com/docs/sending-requests/examples/" rel="noopener">request-response example pair feature</a>&nbsp;where you can represent these scenarios easily. It is a bit hidden in the Postman app so it is quite likely that you probably missed it before. Click on the three dots next to the request’s name and choose “Add example”:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep na">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1p2tkfKricy8lxJO_YO3y8A.png" alt="How to add a request-response example from the request UI in Postman" width="1000" height="166"><figcaption class="wp-caption-text">How to add a request-response example from the request UI in Postman</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<p id="cef9" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">OR you can also save an example when you receive a response from your request in Postman, using the “Save an example” option:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nb">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1tc0XNxStG3dRSkougAVJKA.png" alt="How to add a request-response example from real response data in Postman" width="1000" height="263"><figcaption class="wp-caption-text">How to add a request-response example from real response data in Postman</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<p id="ee37" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Remember, that these examples are essentially request-response pairs which means that each response is tied to a particular request. To make the best use of this feature, there are a few things to keep in mind:</p>
<h4 id="f528" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx"><strong class="il jh">Examples Should Cover All Possible Response Status Codes</strong></h4>
<p id="175d" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Ideally, your examples should cover all possible response status codes<strong class="il jh">&nbsp;</strong>that your API request can return e.g. success codes in the range 2XX and error codes in the ranges 4XX and 5XX.</p>
<h4 id="a3da" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx"><strong class="il jh">Assign Unique Identifiers</strong></h4>
<p id="8b50" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Don’t forget to assign a short meaningful identifier to each request-response example pair. The identifier should summarize what scenario this example represents e.g. a success/error case. Postman groups together the examples tied to a particular request using these identifiers as you can see below:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nc">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1l4Rsv_8rPDiurLqJeXOkGQ.png" alt="Examples belonging to the same request can be navigated using the dropdown menu in documentation" width="700" height="593"><figcaption class="wp-caption-text">Examples belonging to the same request can be navigated using the dropdown menu in documentation.</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h2 id="9073" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">5. Setup Authentication Properly ?</h2>
<p id="ef39" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">For API testing, plenty of developers tend to pass the&nbsp;<code class="kk kl km kn ko b">Authorization</code>&nbsp;header directly for authenticating their requests. This is not recommended unless you have a really custom authentication flow. Postman&nbsp;<a class="cd ji" href="https://learning.postman.com/docs/sending-requests/authorization/" rel="noopener">natively supports various authentication types</a> that can be applied globally at API level and can also be overridden in individual requests e.g. OAuth 2.0 flows, Basic authentication, API keys etc. Setting up the right authentication flow for your API and requests within Postman helps configure your Postman Collection correctly. This in turn improves the documentation by enabling documentation generators to generate relevant authentication sections as shown below:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nd">
<div class="mm s bz kk">
<div class="ne mo s">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1hBSxhv2TkaVbCU94Uu5dhg.png" alt="Auto-generated sections in Postman if authentication is properly setup" width="700" height="433"><figcaption class="wp-caption-text">Auto-generated sections in Postman if authentication is properly setup</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h2 id="6705" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx"><strong class="bc">Taking Your Postman Collection Beyond API Documentation via&nbsp;</strong>APIMatic ?</h2>
<p id="6b40" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph=""><a class="cd ji" href="https://apimatic.io/" rel="noopener">APIMatic</a> offers a customizable&nbsp;<a class="cd ji" href="https://www.apimatic.io/developer-experience-portal" rel="noopener">developer experience solution</a>&nbsp;that comes bundled with rich features like SDKs, reactive code samples, API explorer, API description transformations and much more beyond simple API docs. If you are looking to generate your API documentation and SDKs in APIMatic from a Postman Collection, there are a few additional trips and tricks to improve the quality of generated documentation:</p>
<h3 id="80ea" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Make Your Request Names Code Generation Friendly</h3>
<p id="fa5f" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Since APIMatic’s documentation comes bundled with language-specific features like SDKs and reactive code samples in addition to the HTTP reference documentation, we expect users to take extra care of request naming conventions. This is because the request names from your Postman file are used for generating controller names and SDK components as part of the portal generation process. Therefore, names that are too long (greater than 50 characters) or use special characters are not recommended.</p>
<h3 id="e767" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Tweak Imported Models If Necessary ?</h3>
<p id="18a3" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">A unique feature of APIMatic is that we infer complex models from your request/response example values (at the time of importing the Postman Collection) to improve your experience with our SDKs/portal. To ensure that the models generated are a true representation of your API, here are a few additional recommendations:</p>
<ul class="">
<li id="8f32" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Examples must be valid and thorough</strong></li>
</ul>
<p id="04cc" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">The examples provided in the Postman Collection must be valid, thorough and ideally cover all possible properties in case complex objects are involved.</p>
<ul class="">
<li id="d278" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Fine-tune model information that can’t be deduced from examples</strong></li>
</ul>
<p id="f815" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Deducing models from examples may not always result in complete type information and may also not be 100% accurate every time. For example, it is not always apparent whether a particular property in the object is required or optional, whether a numeric property allows only integers or bigger values like long, double as well, etc. This is one big reason why formats like OpenAPI, RAML and others have a proper type system which Postman does not have. However, after your models are imported, you can always fine-tune<strong class="il jh">&nbsp;</strong>them in&nbsp;<a class="cd ji" href="https://www.apimatic.io/dashboard" rel="noopener">APIMatic’s API editor</a>&nbsp;to get the same behavior.</p>
<ul class="">
<li id="83a6" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Deduplicate models</strong></li>
</ul>
<p id="ebfc" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Since it is quite possible that two different components have very similar examples, therefore, the generated models may be, e.g., a subset of each other. While detecting this during the import process is not exactly possible, you can, however, deduplicate the models in the editor after the import process to improve the quality of the output documentation/SDKs.</p>
<ul class="">
<li id="68ee" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Improve generated model names</strong></li>
</ul>
<p id="133b" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">The names of the generated models are assigned based on the names of the component for which the example was provided. To prevent model name duplication in such cases, a number may be appended with the model names. For example, if you have a parameter named “status” in two requests A and B where both these parameters have different examples, it is possible that the generated models from these examples can end up with names like “status1” and “status2” respectively. To improve the output for such cases, you can upload our&nbsp;<a class="cd ji" href="https://docs.apimatic.io/advanced/apimatic-metadata" rel="noopener">Metadata file</a>&nbsp;along with your Postman Collection in the form of a ZIP file during import, with the “AppendParentNameForClashes”&nbsp;<a class="cd ji" href="https://docs.apimatic.io/advanced/apimatic-metadata/#import-settings" rel="noopener">import setting</a>&nbsp;enabled. As the name suggests, this will append the parent component’s name instead of a number at the end of the model name which will add more context and improve the overall output.</p>
<h3 id="4ff8" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Upload Environment Files</h3>
<p id="af69" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">If your Postman Collection makes use of environment variables, it is highly recommended that you upload your environment files along with your Postman Collection in the form of a ZIP file at the time of importing your file into APIMatic. These variables have no meaning in an API documentation, therefore, providing these files will help us resolve their values and display them properly.</p>
<h3 id="972b" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Add Markdown Guides</h3>
<p id="e11d" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Once you generate the API documentation in APIMatic from your Postman Collection, feel free to add additional quick-start&nbsp;<a class="cd ji" href="https://docs.apimatic.io/developer-experience-portal/customizing-your-portal/#guides" rel="noopener">custom Markdown guides</a>.</p>
<h2 id="4568" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">Generating Documentation from Postman Collection in APIMatic — A Quick Demo ?</h2>
<p id="ba7a" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Generating documentation in APIMatic involves a few quick steps which are explained below:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nf">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1EA0ELZNUDGgotEjR5h2Z6A.gif" alt="Curating Postman Collections To Generate Quality API Documentation &amp;&nbsp;SDKs. Workflow for previewing a portal from your Postman Collection in APIMatic with just a few clicks" width="1000" height="563"><figcaption class="wp-caption-text">Workflow for previewing a portal from your API description file in APIMatic with just a few clicks</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<ul class="">
<li id="bc4c" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><a class="cd ji" href="https://apimatic.io/account/register" rel="noopener">Sign up to APIMatic</a>, if you haven’t already.</li>
<li id="0b27" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph=""><a class="cd ji" href="https://docs.apimatic.io/getting-started/manage-apis/#add-an-api" rel="noopener">Import</a>&nbsp;your Postman Collection to the&nbsp;<a class="cd ji" href="https://apimatic.io/dashboard" rel="noopener">APIMatic Dashboard</a>&nbsp;by either uploading the file from your local system or providing a public URL.</li>
<li id="40e1" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">Your file will be validated. If there are any errors found during validation, you may need to resolve the issues before proceeding ahead.</li>
<li id="60f7" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">Once your file gets imported, click on the “Generate” button on the imported API entity.</li>
<li id="1202" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">Click on “Preview API Portal”.</li>
<li id="fda7" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">You will then be taken to the preview of your portal.</li>
</ul>
<p id="6df9" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">From there onwards, you can play around with your portal, generate SDKs or publish and customize the portal to suit your needs better. Please check out our documentation on&nbsp;<a class="cd ji" href="https://docs.apimatic.io/getting-started/previewing-your-first-portal/" rel="noopener">generating feature-packed API documentation</a>&nbsp;to learn more. Happy documenting! ?</p>
</div>
</div>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/">Curating Postman Collections To Generate Quality API Documentation &#038; SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>How to Create SDKs for your API in less than a Minute ⏰</title>
		<link>/blog/how-to-create-sdks-for-your-api-in-less-than-a-minute/</link>
					<comments>/blog/how-to-create-sdks-for-your-api-in-less-than-a-minute/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 26 Nov 2018 11:27:02 +0000</pubDate>
				<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Programming]]></category>
		<category><![CDATA[Sdks]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=553</guid>

					<description><![CDATA[<p>Having a quality Developer Experience does not stop at having great API docs. You need to provide client or helper libraries in the form of SDKs (Software Development Kits) to help accelerate the API consumption process. Many API experts and gurus over the years have advocated the importance of shipping out SDKs with APIs, including: [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/how-to-create-sdks-for-your-api-in-less-than-a-minute/">How to Create SDKs for your API in less than a Minute ⏰</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="553" class="elementor elementor-553">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-16a5e6e1 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="16a5e6e1" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-5cc2933e" data-id="5cc2933e" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-1ca8595 elementor-widget elementor-widget-text-editor" data-id="1ca8595" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-554 aligncenter" src="/wp-content/uploads/2021/12/1_NgUaKbvONyap68fNeb11OQ.jpg" alt="How to Create SDKs for your API in less than a Minute using APIMatic" width="800" height="350"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="74c5" class="">Having a quality Developer Experience does not stop at having great API docs. You need to provide client or helper libraries in the form of SDKs (Software Development Kits) to help accelerate the API consumption process. Many API experts and gurus over the years have advocated the importance of shipping out SDKs with APIs, including:</p>
<blockquote class="wp-block-quote">
<p><a href="https://www.linkedin.com/in/kinlane/">Kin Lane</a>the&nbsp;<a href="https://apievangelist.com/">API Evangelist</a>, for whom SDKs form an important part of the&nbsp;<a href="https://apievangelist.com/2018/07/12/my-api-lifecycle-checklist-and-scorecard/"> Developer Experience checklist.</a></p>
<p><a href="https://www.linkedin.com/in/kvantomme/">Kristof Van Tomme </a>who lists SDKs as one of the&nbsp;<a href="https://nordicapis.com/how-bad-developer-portals-kill-apis/">eight important key features</a>&nbsp;of every successful developer portal.</p>
<p><a href="https://www.linkedin.com/in/duvander/">Adam Duvander</a><strong>,&nbsp;</strong>whose&nbsp;<a href="https://everydeveloper.com/developer-experience/">DX Index</a>&nbsp;comprises 13 separate criteria, each weighted according to importance. At top of the list, lies libraries available in popular languages.</p>
</blockquote>
<p id="e648" class="">It is no longer enough to expose your API endpoints with just the HTTP Docs or API references. You need to attract developers with platforms that are native to them, you need to enable them to comfortably play around with your code, and this is what SDKs help with.</p>
<p id="1305" class=""><mark>In simpler terms, SDKs are like a cockpit for your API, they put your consumers into the driving seat and ensure that they feel powerful and in total control!</mark></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-555 aligncenter" src="/wp-content/uploads/2021/12/1_VupZPPjtjhb2QeaWFQr0jQ.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="c145" class="">Many API Providers after accepting the need of giving out SDKs, ponder over what languages should they offer them in? The golden answer for this is as many as you can. Developers today are working with a number of languages and platforms, the diversity when it comes to adoption of new technology is all time high. According to a survey on&nbsp;<a href="https://www.programmableweb.com/news/what-programming-language-most-popular-apis/2013/06/03"> Programmable web</a>, these are the languages programmers are using the most to consume APIs:</p>
<ol class="">
<li>PHP</li>
<li>Python</li>
<li>Ruby</li>
<li>.NET / C#</li>
<li>Java</li>
<li>Perl</li>
<li>ColdFusion</li>
<li>Node.js</li>
<li>ActionScript</li>
</ol>
<p id="aa4d" class="">Some of these languages may be losing popularity, and new languages are being adopted day by day but the fact still remains that APIs are being consumed in multiple languages and you need to cater the need.</p>
<p id="54ab" class="">Which again gives birth to the question:</p>
<h2 id="97f0" class="">How are you going to create SDKs in all these languages?</h2>
<p id="2d24" class="">While it may seem easy, writing client libraries for an API that you wrote yourself, it’s not so simple. It does not only require hours of redundant labour work but also a number of resources, loads of time and a lot of testing, making SDKs more of a chore. Companies who have the $$$ and resources to build in-house SDKs with language experts are at an advantage, leaving the rest dreaming.</p>
<p id="60c0" class="">Maintaining SDKs is a whole different story. Even companies with huge API teams struggle to update their SDKs on time. APIs tend to evolve and version over time and with every new update, the SDKs go obsolete. Reflecting these changes across SDKs in multiple languages in a way that does not break things is tough, time-consuming work.</p>
<p id="8a6b" class=""><mark>Simple maths reveal that around 83% of the total SDK cost comes from keeping it up to date and bug-free after every API update.</mark></p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-556 aligncenter" src="/wp-content/uploads/2021/12/1_1cyAbmzqIEDsFn6W2GIf0A.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9cff" class="">Its safe to assume that in order to write a single SDK, a developer who is proficient enough to write idiomatic code is required full time. Assuming the developer takes a week to build and test that SDK on a pay rate of $46/hour (bls.gov), then the cost turns out to be $1,852 for SDK in one language.</p>
<p id="67a2" class="">Cost of maintaining an SDK although depends on many variables like how frequent the API is changed or what’s the size of the library. For the sake of simplicity let’s assume it takes two days a month on average for a developer to maintain an SDK. With same cost assumptions, the burn turns out to be $8,885 for maintaining a single SDK over a year. Summing up both building and maintenance cost gives us a figure of $11,000 per API per SDK per language.</p>
<p id="e055" class="">Multiply this by the number of languages or APIs, we’re looking at sizeable costs, for just manually writing and maintaining SDKs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-557 aligncenter" src="/wp-content/uploads/2021/12/1_Czg0DEbC41Fx0Az2AaEU4g.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="2b93" class="">Not to mention the delays in time-to-market caused by making changes in API(s), reflecting them in Client libraries, checking for breaking changes and finally releasing updated documentation.</p>
<p id="2bec" class="">The SDK dream with all the $$$ and effort involved turns into an SDK nightmare. With many even questioning their worth and value.</p>
<blockquote class="wp-block-quote">
<p><em>“Necessity is the mother of Invention”</em></p>
</blockquote>
<p id="5197">Over years scientists and engineers have worked hard to replace redundant work with automation, that’s how the first wheels, machines and engines were made.</p>
<p id="c8ad">And as soon a need was recognized to automate the laborious process of creating SDKs, birth was given to code generators for APIs.</p>
<h2 id="afce">What are Code Generators?</h2>
<p id="69eb" class="">Code Generators are the engines which enable automatic generation of SDKs. They have now been around for some years but are still a new concept in the API space. The objective is to use your API Specification as a single source of truth to derive fully working functional SDKs out of them in minutes.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-558 aligncenter" src="/wp-content/uploads/2021/12/1_FLECCuyGQLDzoeCoxHdYCA.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="faa4" class="">The APIMatic CodeGen Engine takes in an API Specification in any format (Swagger/OpenAPI, RAML, API Blueprint etc.), and spews out fully functional SDKs, complete with:</p>
<ul class="">
<li>Client Libraries</li>
<li>Dynamic Code Samples</li>
<li>Documentation</li>
<li>Getting Started Guides</li>
</ul>
<p id="b2d9">And all of that in a variety of programming languages!</p>
<p id="7fb8">Unlike every piece of revolutionary technology in history, CodeGen Engines have amassed a number of critics and sceptics, who argue how something so complex can be achieved in minutes like that. Good thing for us, it is science, not magic. And every concept of science has an explanation to it.</p>
<p id="f6bc">Here’s what we do to generate SDKs automatically for you:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-559 aligncenter" src="/wp-content/uploads/2021/12/1_yD9ALr6xQvOo3aD0Rg6GXg-1-1024x630.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:list -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<ol class="">
<li>Take API Description in any popular format</li>
<li>Convert it to our Standard Description Language (SDL) or the APIMatic format</li>
<li>Run a series of validations</li>
<li>Loop different parts of the API description and generate code representations</li>
<li>Convert important entities from an API Description to SDK.</li>
<li>Generate an HTTP abstraction layer to wrap the HTTP client</li>
<li>Generate one or more helper class files to abstract out a lot of the common code from the SDK</li>
<li>Provide a client library interface to wrap the SDK and make it easier to use.</li>
<li>Generate language or platform-dependent files, such as gemspec, Gemfile and Rakefile are generated for Ruby SDKs</li>
<li>Generate Readme files, Getting Started Guides, Code Samples and Documentation</li>
<li>Package everything in zip files ready to be deployed on GitHub or designated repos</li>
</ol>
<p id="0517" class="">Now all of that may sound like a really complicated process, but we believe API Providers should not be worrying about this. APIMatic is here to do the hard work, we are here to produce fully functioning quality SDKs, and to achieve all of this from signup to your first SDK Generation,&nbsp;<strong>take up less than a minute</strong>. Use APIMatic’s CodeGen API to build the engine into your CI/CD pipeline and never worry about updating SDKs ever again!</p>
<p id="59af" class="">Another question that bugs many providers is what if they want their SDKs to follow certain conventions. Luckily they do not have to worry, APIMatic’s CodeGen Engine does not produce generic, one fit all SDKs. With our CodeGen settings, we allow providers to chose what works or does not work for them such as</p>
<ol class="">
<li>Automatic appending of JSON accept and content-type headers</li>
<li>Allowing skipping of SSL Certificate validation</li>
<li>Setting timeouts for endpoint calls</li>
<li>Perform linting</li>
</ol>
<p id="4c14" class="">Furthermore, we can make more customisations to the engine and mould it to the specific requirement of providers as a premium offering.</p>
<p id="94bd">APIMatic’s CodeGen Service is more than just a Code Generator, it’s an entire platform. Where you can</p>
<ol class="">
<li>Maintain, edit and manage different version of API specifications</li>
<li>Publish generated SDKs on Github or package repositories</li>
<li>Host SDKs on completely customisable Developer Portals, complimented with Reference Docs Live and Dynamic Code Samples</li>
</ol>
<p id="5a60" class="">Not sure how you can build in the API Code Engine to your pipeline? Reach out to us today to book a Demo!</p>
</div>
</div>
</div>
</div>
<!-- /wp:list -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/how-to-create-sdks-for-your-api-in-less-than-a-minute/">How to Create SDKs for your API in less than a Minute ⏰</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/how-to-create-sdks-for-your-api-in-less-than-a-minute/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Redesigning APIs at APIMatic — A Case Study</title>
		<link>/blog/redesigning-apis-at-apimatic-a-case-study/</link>
					<comments>/blog/redesigning-apis-at-apimatic-a-case-study/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Wed, 17 Oct 2018 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Developer Portal]]></category>
		<category><![CDATA[Documentation]]></category>
		<category><![CDATA[Rest API]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=584</guid>

					<description><![CDATA[<p>Ever since the start of the year, the top priority for us at APIMatic was to improve the packaging of our products and features. We launched the Developer Experience Portal, added package publishing capabilities to our eco-system, added curl commands to our console, revamped our Developer Portal to optimize loading speeds and so on. With [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/redesigning-apis-at-apimatic-a-case-study/">Redesigning APIs at APIMatic — A Case Study</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="584" class="elementor elementor-584">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-10a05dcd elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="10a05dcd" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-57309f88" data-id="57309f88" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-58c4ed1 elementor-widget elementor-widget-text-editor" data-id="58c4ed1" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-585 aligncenter" src="/wp-content/uploads/2021/12/1_a6X94xx-nFIRIcmtgdoBMQ.gif" alt="Redesigning APIs at APIMatic — A Case Study " width="800" height="350"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="5a6f" class="">Ever since the start of the year, the top priority for us at APIMatic was to improve the packaging of our products and features. We launched the Developer Experience Portal, added package publishing capabilities to our eco-system, added curl commands to our console, revamped our Developer Portal to optimize loading speeds and so on.</p>
<p id="d891" class="">With our new products and offerings, we needed new APIs to allow our users to more points of access. This gave us a perfect opportunity to revamp our existing APIs as well, which were developed for internal use only and were never designed to have the perfect structure, naming or performance. However when duty called</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-586 aligncenter" src="/wp-content/uploads/2021/12/1_72RiNGLJyCaMiS0hSTEMXA.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">we rose up to the occasion and revamped our entire infrastructure to make the perfect little REST APIs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-587 aligncenter" src="/wp-content/uploads/2021/12/1_fWpRAux4xe7_4XN6lUk7NA.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="cc21">Goals</h2>
<p id="0c14" class="">Developer Experience is the most important metric to measure the quality of an API. For us at APIMatic it is the rule of law, it’s the word of god, it’s everything. We have always preached the idea of well-designed APIs that are super easy to use and make the life of developers easy. An API is not a random chunk of code, it’s an interface, and like any interface, you need to make sure that the experience you’re providing is as smooth and seamless as possible because that is what developers are looking for.</p>
<p id="284f" class="">With developer experience as the goal post, the direction we took for implementing our new APIs was very clear. Let’s briefly look at the fundamental concepts that were under consideration throughout the development cycle:</p>
<ul class="">
<li><strong>Stable&nbsp;</strong>and even more importantly&nbsp;<strong>Scalable</strong>&nbsp;APIs.</li>
<li>Making our APIs&nbsp;<strong>truly RESTFUL&nbsp;</strong>by adhering to the&nbsp;<strong>constraints</strong>&nbsp;of&nbsp;<em>REST</em>&nbsp;as much as possible.</li>
<li>Ensure&nbsp;<strong>backward compatibility</strong>&nbsp;for our public APIs.</li>
<li>Focusing on&nbsp;<strong>simplicity</strong>,<strong>&nbsp;extensibility</strong>,<strong>&nbsp;reliability,&nbsp;</strong>and<strong>&nbsp;performance</strong>.</li>
<li>Sticking to popular&nbsp;<strong>standards&nbsp;</strong>to create&nbsp;<strong>uniformity</strong>&nbsp;in the code.</li>
<li>Prioritize&nbsp;<strong>naming</strong>&nbsp;and making it&nbsp;<strong>consistent</strong>&nbsp;across the application.</li>
<li>Improving the&nbsp;<strong>readability</strong>&nbsp;and&nbsp;<strong>structuring</strong>&nbsp;of the code to optimize it for incremental upgrades in the future.</li>
<li>Creating the APIs to be easily&nbsp;<strong>testable&nbsp;</strong>and then writing&nbsp;<strong>Unit Tests&nbsp;</strong>for them.</li>
</ul>
<h2 id="d943">The Richardson Maturity Model</h2>
<p id="a20e" class="">The Richardson Maturity Model is a great way to grade your API according to the constraints of REST. The better your API adheres to these constraints, the higher its score is. The Richardson Maturity Model knows 4 levels (0–3), where level 3 designates a truly RESTful API.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<figure id="attachment_588" aria-describedby="caption-attachment-588" style="width: 700px" class="wp-caption aligncenter"><img class="wp-image-588" src="/wp-content/uploads/2021/12/0_4wRhEvmnQLwjpF2q.png" alt="Courtesy: nordicapis.com" width="700" height="429"><figcaption id="caption-attachment-588" class="wp-caption-text">Courtesy: nordicapis.com</figcaption></figure>
<figcaption></figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="4383" class="">Our previous APIs were&nbsp;<strong>Level 0</strong>;&nbsp;<em>RESTful</em>&nbsp;only in name as they were only using&nbsp;<em>HTTP</em>&nbsp;to send requests and receive responses without utilizing the full potential of&nbsp;<em>HTTP</em>. The APIs were used only to invoke remote mechanisms based on remote procedure call. There was some&nbsp;<strong>leveling up&nbsp;</strong>required, and that’s what we did.</p>
<blockquote class="">
<p id="a233" class=""><em>You can read all about the best practices to design your API from scratch here:</em><a href="https://apimatic.io/blog/2018/03/building-rest-apis-the-right-way" target="_blank" rel="noreferrer noopener"> Best Practices to Increase API Adoption</a></p>
</blockquote>
<h2 id="035d" class="">Resources</h2>
<p id="e357" class="">A resource is one of the most essential part of&nbsp;<em>REST</em>. Resource is an object or representation of something, which has some data associated with it and there can be a set of methods to operate on it. According to&nbsp;<em>REST&nbsp;</em>the URI should only contain resources(nouns) not actions or verbs.<em>&nbsp;The paths should contain the plural form of resources and the HTTP method should define the kind of action to be performed on the resource</em>. We identified our resources to be:</p>
<ul class="">
<li><strong>Transformation:</strong>&nbsp;A single resource describing all the relevant information of the&nbsp;<em>Transformation</em>&nbsp;of an API description from one format to another. The transformation is tied to the&nbsp;<em>User</em>.</li>
<li><strong>API Entity Code Generation:&nbsp;</strong>A single resource describing all relevant information of a code generation performed from an API description already stored with us. The&nbsp;<em>API Entity Code Generation</em>&nbsp;is tied to the&nbsp;<em>API Entity</em>&nbsp;for which the SDK is generated.</li>
<li><strong>User Code Generation:</strong>&nbsp;A single resource describing all relevant information of a code generation performed from an API description provided by the user as file or URL. The&nbsp;<em>User Code Generation&nbsp;</em>is tied to the&nbsp;<em>User</em>.</li>
</ul>
<p id="e0cf" class="">The 3 new APIs are based on these 3 resources, with each resource having its specific API and each API having many endpoints. These corresponding database models of these resources were also added to the old CodeGen and Transformer APIs as well, to ensure&nbsp;<em>backward compatibility</em>&nbsp;for our public APIs. Increased our score from&nbsp;<strong>Level 0&nbsp;</strong>to&nbsp;<strong>Level 1</strong>. Are we happy with this? Yes; can we go higher? 100%.</p>
<h2 id="02be">HTTP Methods and Status Codes</h2>
<p id="e881" class="">HTTP has defined few sets of methods which indicate the type of action to be performed on the resources. The URL is a sentence, where resources are nouns and HTTP methods are verbs. Aspiring to achieve true RESTful-ness for our APIs we used HTTP methods instead of using a single method for all requests, for instance,&nbsp;<em>GET&nbsp;</em>when requesting resource and&nbsp;<em>DELETE&nbsp;</em>when deleting resources and so on.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">// Request:
GET /transformation/1

// Response:
HTTP/1.1 200 OK
{
   exportFormat: &quot;APIMATIC&quot;
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="dac4" class="">Similarly, HTTP has defined a bunch of standardized codes which let the client know the feedback, whether the request failed, passed or the request was wrong. For the sake of correct&nbsp;<strong>Developer Experience,&nbsp;</strong>our API should always return the right HTTP Status Code. e.g. 200 OK for successful retrieval of resource and 404 Not Found if the requested resource doesn’t exist.</p>
<h2 id="7ec4" class="">Content-Type based routing</h2>
<p id="a935" class="">While writing the new APIs we came across a few cases where we needed a different action performed for the same resource and the same HTTP verb e.g. creating (<em>POST</em>) a&nbsp;<em>Transformation&nbsp;</em>with a File and creating (<em>POST</em>) a&nbsp;<em>Transformation&nbsp;</em>with a URL. In such a case where we wanted even finer-grain control over the routing mechanics, we ended up routing them to different actions based on the content-type header. We implemented a custom version of the&nbsp;<em>Route</em>&nbsp;attribute which adds a Content-Type parameter that gets evaluated when a request is being routed. And now we had a single path (e.g. POST: “api/transformations”) that accepts both binary and JSON data and routes them to a different action.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-589 aligncenter" src="/wp-content/uploads/2021/12/0_Jmjfvx3qVgg-gwqr.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="1316" class="">Repository Design Pattern</h2>
<p id="4fbd" class="">The new APIs were implemented on the&nbsp;<em>Single Responsibility Rule&nbsp;</em>and the&nbsp;<em>Repository Design Pattern</em>. It leverages a layer that isolates the APIs from the details of database access code. In large systems such as ours adding this layer helps minimize duplicate query logic. The repository (or as it’s called in our codebase; a manager) acts as an in-memory object collection. Objects are added and removed from the repository and the code encapsulated by the repository carries out the appropriate operations behind the scenes. The API is completely unconcerned about the underlying mechanism of getting the data or even the kind of database being used; it could be a&nbsp;<em>MongoDB</em>&nbsp;or&nbsp;<em>SQL</em>&nbsp;database being accessed inside the repository using whatever&nbsp;<em>ORM&nbsp;</em>or<em>&nbsp;Querying mechanism</em>, the controller would just call the relevant method of the repository to get the data it requires.</p>
<h2 id="c7a1" class="">Documentation</h2>
<p id="c3be" class="">The new APIs were written to be self-documenting, we tried to make things as self-explanatory as possible. Here’s a work in progress version of a documentation generated using APIMatic tools:&nbsp;<a href="https://www.apimatic.io/apidocs/apimatic/v/1_0#/java/getting-started">Preview Docs</a></p>
<p id="0401" class="">The taxonomy and naming convention we advised can easily be picked by documentation rendering tools to name our endpoints in a way that even a layman can understand.</p>
<h2 id="b3df" class="">Unit Tests</h2>
<p id="e1e6" class="">Writing unit tests for code results in fewer bugs in production and fewer bugs in production means more time for making cool new features. It’s usually good practice to have automated unit tests while writing code. Doing so helps find bugs early in the development cycle and saves time in the long run. These tests can be run multiple times to verify the behavior of a particular unit of code for different sets of input.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-590 aligncenter" src="/wp-content/uploads/2021/12/0_7_VFkkAKg2k-8R21.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8989">We used NUnit to write&nbsp;<em>unit tests&nbsp;</em>for the data access layer and plan on expanding test coverage to the rest of the codebase, it’s a good start but we’ve got a long way to go when it comes to automated unit testing.</p>
<h2 id="e891" class="">Hypermedia</h2>
<p id="2956" class="">Level 3, the highest level, uses HATEOAS to deal with discovering the possibilities of your API towards the clients. This is our end goal for the APIs to completely satisfy the REST constraints. We have already started working towards this.</p>
<p id="2250" class="">We would soon be launching our new APIs publicly, once they are completely tried and tested. Our product team is working day and night to package them nicely and make them available to our users in a really convenient way. We intend to make all of our services and products super flexible and enable everyone to access and retrieve what they want in form of optimised payloads.</p>
<p id="ce36" class="">Also a big round of applause for&nbsp; Ammar Naqvi, Software Engineer @&nbsp;&nbsp;APIMATIC&nbsp;, who played a huge role in reviving our APIs and with whose collaboration this blog was written. Follow him on Twitter @ <a href="https://twitter.com/ammarabbasnaqvi">ammarabbasnaqvi</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/redesigning-apis-at-apimatic-a-case-study/">Redesigning APIs at APIMatic — A Case Study</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/redesigning-apis-at-apimatic-a-case-study/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Introducing Coding-Standards Compliant SDKs</title>
		<link>/blog/introducing-coding-standards-compliant-sdks/</link>
					<comments>/blog/introducing-coding-standards-compliant-sdks/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Wed, 27 Sep 2017 19:00:00 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[coding standards]]></category>
		<category><![CDATA[compliant SDKs]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/uncategorized/introducing-coding-standards-compliant-sdks-94db6301d599/</guid>

					<description><![CDATA[<p>Coding standards compliance and code linting are among the concepts widely recognized in the software industry as markers of better code quality. At APIMatic, we’re obsessed with the quality of the code we generate, and as another step towards better code, we’re introducing SDKs that are compliant with industry-accepted coding standards. For each language, we [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/introducing-coding-standards-compliant-sdks/">Introducing Coding-Standards Compliant SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="283" class="elementor elementor-283">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-50c88ac1 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="50c88ac1" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-28b4187" data-id="28b4187" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4a6178ae elementor-widget elementor-widget-text-editor" data-id="4a6178ae" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row"></div>
</div>
</div>
<figure>
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1wJ8VRNmYoSiZYVfxMAXZgg.jpg" alt="Introducing Coding-Standards Compliant SDKs" width="800" height="280"></p>

<figcaption></figcaption></figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="6ef0" class="graf graf--p graf-after--figure">Coding standards compliance and code linting are among the concepts widely recognized in the software industry as markers of better code quality. At APIMatic, we’re obsessed with the quality of the code we generate, and as another step towards better code, we’re introducing SDKs that are compliant with industry-accepted coding standards.</p>
<p id="fc76" class="graf graf--p graf-after--p">For each language, we have employed a widely accepted style for writing code. Therefore, the generated code is shipped just the way most developers like it and expect it to be written. We’ve chosen the coding standard for each language depending on its popularity with the developer community.</p>
<p id="4c55" class="graf graf--p graf-after--p">Coding standards compliance also improves the readability of the generated code. Since the personal preferences of the developers are eliminated, the shipped SDK will be the same in code quality no matter who is working on the code generation engine.</p>
<p id="c938" class="graf graf--p graf-after--p">For the users who have already implemented coding standards in their development workflow, the generated SDKs fit in seamlessly with their existing codebase. This brings more consistency to their projects.</p>
<p id="788a" class="graf graf--p graf-after--p">Coding standards compliance gives our users a guarantee from our end that the shipped code will be free from syntax errors and inconsistencies so that they can focus solely on their applications without having to worry about anything else.</p>
<p id="62ac" class="graf graf--p graf-after--p">Node.js code sample generated <strong class="markup--strong markup--p-strong">before </strong>the SDK was coding-standard compliant</p>
<p id="e067" class="graf graf--p graf-after--p">Node.js code sample generated <strong class="markup--strong markup--p-strong">after </strong>the SDK was coding-standard compliant</p>
<p id="6910" class="graf graf--p graf-after--p">Apart from helping the consumers, coding-standard compliance and linting improve the code generation process at our end as well. It saves time since linting identifies and points out the errors or inconsistencies before the generated code is shipped.</p>
<p id="e3f2" class="graf graf--p graf-after--p">Compliance is particularly useful in the case of weakly typed languages. Since weakly typed languages are not compiled, errors can only be detected at runtime. So linting acts as an extra layer of protection in this case, checking the code for inconsistencies to ensure that all bugs are caught out and fixed before release. This way, the generated code is tested rigorously with linting checks and unit tests at our end, and quality SDKs are shipped out.</p>
<p id="03a0" class="graf graf--p graf-after--p">Currently, our <em class="markup--em markup--p-em">C#, PHP, Node.js, AngularJS </em>and <em class="markup--em markup--p-em">Python </em>SDKs are coding-standards compliant, while compliance for <em class="markup--em markup--p-em">Ruby </em>and other languages are coming up pretty soon. For details about the coding standards being used and the changes made to SDKs, have a look at <a class="markup--anchor markup--p-anchor" href="https://docs.apimatic.io/generate-sdks/sdk-coding-standards" target="_blank" rel="noopener" data-href="http://docs.devapi.dream.press/sdk-design/code-compliance/">here</a>.</p>
<p id="460a" class="graf graf--p graf-after--p graf--trailing">If you have suggestions to help us improve our code quality further, please don’t hesitate to <a class="markup--anchor markup--p-anchor" href="https://www.apimatic.io/contact/" target="_blank" rel="noopener" data-href="https://devapi.dream.press/contact">contact us</a>.</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/introducing-coding-standards-compliant-sdks/">Introducing Coding-Standards Compliant SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/introducing-coding-standards-compliant-sdks/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>How Dude Solutions Cut Down Time to Release from 1 Week to 18 Seconds Using APIMatic</title>
		<link>/blog/how-dude-solutions-cut-down-time-to-release-with-apimatic/</link>
					<comments>/blog/how-dude-solutions-cut-down-time-to-release-with-apimatic/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Fri, 10 Jun 2016 00:00:00 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Dude Solutions]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/uncategorized/automate-all-the-things-how-dude-solutions-saved-20-000-in-development-costs-using-apimatic-f9c05118f041/</guid>

					<description><![CDATA[<p>This is a guest article written by Brian Hyder, Engineering Manager @ Dude Solutions. Dude Solutions is a leading software-as-a-service (SaaS) provider of operations management solutions recognized for world class delivery, support and a long-standing commitment to innovation. Here at Dude Solutions, we have two front facing REST APIs that drive our platform: Unified and [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/how-dude-solutions-cut-down-time-to-release-with-apimatic/">How Dude Solutions Cut Down Time to Release from 1 Week to 18 Seconds Using APIMatic</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="282" class="elementor elementor-282">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-3a269dc1 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="3a269dc1" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1232495" data-id="1232495" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-3ca5e0fc elementor-widget elementor-widget-text-editor" data-id="3ca5e0fc" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12"></div>
</div>
</div>
</div>
<figure>
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1zHwImCWcdgZ3OLyG9J7DUg.jpg" alt="Automate all the things&nbsp;: How Dude Solutions Saved $20,000/per month in Development Costs using&nbsp;APIMATIC" width="800" height="240"></p>
</figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<blockquote>
<p id="e073" class="graf graf--p graf-after--figure"><em class="markup--em markup--p-em">This is a guest article written by Brian Hyder, Engineering Manager @ Dude Solutions.</em></p>
</blockquote>
<p id="3868" class="graf graf--p graf-after--p">Dude Solutions is a leading software-as-a-service (SaaS) provider of operations management solutions recognized for world class delivery, support and a long-standing commitment to innovation.</p>
<p class=""><img class="aligncenter" src="/wp-content/uploads/2021/12/168adoQPkF3Lz_T1_4S17YQ.png"></p>

</div>
</div>
</div>
</div>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9d5c" class="graf graf--p graf-after--figure">Here at Dude Solutions, we have two front facing REST APIs that drive our platform: Unified and Security. Unified provides the collections for driving normal business functions for our verticals while our security API handles account and user management. These two APIs are supported by a set of micro-services that specialize in different areas: Notification, Event, Report, and File. The short name of each gives a good indication of the primary business function that each one performs.</p>

<h2 id="e7e8" class="graf graf--h3 graf-after--p">The Need for&nbsp;SDKs</h2>
<p id="fdcf" class="graf graf--p graf-after--h3">The first time we thought about SDK development was early on in the development of our new platform. We needed to communicate from our Security API to our notification micro-service in order to send notifications on creation of accounts and users. By building an SDK we now had sharable software that we could use across the entire platform. It reduced the amount of code in each API stack and understood our security protocols.</p>
<p id="01bd" class="graf graf--p graf-after--p">We decided to write our first SDK by hand. We learned that it takes almost as long to do the API implementation as it did the SDK development. In fact, it took one week to develop the SDK for a single language. We have 3 languages across our platform:</p>

<ul class="postList">
 	<li id="44b9" class="graf graf--li graf-after--p">C# for our API layer</li>
 	<li id="2d58" class="graf graf--li graf-after--li">Ruby for our API Automation</li>
 	<li id="6f93" class="graf graf--li graf-after--li">Angular for our UI</li>
</ul>
<p id="2383" class="graf graf--p graf-after--li">That’s a lot of development time compared to the effort to implement the API itself. We weren’t getting the return on investment that we expected despite the reduction in code.</p>

<h2 id="2008" class="graf graf--h3 graf-after--p">Discovering APIMatic</h2>
<p id="015e" class="graf graf--p graf-after--h3">When we began to iterate over the design for the next micro-service, we started to look into alternate forms of documenting our APIs. We came across API Blueprint format, an open source documentation standard for APIs. It was easy to read and the syntax was familiar to our developers since it looked like Markdown format. This discovery lead us to APIMatic, and we quickly started conversations with their team. They got us up and running with a proof of concept within a couple of weeks. The POC demonstrated that we could drastically reduce development time by generating the SDK off of our blueprint documentation. Since the blueprint was generated during the design phase, the cost of SDK was absorbed by the time and money spent in design. Development time for SDKs for each language went from 1 week to 18 seconds thanks to APIMatic.</p>
<p id="b928" class="graf graf--p graf-after--p">In 3 months, across the 7 SDKs that we generate, we’ve been able to save $20,000 in development costs. Additionally, the cost of maintenance is also eliminated because the effort to update the SDK each time the API changes is absorbed as part of the feature’s design cost.</p>

<h2 id="f5a9" class="graf graf--h3 graf-after--p">Collaboration using Contract-First Approach</h2>
<p id="d209" class="graf graf--p graf-after--h3">The one issue we ran into developing the first SDK by hand was the development teams working in silos. The initial design was based off of the implementation for the API. This meant if development on the SDK started in parallel there were differences in the API contract when compared to the expectations of the SDK. Teams had to slow down and execute in series: API implementation, SDK development, API automation testing, UI development, and UI automation tests.</p>
<p id="51c7" class="graf graf--p graf-after--p">Incorporating the API blueprint documentation into our design process allowed for developers to iterate quickly over the design of the API while having a definitive source of information for how the API would behave. The days of outdated wiki pages were over. Developers could now work collaboratively on design and work in parallel on: API implementation, API automation, UI development, and UI automation tests. We had finally achieved a contract first approach to development.</p>
<p id="48ba" class="graf graf--p graf-after--p">The contract first approach worked because we integrated the design process into our normal development process. The blueprint document is versioned in a Git repository. At Dude Solutions, we use normal Git flow for our branching model. This means each change to our API starts by branching off the development branch for the documentation repository. Then, developers can put changes to the API documentation into a pull request. This is beneficial because all of our teams have notice of the changes that are happening. Once a change to the documentation is made and pushed back to the repository our continuous integration system takes over from there.</p>

<h2 id="856e" class="graf graf--h3 graf-after--p">Automate All the&nbsp;Things</h2>
<p id="b579" class="graf graf--p graf-after--h3">We leverage a feature called “Feature Branching” in Team City, our build system. It allows for builds to kick-off for each branch when a change is made to our blueprint documentation. This gives almost instant feedback to developers about the change that they made. The continuous integration allows developers to generate a new version of the SDK seconds after a change to documentation and begin to integrate and test it in local environments all within a couple of minutes.</p>
<p class=""><img class="aligncenter" src="/wp-content/uploads/2021/12/1SY6l4LzcJpn30ye1scP2Sw.png"></p>

</div>
</div>
</div>
</div>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="6593" class="graf graf--h3 graf-after--figure">Thank you APIMatic</h2>
<p id="ac3b" class="graf graf--p graf-after--h3 graf--trailing">APIMatic and the APIMatic Team have been amazingly helpful from the very beginning. The response times, to support and change requests have been met with blazing speed. The APIMatic platform not only saves us time and money, it makes our lives much easier. Our engineers can focus on doing something incredible and less time worrying about integrations. We owe a big thanks to the APIMatic team for their help and support over the past couple of months.</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/how-dude-solutions-cut-down-time-to-release-with-apimatic/">How Dude Solutions Cut Down Time to Release from 1 Week to 18 Seconds Using APIMatic</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/how-dude-solutions-cut-down-time-to-release-with-apimatic/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Rapidly Expand Reach and Reduce Time to Market with Auto­‐Generated SDKs for Private APIs</title>
		<link>/blog/rapidly-expand-reach-and-reduce-time-to-market-with-auto-generated-skds-for-private-apis/</link>
					<comments>/blog/rapidly-expand-reach-and-reduce-time-to-market-with-auto-generated-skds-for-private-apis/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Tue, 16 Feb 2016 19:00:00 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Cloud M]]></category>
		<category><![CDATA[mobile apps]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/uncategorized/rapidly-expand-reach-and-reduce-time-to-market-with-auto-generated-skds-for-private-apis-d4f9e659eb23/</guid>

					<description><![CDATA[<p>This is a guest blog written by Richard Gill, founder and CEO of Cloud M, a company devoted to saving lives. CLOUD M is a leading innovator of cloud-based native mobile apps for keeping people safe in their homes, communities, and workplaces. The Safety Network The company’s Alerter apps are used by New Zealand Government [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/rapidly-expand-reach-and-reduce-time-to-market-with-auto-generated-skds-for-private-apis/">Rapidly Expand Reach and Reduce Time to Market with Auto­‐Generated SDKs for Private APIs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="279" class="elementor elementor-279">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-68a83886 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="68a83886" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-2954f615" data-id="2954f615" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-624e4c44 elementor-widget elementor-widget-text-editor" data-id="624e4c44" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12"></div>
</div>
</div>
</div>
<figure>
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1YS2kbj1f3v37IUj_umKHVQ.png" alt="Rapidly Expand Reach and Reduce Time to Market with Auto­‐Generated SDKs for Private&nbsp;APIs" width="542" height="200"></p>

<figcaption></figcaption></figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<blockquote>
<p id="750a" class="graf graf--p graf-after--figure"><em class="markup--em markup--p-em">This is a guest blog written by Richard Gill, founder and CEO of Cloud M, a company devoted to saving lives.</em></p>
</blockquote>
<p id="1c0c" class="graf graf--p graf-after--p">CLOUD M is a leading innovator of cloud-based native mobile apps for keeping people safe in their homes, communities, and workplaces.</p>

<h2 id="3bd9" class="graf graf--h3 graf-after--p">The Safety Network</h2>
<p id="757e" class="graf graf--p graf-after--h3">The company’s Alerter apps are used by New Zealand Government agencies to warn and keep the public informed during natural disasters and emergency situations. With population coverage of 1.4 million people growing to 4.5 million over the coming months, Alerter is a key tool in the Civil Defence and Emergency Management arsenal.</p>
<p id="383e" class="graf graf--p graf-after--p">CLOUD M’s latest product, Blerter, takes this to high-­risk workplaces, by empowering personal and collective responsibility for health &amp; safety across sites and projects. Blerter uses social networking, mobile, cloud, big data, and real-­time situational awareness to drive change and safety-­first cultures in industries like construction, transport, mining and energy.</p>

<blockquote id="be2c" class="graf graf--blockquote graf--startsWithDoubleQuote graf-after--p">“The mission-critical nature of these systems means that responsiveness, uptime, and coverage are essential. The more devices client app platforms supported, the more people can be kept safe”, Alisdair Brotchie, Engineering Lead — Mobile, CLOUD M.</blockquote>
<h2 id="b51b" class="graf graf--h3 graf-after--blockquote">Evolution of an&nbsp;API</h2>
<p id="1541" class="graf graf--p graf-after--h3">CLOUD M started out as an API company, building significant cloud-­based capability served by a rest‐like API optimized for supporting sophisticated native mobile apps. As the products have grown in features and capabilities, the number of API calls and data models has also grown significantly to more than 400 endpoints and 600 models. The company is also expanding the number of platforms it supports from initially just iOS and mobile web, to Android, desktop, and soon windows mobile and potentially other platforms.</p>
<p id="85b9" class="graf graf--p graf-after--p">In order to reduce the complexity of re-­implementing such a large and rapidly evolving API by hand on every platform the company developed a tool for automatically generating client-­side native bindings for the API. While this worked well and provided significant benefits, the company had only managed to implement it so far on one client language due to resource constraints.</p>

<blockquote id="e655" class="graf graf--blockquote graf--startsWithDoubleQuote graf-after--p">“Our code generation tools worked well and really proved how powerful auto-generating native bindings can be. However, it was going to be a big stretch for us to expand these to cover all the languages we were going to need, and we just didn’t have enough engineers to do it at the time” -­Brotchie</blockquote>
<h2 id="8244" class="graf graf--h3 graf-after--blockquote">Challenges of&nbsp;Scale</h2>
<p id="2799" class="graf graf--p graf-after--h3">It became obvious that while the approach was right, the company would have to rapidly increase the number of languages supported, as well as improve the automation of the code generation to meet its business objectives. Along with this, the company is expanding it’s partner base and wanted to provide bindings in a simpler form for 3rd party systems integrators and other app developers. This would mean supporting languages that the company had no in-­house expertise in.</p>

<blockquote id="61cc" class="graf graf--blockquote graf--startsWithDoubleQuote graf-after--p">“We see being able to give our partners a fully functional SDK rather than just documented API as a real competitive advantage — if we make it easier for them, they’ll integrate more services and faster” -­ Brotchie</blockquote>
<h2 id="3af6" class="graf graf--h3 graf-after--blockquote">Auto-Generated SDKs</h2>
<p id="36f7" class="graf graf--p graf-after--h3">Before committing to a major increase in investment in it’s own code generation tools, the company decided to try out the <a href="https://docs.apimatic.io/generate-sdks/overview-sdks">automated SDK creation service</a> offered by APIMatic. Being fortunate to share space in Auckland with the APIMatic team, the company was able to utilize their significant expertise in short-­cutting the process for getting to a successful trial.</p>
<p id="ab09" class="graf graf--p graf-after--p">In a matter of a few weeks, the company has a large proportion of its API being converted to native language auto-generated SDKs, and has begun building new client app on this SDK. It has also trailed the generated code for Objective-­C, Java for Android and Java for Web.</p>
<p id="efc9" class="graf graf--p graf-after--p">The code generation process is now being plugged into the company’s Continuous Integration environment, which will rapidly decrease the amount of work for app developers implementing API changes or new features.</p>

<h2 id="5f9a" class="graf graf--h3 graf-after--p">Risks and Rewards</h2>
<p id="5b9b" class="graf graf--p graf-after--h3">For any technology company replacing mission critical component of your software stack with a 3rd party solution carries significant risk, especially when failure can affect your entire user base.</p>
<p id="6426" class="graf graf--p graf-after--p">The CLOUD M development team undertook a significant analysis of the generated code, and worked closely with the APIMatic engineers to ensure that the SDKs met and will continue to meet the company’s needs.</p>

<blockquote id="8192" class="graf graf--blockquote graf--startsWithDoubleQuote graf-after--p graf--trailing">“We’ve been really impressed with the responsiveness and enthusiasm of the APIMatic team, and the results we’ve achieved together. We now see APIMatic as a significant technology partner helping us maximise our resources and get new features to market much faster” Richard Gill, CEO CLOUD M.</blockquote>
</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/rapidly-expand-reach-and-reduce-time-to-market-with-auto-generated-skds-for-private-apis/">Rapidly Expand Reach and Reduce Time to Market with Auto­‐Generated SDKs for Private APIs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/rapidly-expand-reach-and-reduce-time-to-market-with-auto-generated-skds-for-private-apis/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
