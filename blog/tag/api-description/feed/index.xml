
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Api Description Archives - APIMatic</title>
	<atom:link href="/blog/tag/api-description/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Fri, 24 Dec 2021 08:18:04 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.4</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>Api Description Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Curating Postman Collections To Generate Quality API Documentation &#038; SDKs</title>
		<link>/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/</link>
					<comments>/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Thu, 08 Apr 2021 10:00:45 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Postman]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Api Description]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[postman collections]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic-blog.000webhostapp.com/?p=140</guid>

					<description><![CDATA[<p>Are you looking to provide a smooth developer experience with your APIs and as a result maximize API consumption? Then, you can’t really afford to put off API documentation as a last thought. After all, it is one of the critical pieces of any good developer experience program along with platform SDKs, code samples etc. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/">Curating Postman Collections To Generate Quality API Documentation &#038; SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="140" class="elementor elementor-140">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-18c89b1c elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="18c89b1c" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-7cf44855" data-id="7cf44855" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-3be71a1f elementor-widget elementor-widget-text-editor" data-id="3be71a1f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.1 - 23-03-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Are you looking to provide a smooth developer experience with your APIs and as a result maximize API consumption? Then, you can’t really afford to put off API documentation as a last thought. After all, it is one of the critical pieces of any good developer experience program along with platform SDKs, code samples etc.</p>
<p class="">Who are the end-users of a documentation, really? <strong>Humans</strong>. So, naturally, your API documentation can only be termed “good quality” if it comes with a human element in it— easy to read, navigate and comprehend. Similarly, a good quality SDK is one which is usable, idiomatic, comes bundled with language-specific documentation and is simple enough to be used by any average developer. This implies that <strong>user-friendliness</strong> is a key factor in determining the quality of your API developer experience program.</p>
<p class=""><a href="https://www.postman.com/" target="_blank" rel="noreferrer noopener">Postman</a> is a tool widely used by developers for API testing and for collaborating over APIs with teams. You can then easily export your API requests in the form of a Postman Collection file and use it to generate complete API documentation as well as SDKs. In this blog, I share a few tips to gear your API documentation and SDKs towards your developers from as early as your starting point — Postman requests and the resulting Postman Collection.</p>
<h2 class="">1. Assign a User Friendly and Unique Name to Your Postman&nbsp;Requests</h2>
<p class="">Let’s say you create a new request in Postman Collection and set its URL to something like <code>&lt;a href=&quot;http://i-am-just-an-example.com/dummy&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;http://i-am-just-an-example.com/dummy&lt;/a&gt;</code>&nbsp;.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/17MzqF90_GLGOfw3t7uso4w.png" alt="Where to set a request’s URL in Postman"></p>
<figcaption>Specify your request’s URL in Postman’s request&nbsp;UI</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Now, when you proceed to save this request, you’ll notice that Postman sets the request URL as the default name for your request. You can go ahead and save your request without changing this name and Postman won’t complain.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1ZpJ_c7rH5Ju8sVlsvRlSfA.png" alt="The dialog box that appears if you try to save your request in Postman"></p>
<figcaption>The dialog box that appears if you try to save your request in&nbsp;Postman</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Imagine having 50+ such requests in your Postman Collection, each with a name set as the request’s URL. Look how hard it is to locate a particular request in the left bar or in the documentation preview navigation:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1R3H8f2vXzAYd_MDq6pT0mw.png" alt="How a Postman Collection with lots of requests looks like if the requests’ default names are not changed"></p>
<figcaption>How a Postman Collection with lots of requests looks like if the requests’ default names are not&nbsp;changed</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">If you, as an API provider, are having trouble looking for a request, imagine how hard it will be for a completely new user looking to consume your API.</p>
<p class="">So, while Postman sets the request URL as your default name for a request to save you some time, it is highly recommended that you <strong>replace</strong> those names with ones which are more <strong>meaningful</strong>, <strong>short</strong> and <strong>user-friendly</strong>. Here is an example of <a href="https://www.apimatic.io/apidocs/apimatic/" target="_blank" rel="noreferrer noopener">APIMatic’s API</a> (ungrouped version) that I imported into Postman which makes better use of request naming:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/18hAcSdqQJ0bSIskfmG3QqA.png" alt="How a Postman Collection with lots of requests looks like if the requests’ default names are changed to more meaningful ones"></p>
<figcaption>How a Postman Collection with lots of requests looks like if the requests’ default names are changed to more meaningful ones</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>A good request name will, therefore:</p>
<ul class="">
<li>Be short and sweet — ideally less than 30 characters.</li>
<li>Ideally not contain any special characters/symbols.</li>
<li>Indicate the API resource you are trying to access/modify e.g. for APIMatic’s API this could be an “SDK”.</li>
<li>Indicate the action being performed on the API resource e.g. creating/generating an SDK.</li>
</ul>
<p class="">Of course, a good name is highly dependent on a good API design as well. However, generally speaking, your request name must at least clearly indicate to the user what he/she can achieve upon making this request.</p>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<h2 id="c437" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">2. Increase Discoverability ? — Group Related Requests</h2>
<p id="a218" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">In the previous section, you saw that the requests were thrown directly into a Collection without any grouping. To improve developer experience, you need to reduce the time it takes for your users to find a particular request/endpoint. Since Postman supports nesting, you should group related requests into&nbsp;<strong class="il jh">folders</strong>. Generally, all requests/endpoints dealing with a particular resource or feature should be grouped together. Here is what the&nbsp;<a class="cd ji" href="https://www.apimatic.io/apidocs/apimatic/" rel="noopener">APIMatic’s API</a>&nbsp;looks like after grouping:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep lp">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/15qhFoCGvNQnb8_OnEfhbbg.png" alt="What grouping requests in a folder in Postman looks like" width="1000" height="274"><figcaption class="wp-caption-text">What grouping requests in a folder in Postman looks like</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<h2 id="0594" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">3. Add Plenty of Descriptive Content in Your Postman Collections</h2>
<p id="ac80" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Your end-users are new to your API and know nothing about your offerings. Therefore, your documentation must be very clear and descriptive about everything. As a starting point, make sure that you have descriptions set for each of your important components in your Postman Collection.</p>
<p id="35cd" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Postman&nbsp;<a class="cd ji" href="https://learning.postman.com/docs/publishing-your-api/authoring-your-documentation/" rel="noopener">supports GitHub flavored Markdown syntax</a>so you can easily add any kind of descriptive content (lists, images, tables, etc.) pretty much everywhere including (but not limited to):</p>
<h3 id="782a" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.1. API Itself</h3>
<p id="98a8" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">A good place to inform your users what your API offers and how they can quickly gain access to its endpoints. Here is how Postman describes its API in its Postman Collection:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep mh">
<div class="mm s bz kk">
<div class="mn mo s">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1eKoeKSSAkYzStm2omxWsPw.png" alt="How descriptive content at API level is rendered in documentation" width="700" height="593"><figcaption class="wp-caption-text">How descriptive content at API level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="fa90" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.2. Folder Level</h3>
<p id="444e" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">When you click on a folder in the collection, you can add/edit its description (or documentation for newer Postman App versions). Here you can tell users more about what gels together the requests in this particular folder, e.g., which common feature they target or what common resource they are related to.</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep ms">
<div class="mm s bz kk">
<div class="mt mo s">
<div class="bv mi t u v mj aj dk mk ml">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1cRc_XuhnRHWsfHcAXP4_5Q.png" alt="How descriptive content at API level is rendered in documentation" width="700" height="239"><figcaption class="wp-caption-text">How descriptive content at folder level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="0c00" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.3. Request Level</h3>
<p id="a6ac" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">You can save a request’s description when saving/editing the request or later in the documentation section if you are using the latest Postman app. For request descriptions, tell users what the particular request/endpoint is expected to do, e.g., the kind of inputs it will accept and what it will return.</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep mu">
<div class="mm s bz kk">
<div class="mv mo s">
<div class="bv mi t u v mj aj dk mk ml">
<p class="mod-reset">&nbsp;</p>
</div>
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1tQMekQgXb9s3ZnTgUkEeHg.png" alt="How descriptive content at request level is rendered in documentation" width="700" height="265"><figcaption class="wp-caption-text">How descriptive content at request level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="9314" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">3.4. Request Parameters Level</h3>
<p id="2d0e" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">You can specify descriptions for your request parameters including query parameters and path variables. You can comment about what information that parameter stores and optionally any details related to the expected type of the parameter (a number, object or string, etc.) or any restrictions to its value, etc.</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep mw">
<div class="mm s bz kk">
<div class="mx mo s">
<div class="bv mi t u v mj aj dk mk ml">
<p class="mod-reset">&nbsp;</p>
</div>
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1A1R6_J_APXsxBjzBC-Jqsw.png" alt="How descriptive content at request params level is rendered in documentation" width="700" height="402"><figcaption class="wp-caption-text">How descriptive content at request params level is rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h2 id="d582" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">4. Don’t Forget the Examples!</h2>
<h3 id="2f63" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">4.1. Request Parameter Values</h3>
<p id="ecd4" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">During an API testing session, you must have provided some input values to the request parameters in order to get the response. If you have saved and published your collection with those values, they will show up in your documentation as examples, as can be seen below:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep my">
<div class="mm s bz kk">
<div class="mz mo s">
<div class="bv mi t u v mj aj dk mk ml">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1cOOkc3cv1pZEk1tdZ3edTQ.png" alt="How request params input values are rendered in documentation" width="700" height="266"><figcaption class="wp-caption-text">How request params’ input values are rendered in documentation</figcaption></figure>
</div>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h3 id="7414" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">4.2. Request-Response Examples</h3>
<p id="4dfa" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Setting request values is not enough for giving a full picture of the capabilities of your particular request to your user. What happens if the user doesn’t send a required parameter? What happens if the parameter value is wrong? What happens if the user doesn’t authenticate the request? Luckily, Postman Collections have a<a class="cd ji" href="https://learning.postman.com/docs/sending-requests/examples/" rel="noopener">request-response example pair feature</a>&nbsp;where you can represent these scenarios easily. It is a bit hidden in the Postman app so it is quite likely that you probably missed it before. Click on the three dots next to the request’s name and choose “Add example”:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep na">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1p2tkfKricy8lxJO_YO3y8A.png" alt="How to add a request-response example from the request UI in Postman" width="1000" height="166"><figcaption class="wp-caption-text">How to add a request-response example from the request UI in Postman</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<p id="cef9" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">OR you can also save an example when you receive a response from your request in Postman, using the “Save an example” option:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nb">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1tc0XNxStG3dRSkougAVJKA.png" alt="How to add a request-response example from real response data in Postman" width="1000" height="263"><figcaption class="wp-caption-text">How to add a request-response example from real response data in Postman</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<p id="ee37" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Remember, that these examples are essentially request-response pairs which means that each response is tied to a particular request. To make the best use of this feature, there are a few things to keep in mind:</p>
<h4 id="f528" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx"><strong class="il jh">Examples Should Cover All Possible Response Status Codes</strong></h4>
<p id="175d" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Ideally, your examples should cover all possible response status codes<strong class="il jh">&nbsp;</strong>that your API request can return e.g. success codes in the range 2XX and error codes in the ranges 4XX and 5XX.</p>
<h4 id="a3da" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx"><strong class="il jh">Assign Unique Identifiers</strong></h4>
<p id="8b50" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Don’t forget to assign a short meaningful identifier to each request-response example pair. The identifier should summarize what scenario this example represents e.g. a success/error case. Postman groups together the examples tied to a particular request using these identifiers as you can see below:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nc">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1l4Rsv_8rPDiurLqJeXOkGQ.png" alt="Examples belonging to the same request can be navigated using the dropdown menu in documentation" width="700" height="593"><figcaption class="wp-caption-text">Examples belonging to the same request can be navigated using the dropdown menu in documentation.</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h2 id="9073" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">5. Setup Authentication Properly ?</h2>
<p id="ef39" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">For API testing, plenty of developers tend to pass the&nbsp;<code class="kk kl km kn ko b">Authorization</code>&nbsp;header directly for authenticating their requests. This is not recommended unless you have a really custom authentication flow. Postman&nbsp;<a class="cd ji" href="https://learning.postman.com/docs/sending-requests/authorization/" rel="noopener">natively supports various authentication types</a> that can be applied globally at API level and can also be overridden in individual requests e.g. OAuth 2.0 flows, Basic authentication, API keys etc. Setting up the right authentication flow for your API and requests within Postman helps configure your Postman Collection correctly. This in turn improves the documentation by enabling documentation generators to generate relevant authentication sections as shown below:</p>
<figure class="hx hy hz ia ib ic eo ep paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nd">
<div class="mm s bz kk">
<div class="ne mo s">
<figure style="width: 700px" class="wp-caption aligncenter"><img class="pg ud t u v mj aj c" src="/wp-content/uploads/2021/12/1hBSxhv2TkaVbCU94Uu5dhg.png" alt="Auto-generated sections in Postman if authentication is properly setup" width="700" height="433"><figcaption class="wp-caption-text">Auto-generated sections in Postman if authentication is properly setup</figcaption></figure>
</div>
</div>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
<h2 id="6705" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx"><strong class="bc">Taking Your Postman Collection Beyond API Documentation via&nbsp;</strong>APIMatic ?</h2>
<p id="6b40" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph=""><a class="cd ji" href="https://apimatic.io/" rel="noopener">APIMatic</a> offers a customizable&nbsp;<a class="cd ji" href="https://www.apimatic.io/developer-experience-portal" rel="noopener">developer experience solution</a>&nbsp;that comes bundled with rich features like SDKs, reactive code samples, API explorer, API description transformations and much more beyond simple API docs. If you are looking to generate your API documentation and SDKs in APIMatic from a Postman Collection, there are a few additional trips and tricks to improve the quality of generated documentation:</p>
<h3 id="80ea" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Make Your Request Names Code Generation Friendly</h3>
<p id="fa5f" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Since APIMatic’s documentation comes bundled with language-specific features like SDKs and reactive code samples in addition to the HTTP reference documentation, we expect users to take extra care of request naming conventions. This is because the request names from your Postman file are used for generating controller names and SDK components as part of the portal generation process. Therefore, names that are too long (greater than 50 characters) or use special characters are not recommended.</p>
<h3 id="e767" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Tweak Imported Models If Necessary ?</h3>
<p id="18a3" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">A unique feature of APIMatic is that we infer complex models from your request/response example values (at the time of importing the Postman Collection) to improve your experience with our SDKs/portal. To ensure that the models generated are a true representation of your API, here are a few additional recommendations:</p>
<ul class="">
<li id="8f32" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Examples must be valid and thorough</strong></li>
</ul>
<p id="04cc" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">The examples provided in the Postman Collection must be valid, thorough and ideally cover all possible properties in case complex objects are involved.</p>
<ul class="">
<li id="d278" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Fine-tune model information that can’t be deduced from examples</strong></li>
</ul>
<p id="f815" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Deducing models from examples may not always result in complete type information and may also not be 100% accurate every time. For example, it is not always apparent whether a particular property in the object is required or optional, whether a numeric property allows only integers or bigger values like long, double as well, etc. This is one big reason why formats like OpenAPI, RAML and others have a proper type system which Postman does not have. However, after your models are imported, you can always fine-tune<strong class="il jh">&nbsp;</strong>them in&nbsp;<a class="cd ji" href="https://www.apimatic.io/dashboard" rel="noopener">APIMatic’s API editor</a>&nbsp;to get the same behavior.</p>
<ul class="">
<li id="83a6" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Deduplicate models</strong></li>
</ul>
<p id="ebfc" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">Since it is quite possible that two different components have very similar examples, therefore, the generated models may be, e.g., a subset of each other. While detecting this during the import process is not exactly possible, you can, however, deduplicate the models in the editor after the import process to improve the quality of the output documentation/SDKs.</p>
<ul class="">
<li id="68ee" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><strong class="il jh">Improve generated model names</strong></li>
</ul>
<p id="133b" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">The names of the generated models are assigned based on the names of the component for which the example was provided. To prevent model name duplication in such cases, a number may be appended with the model names. For example, if you have a parameter named “status” in two requests A and B where both these parameters have different examples, it is possible that the generated models from these examples can end up with names like “status1” and “status2” respectively. To improve the output for such cases, you can upload our&nbsp;<a class="cd ji" href="https://docs.apimatic.io/advanced/apimatic-metadata" rel="noopener">Metadata file</a>&nbsp;along with your Postman Collection in the form of a ZIP file during import, with the “AppendParentNameForClashes”&nbsp;<a class="cd ji" href="https://docs.apimatic.io/advanced/apimatic-metadata/#import-settings" rel="noopener">import setting</a>&nbsp;enabled. As the name suggests, this will append the parent component’s name instead of a number at the end of the model name which will add more context and improve the overall output.</p>
<h3 id="4ff8" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Upload Environment Files</h3>
<p id="af69" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">If your Postman Collection makes use of environment variables, it is highly recommended that you upload your environment files along with your Postman Collection in the form of a ZIP file at the time of importing your file into APIMatic. These variables have no meaning in an API documentation, therefore, providing these files will help us resolve their values and display them properly.</p>
<h3 id="972b" class="lq jk fj as jl lr ls lt jo lu lv lw jr lx ly lz jv ma mb mc jz md me mf kd mg bx">Add Markdown Guides</h3>
<p id="e11d" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Once you generate the API documentation in APIMatic from your Postman Collection, feel free to add additional quick-start&nbsp;<a class="cd ji" href="https://docs.apimatic.io/developer-experience-portal/customizing-your-portal/#guides" rel="noopener">custom Markdown guides</a>.</p>
<h2 id="4568" class="jj jk fj as jl jm jn io jo jp jq is jr js jt ju jv jw jx jy jz ka kb kc kd ke bx">Generating Documentation from Postman Collection in APIMatic — A Quick Demo ?</h2>
<p id="ba7a" class="ij ik fj il b im kf io ip iq kg is it iu kh iw ix iy ki ja jb jc kj je jf jg fb bx" data-selectable-paragraph="">Generating documentation in APIMatic involves a few quick steps which are explained below:</p>
</div>
</div>
<div class="ic">
<div class="n p">
<div class="kp kq kr ks kt ku af kv ag kw ai aj">
<figure class="hx hy hz ia ib ic ky kz paragraph-image">
<div role="button" class="id ie bz if aj ig">
<div class="eo ep nf">
<figure style="width: 1000px" class="wp-caption aligncenter"><img class="aj ih ii" src="/wp-content/uploads/2021/12/1EA0ELZNUDGgotEjR5h2Z6A.gif" alt="Curating Postman Collections To Generate Quality API Documentation &amp;&nbsp;SDKs. Workflow for previewing a portal from your Postman Collection in APIMatic with just a few clicks" width="1000" height="563"><figcaption class="wp-caption-text">Workflow for previewing a portal from your API description file in APIMatic with just a few clicks</figcaption></figure>
</div>
</div>
<figcaption class="la lb eq eo ep lc ld as b at au av" data-selectable-paragraph=""></figcaption>
</figure>
</div>
</div>
</div>
<div class="n p">
<div class="ab ac ae af ag fg ai aj">
<ul class="">
<li id="bc4c" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg lh li lj bx" data-selectable-paragraph=""><a class="cd ji" href="https://apimatic.io/account/register" rel="noopener">Sign up to APIMatic</a>, if you haven’t already.</li>
<li id="0b27" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph=""><a class="cd ji" href="https://docs.apimatic.io/getting-started/manage-apis/#add-an-api" rel="noopener">Import</a>&nbsp;your Postman Collection to the&nbsp;<a class="cd ji" href="https://apimatic.io/dashboard" rel="noopener">APIMatic Dashboard</a>&nbsp;by either uploading the file from your local system or providing a public URL.</li>
<li id="40e1" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">Your file will be validated. If there are any errors found during validation, you may need to resolve the issues before proceeding ahead.</li>
<li id="60f7" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">Once your file gets imported, click on the “Generate” button on the imported API entity.</li>
<li id="1202" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">Click on “Preview API Portal”.</li>
<li id="fda7" class="ij ik fj il b im lk io ip iq ll is it iu lm iw ix iy ln ja jb jc lo je jf jg lh li lj bx" data-selectable-paragraph="">You will then be taken to the preview of your portal.</li>
</ul>
<p id="6df9" class="ij ik fj il b im in io ip iq ir is it iu iv iw ix iy iz ja jb jc jd je jf jg fb bx" data-selectable-paragraph="">From there onwards, you can play around with your portal, generate SDKs or publish and customize the portal to suit your needs better. Please check out our documentation on&nbsp;<a class="cd ji" href="https://docs.apimatic.io/getting-started/previewing-your-first-portal/" rel="noopener">generating feature-packed API documentation</a>&nbsp;to learn more. Happy documenting! ?</p>
</div>
</div>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/">Curating Postman Collections To Generate Quality API Documentation &#038; SDKs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/curating-postman-collections-to-generate-quality-api-documentation-sdks/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Why Your API Needs Machine-Readable Description</title>
		<link>/blog/why-your-api-needs-machine-readable-description-832e805f6855/</link>
					<comments>/blog/why-your-api-needs-machine-readable-description-832e805f6855/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Sun, 09 Apr 2017 19:00:00 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Api Description]]></category>
		<category><![CDATA[Api Description Formats]]></category>
		<category><![CDATA[APIs]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/uncategorized/why-your-api-needs-machine-readable-description-832e805f6855/</guid>

					<description><![CDATA[<p>Having an API means providing the complete package to your customers so they can conveniently and effectively consume that API. This includes detailed, up-to-date documentation, SDKs in your customer’s favorite language, and any other tools to help get up to speed on your API. Of course, that implies that any changes you make to your [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/why-your-api-needs-machine-readable-description-832e805f6855/">Why Your API Needs Machine-Readable Description</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="280" class="elementor elementor-280">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-5a120553 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="5a120553" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-44268cb0" data-id="44268cb0" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-11f182fe elementor-widget elementor-widget-text-editor" data-id="11f182fe" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12"></div>
</div>
</div>
</div>
<figure>
<p class="mod-reset"><img class="alignnone" src="/wp-content/uploads/2021/12/13GX-myqSpMEelKyi_zMhmw.png" alt="Why Your API Needs Machine-Readable Description" width="624" height="230"></p>

<figcaption></figcaption></figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="ff1a" class="graf graf--p graf-after--p">Having an API means providing the complete package to your customers so they can conveniently and effectively consume that API. This includes detailed, up-to-date documentation, SDKs in your customer’s favorite language, and any other tools to help get up to speed on your API. Of course, that implies that any changes you make to your API would require changes on all these levels. This maintenance, at some point, will make you wish you could somehow reduce the amount of overhead involved. As you might be guessing now, machine-readable descriptions can help you with all of these issues. And you can adopt them without giving up the human-friendly way you approach your API today.</p>
<p id="bdd8" class="graf graf--p graf-after--p">API description formats — like Swagger (now known as Open API), RAML, API Blueprint, and WADL — have been around for a while now. They let you define your API in a standard way, understandable by machines and humans alike. Define the endpoints involved, the parameters they take and the kind of data/response they return, throw in some other relevant information and voila! You can get your hands dirty by automatically generating documentation, SDKs, test cases and whatnot. All this made possible by just a simple API description file.</p>
<p id="5d7e" class="graf graf--p graf-after--p">If you want to future proof your API program, and achieve some efficiencies while you do it, you’ll want to dig into the benefits of machine-readable description files. With API experts working hard to enable search and discovery of APIs, these description files are part of an important, automated future.</p>

<h2 id="1fa9" class="graf graf--h3 graf-after--p">6 Reasons You Need API Descriptions</h2>
<h3 id="a3d0" class="graf graf--h4 graf-after--h3">1. Save Time and&nbsp;Money</h3>
<p id="9f1a" class="graf graf--p graf-after--h4">Describe your API using one of the API description formats like APIMatic, Swagger or RAML, and get access to auto-generated documentation and SDKs. Stop writing code that can be written for you. If your API changes, reuse your existing API description to make the changes and re-generate your documentation and SDKs.</p>
<p id="6457" class="graf graf--p graf-after--p">You’re probably familiar with how you’re doing this now: every time the API changes, you manually make the changes. This approach is not only resource-intensive, but also error-prone. Plus, you need to worry about doing a deploy dance to sync the SDK, docs, and API. If you miss one, you cause the end-users lots of trouble and inconvenience.</p>
<p id="204f" class="graf graf--p graf-after--p">In a nutshell, the whole process will become less risky with machine-readable descriptions.</p>

<h3 id="2a27" class="graf graf--h4 graf-after--p">2. Paint a Clear Picture of Your&nbsp;API</h3>
<p id="8380" class="graf graf--p graf-after--h4">The API description formats present a high level view of your API which is concise yet expressive enough to give you a basic idea of how your API works. This makes it human friendly. It is, however, also machine friendly as the formats make use of JSON, YAML, Markdown or XML, which can be easily consumed and utilized.</p>
<p id="c835" class="graf graf--p graf-after--p">The clarity of a high level bigger picture of your API is also useful in analyzing how good or bad your API design is. The description clearly highlights the input parameters and the response fields. This contract-based mechanism helps identify any issues in the API, and go a long way into improving the API design.</p>

<h3 id="6c8c" class="graf graf--h4 graf-after--p">3. Happy Stakeholders, Happy Developers and Happy Customers</h3>
<p id="6b4b" class="graf graf--p graf-after--h4">When you define an API using the API description formats, the API description acts as a central document between the stakeholders, developers and even customers. They can collaborate and discuss the API design and resolve any issues. This collaborative API development can greatly increase satisfaction of the parties involved. Also, thanks to these formats, the customers get access to up-to-date SDKs in their favorite language bundled with detailed documentation, thus reducing the learning gap. What more could they want?</p>

<h3 id="3cad" class="graf graf--h4 graf-after--p">4. Open&nbsp;Standard</h3>
<p id="fe24" class="graf graf--p graf-after--h4">The formats present standard ways to define APIs. They aim to be no longer constrained by vendors or a particular language. One such example is <a class="markup--anchor markup--p-anchor" href="https://www.openapis.org/" target="_blank" rel="noopener" data-href="https://www.openapis.org/">Open API</a> who are working towards standardizing the way RESTful interfaces are defined. This standard allows formats and applications to talk to each other and facilitate users with bundles of tools and frameworks. API description or discovery format files tend to use easily consumable formats like JSON, YAML, XML, and Markdown. An API description defined using PDF or other such formats may not be as easily accessible or consumable. Hence shifting to such open standards will help you in the long run.</p>

<h3 id="391d" class="graf graf--h4 graf-after--p">5. Better management of increasing number of&nbsp;APIs</h3>
<p id="751d" class="graf graf--p graf-after--h4">The growth of APIs in the API world is quite eminently increasing. There are over 16,000 APIs in the ProgrammableWeb API directory to date and the number is ever-increasing. This brings the challenge of managing APIs and providing ways for users to easily search, discover and acquire access to such APIs. This challenge can be tackled by machine-readable descriptions, as well.</p>
<p id="01fc" class="graf graf--p graf-after--p">As your own number of APIs increase, API discovery and automation become important. You’ll want a scalable approach like description files to guide the way.</p>

<h3 id="1058" class="graf graf--h4 graf-after--p">6. Heart of many&nbsp;tools</h3>
<p id="c111" class="graf graf--p graf-after--h4">Machine-readable descriptions form the core part of many API tools and frameworks. APIMatic itself is based on such a format. All our major products/ features including, but not limited to, Inter-format conversion, <a class="markup--anchor markup--p-anchor" href="https://docs.apimatic.io/getting-started/generating-your-first-sdk" target="_blank" rel="noopener" data-href="https://devapi.dream.press/code-generation-as-a-service">SDK generation</a>, &nbsp;SDK documentation generation&nbsp;, <a class="markup--anchor markup--p-anchor" href="https://docs.apimatic.io/define-apis/testgen-settings" target="_blank" rel="noopener" data-href="https://docs.devapi.dream.press/testing/overview/">Test Case generation</a> all have one common format at its base.</p>
<p id="f3a7" class="graf graf--p graf-after--p">Similarly, Swagger offers its own CodeGen which enables you to generate client SDKs and server stubs by utilizing just one Swagger API description file. Another such tool by Swagger is Swagger UI which renders automatically generated documentation from the API description file, useful for visual interaction. API Blueprint offers a tool Apiary that takes the Blueprint file and gives access to interactive documentation, API mock, test suites, validations, traffic inspector and collaboration. Similarly, tools are available with RAML for interactive documentation, testing, and more.</p>

<h2 id="6b44" class="graf graf--h3 graf-after--p">Open the Gateway to Automation</h2>
<p id="1b2d" class="graf graf--p graf-after--h3">Machine readable descriptions unlock endless possibilities into the world of automation. These descriptions could either help define an API or provide metadata to help index APIs or collection of APIs.</p>

<h3 id="88d7" class="graf graf--h4 graf-after--p">Transformation between Standard API&nbsp;Formats</h3>
<p id="13fe" class="graf graf--p graf-after--h4">APIMatic offers Transformer that allows you to convert between various formats like RAML, Postman, Swagger, and API Blueprint. This conversion between API formats has been made possible because of their machine-readable characteristics. This transformation allows you to benefit from all the tools and other features associated with any format, not just one.</p>

<h3 id="92bc" class="graf graf--h4 graf-after--p">API Search and Discovery</h3>
<p id="b0f2" class="graf graf--p graf-after--h4">What with thousands of APIs available, it can be cumbersome to find an API that caters to your needs. There are numerous directories available online, but this is not a good long-term solution for discovery of APIs. Google presents one of its service called Google APIs Discovery Service that exposes machine readable metadata about Google APIs. This facilitates discovery and interaction with Google APIs only. APIs.io is one open service designed to discover APIs on the web and utilizes a machine-readable discovery format “APIs.json”. This discovery format simply involves defining a metadata for APIs thus enabling indexing of APIs. Other search engines, directories, and API service providers also have access to that local index making all API resources within the domain discoverable. Such discovery services enabled via machine-readable formats facilitates API search and API selection to a large extent.</p>

<h3 id="110d" class="graf graf--h4 graf-after--p">API Sharing</h3>
<p id="101c" class="graf graf--p graf-after--h4">APIMatic, Postman and Apiary allows you to share and collaborate on API definitions with a team. At the heart of this lies the machine-readable API description file. <a class="markup--anchor markup--p-anchor" href="https://swaggerhub.com/" target="_blank" rel="noopener" data-href="https://swaggerhub.com/">SwaggerHub</a> is another commercial product that allows teams to collaborate and coordinate the entire workflow of an API’s lifecycle.</p>

<h3 id="c759" class="graf graf--h4 graf-after--p">API Aggregation</h3>
<p id="6445" class="graf graf--p graf-after--h4">With explosion in the number of available APIs, API aggregation is becoming a growing trend. It aims to provide APIs that bring together multiple APIs into a single interface e.g. APIs providing Messaging services could be brought under one giant Messaging service. In this way, this kind of categorizing helps build new products and new services and aims to reduce complexity. One such example is <a class="markup--anchor markup--p-anchor" href="https://www.api2cart.com/" target="_blank" rel="noopener" data-href="https://www.api2cart.com/">API2Cart</a> which is an online service that provides unified interface for integration with multiple e-commerce platforms (support for over 30 shopping carts). API integration provider <a class="markup--anchor markup--p-anchor" href="https://zapier.com/" target="_blank" rel="noopener" data-href="https://zapier.com/">Zapier </a>also launched a service that chained SaaS APIs into a complete business process. Another alternative to aggregation is to provide a standard interface that can be owned by many API providers. Machine-readable descriptions could and are playing a vital role in this.</p>

<h3 id="1447" class="graf graf--h4 graf-after--p">Code Generation (server,&nbsp;client)</h3>
<p id="5dfe" class="graf graf--p graf-after--h4">Client SDKs and Server side code can be easily generated from API description formats e.g. APIMatic, Swagger. APIMatic allows you to generate SDKs in 10 different languages along with various options to configure the code generation process. Similarly Swagger CodeGen also helps in generation of Client SDKs and Server stubs in various languages.</p>

<h3 id="2819" class="graf graf--h4 graf-after--p">API and SDK Documentation</h3>
<p id="8cd5" class="graf graf--p graf-after--h4">API documentation is a crucial part for an API. An API must come with detailed documentation so its end-users have no trouble using the API. An API description bridges this gap by letting you gain access to rich interactive documentation in no time. Go write a simple API description in Blueprint and place it on <a class="markup--anchor markup--p-anchor" href="https://apiary.io/" target="_blank" rel="noopener" data-href="https://apiary.io/">Apiary</a>. You’ll see for yourselves what we meant. Not satisfied? Try generating documentation with <a class="markup--anchor markup--p-anchor" href="http://swagger.io/swagger-ui/" target="_blank" rel="noopener" data-href="http://swagger.io/swagger-ui/">Swagger UI</a> or <a class="markup--anchor markup--p-anchor" href="https://support.3scale.net/docs/3scale-apis-activedocs" target="_blank" rel="noopener" data-href="https://support.3scale.net/docs/3scale-apis-activedocs">3Scale ActiveDocs</a> by providing a Swagger API description. So, yes, you have numerous options out there for API documentation. And the possibilities all start with a simple API description file.</p>
<p id="2fd8" class="graf graf--p graf-after--p">API documentation isn’t the only document necessary for a good user-experience. To consume an API, a user would require a good SDK and that SDK must come with detailed documentation as well. Fear not, as <a class="markup--anchor markup--p-anchor" href="https://devapi.dream.press/" target="_blank" rel="noopener" data-href="https://devapi.dream.press/">APIMatic </a>solves this issue as well, requiring minimal effort. Define or import your API into APIMatic, generate SDKs and get access to rich SDK documentation with illustrations and code snippets to get you quickly familiar with how the SDK works.</p>

<h3 id="3295" class="graf graf--h4 graf-after--p">API Sandbox/&nbsp;Testing</h3>
<p id="f41a" class="graf graf--p graf-after--h4">API testing can take many forms. Apiary offers a Mock Server that provides a quick way to prototype and test an API at the API design phase if you have a Blueprint machine-readable description at hand. When a request is sent via the Mock Server, it returns a corresponding response based on your definitions. You can also test your API using Production Server within Apiary. APIMatic lets you define Test Cases in your API description so when you generate an SDK the test cases in the particular language will also be automatically generated. You can use these test cases to test your API as well as your SDK. Postman is another crucial tool for testing your API service. It lets you construct requests quickly and write test suites for them as well.</p>
<p id="adec" class="graf graf--p graf-after--p"><a class="markup--anchor markup--p-anchor" href="https://www.runscope.com/" target="_blank" rel="noopener" data-href="https://www.runscope.com/">Runscope</a>, an API monitoring and testing service allows customers using machine-readable Swagger, Postman Collections or HAR to use their “Import Tests” feature that takes the API description format and creates tests to discover and debug API issues.</p>

<h3 id="19d6" class="graf graf--h4 graf-after--p">API Monitoring</h3>
<p id="5e73" class="graf graf--p graf-after--h4">It is very important that your API service is up and available for all the customers at all times. If there is downtime, the issue must be quickly identified and fixed to avoid customer inconvenience. API Monitoring services like <a class="markup--anchor markup--p-anchor" href="https://www.runscope.com/" target="_blank" rel="noopener" data-href="https://www.runscope.com/">Runscope</a>, <a class="markup--anchor markup--p-anchor" href="https://www.apiscience.com/" target="_blank" rel="noopener" data-href="https://www.apiscience.com/">APIScience</a>, <a class="markup--anchor markup--p-anchor" href="https://smartbear.com/" target="_blank" rel="noopener" data-href="https://smartbear.com/">SmartBear </a>aim to do just that. The three aspects to API monitoring are:</p>
<p id="c31f" class="graf graf--p graf-after--p">1. Performance: Responses are getting returned in the acceptable time range</p>
<p id="4c7b" class="graf graf--p graf-after--p">2. Correctness: The responses are as expected</p>
<p id="53f1" class="graf graf--p graf-after--p">3. Availability: Service is accessible and responding</p>
<p id="8a74" class="graf graf--p graf-after--p">Machine-readable descriptions are making it possible to enable API monitoring for your API. Make use of APIMatic integration with Runscope to get <a class="markup--anchor markup--p-anchor" href="https://blog.runscope.com/posts/runscope-powered-sdks" target="_blank" rel="noopener" data-href="https://blog.runscope.com/posts/runscope-powered-sdks">Runscope-enabled SDKs</a>. By using Runscope powered SDKs, API providers could inspect/debug all of the request and response data traveling back and forth from the clients using their SDKs.</p>

<h2 id="c9ec" class="graf graf--h3 graf-after--p">Looking into the Future</h2>
<p id="fa4d" class="graf graf--p graf-after--h3 graf--trailing">The possibilities that machine-readable descriptions open up aren’t limited to those mentioned above. There is a lot of work going on in this area. APIMatic is now allowing you to directly deploy your <a href="https://docs.apimatic.io/generate-sdks/deploy-sdk-to-github">SDKs to GitHub</a> and let you enable Continuous Integration on your SDKs, etc. SwaggerHub lets you collaborate real-time with your team throughout the API lifecycle. Apiary Command line tools and Github Sync features also opens several opportunities to benefit from. The list goes on and on. APIs are becoming a vital part of our development lives and it will be wrong to shut our eyes to its importance. Machine-readable descriptions may not present a complete solution to your problem but a rightful choice of an API format will at least take you a long way towards your goal saving you lots of time, money and hard work.</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/why-your-api-needs-machine-readable-description-832e805f6855/">Why Your API Needs Machine-Readable Description</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/why-your-api-needs-machine-readable-description-832e805f6855/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>API Design and API Consumption in One Place</title>
		<link>/blog/api-design-and-api-consumption-in-one-place/</link>
					<comments>/blog/api-design-and-api-consumption-in-one-place/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 13 Feb 2017 11:02:53 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api Description]]></category>
		<category><![CDATA[Apiary]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[Apimatic Partners]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=498</guid>

					<description><![CDATA[<p>After the integration of APIMatic’s API consumption services into the Apiary’s API design offerings, the overall developer’s experience has led towards total automation of API delivery mechanism. APIMatic’s SDK generating Widget complements the current API documentations in Apiary with only a single click. This widget is a simple solution for generating SDKs in any of [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/api-design-and-api-consumption-in-one-place/">API Design and API Consumption in One Place</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="498" class="elementor elementor-498">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-594d5d3b elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="594d5d3b" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-717c7ec1" data-id="717c7ec1" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-60e29927 elementor-widget elementor-widget-text-editor" data-id="60e29927" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter" src="/wp-content/uploads/2021/12/1FJu0NyBtTSnHGFsQu7zQ9Q.png" alt="Apiary API Design and APIMatic API Consumption in One Place" width="823" height="343"></p>
</div>
</div>
</div>
</div>
<!-- wp:paragraph /--><!-- /wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">After the integration of APIMatic’s API consumption services into the Apiary’s API design offerings, the overall developer’s experience has led towards total automation of API delivery mechanism. APIMatic’s SDK generating Widget complements the current API documentations in Apiary with only a single click. This widget is a simple solution for generating SDKs in any of the 10 most popular languages for consuming APIs. Integrating APIMatic into your Apiary portal is actually quite easy. If you still haven’t performed this integration, then visit <a href="https://docs.apimatic.io/integrations/apiary/">the tutorial</a>. It is only a 4-step process.</p>
</div>
</div>
</div>
</div>
<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-500 aligncenter" src="/wp-content/uploads/2021/12/0_l5CTq3ycv5zArFHw.png" alt=""></p>
<figcaption>Embedded SDK Generating Widget</figcaption>
</figure>
</div>
<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="7fcd" class="">Today, we are glad to introduce two of our new updates to this collaboration for all developers who want to extend API consumption and improve API capabilities. This blog highlights main attributes to our latest development.</p>
<h2 id="45fd" class="">Support for API Elements</h2>
<p id="9d34" class="">Apiary has recently deprecated AST for parsing API Blueprint files and introduced a new format known as API Elements for describing APIs and complex data structures. Its format is so generic that it supports both Swagger and API Blueprint files in a rather more effective way. Since, all the Swagger and API Blueprint users are using API Elements, hence, it makes sense that APIMatic just cannot stay behind. In order to prevent our users from any sort of compatibility issues, we also brought our support for API Elements for its internal parsing of API Blueprint files. Hence now, conversion of API Blueprint markdown into JSON has gone even more efficient and effective.</p>
</div>
</div>
</div>
</div>
<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-501 aligncenter" src="/wp-content/uploads/2021/12/0_uPHf4hX-Gf_zA1Ze.png" alt=""></p>
<figcaption>API Elements Format</figcaption>
</figure>
</div>
<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="0913" class="">Generate Test Cases Automatically</h2>
<p id="a8f3" class="">APIMatic has also released a new feature where we utilize the API Blueprint example values and request response body objects to automatically generate test cases. Users can then not only generate SDKs but can also easily test them.</p>
</div>
</div>
</div>
</div>
<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-502" src="/wp-content/uploads/2021/12/0_v7UyESmQGqGok9dJ.png" alt=""></p>
<figcaption>Test Cases in Apiary Definition</figcaption>
</figure>
</div>
<!-- /wp:image -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">If you have an existing API description in APIMatic with test cases, exporting it into API Blueprint would also load the example values from these test cases.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<figure id="attachment_503" aria-describedby="caption-attachment-503" style="width: 625px" class="wp-caption aligncenter"><img class="wp-image-503" src="/wp-content/uploads/2021/12/0_lSXE-rdjjj_yvPs.png" alt="Sample test case in APIMatic" width="625" height="414"><figcaption id="caption-attachment-503" class="wp-caption-text">Sample test case in APIMatic</figcaption></figure>
</div>
</div>
</div>
</div>
<!-- /wp:image -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 class="">APIMatic in Action</h2>
</div>
</div>
</div>
</div>
<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-504" src="/wp-content/uploads/2021/12/0_xCicDVCOG-ZTmT0M.png" alt=""></p>
<figcaption>CI/CD Life cycle of Dude Solutions</figcaption>
</figure>
</div>
<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="a25f" class="">Dude Solutions have completely automated their system by integrating the delivery mechanisms of both Apiary and APIMatic into their CI/CD life cycle. The deal with this automation is that once an API description is updated in the backend, APIMatic’s CodeGen API saves our customers from manually updating the NuGet changes and publishing them. All it takes is less than a minute from updating API descriptions to publishing the updated SDKs. This DevOps flow has reduced our customer’s time to release the updates from 3 weeks to 18 seconds. Not just this, they have also reduced a great amount of development and maintenance costs. Hence, as a result companies are provided with responsiveness and agility in their API management processes.</p>
<p id="117e" class="">This is how APIMatic and Apiary are working together to enhance the overall developer’s experience by providing innovative and easy solutions. This widget is just one innovation; wait for more advanced features to come! Visit our <a href="https://www.apimatic.io/">website</a> for amazing new API solutions.</p>
</div>
</div>
</div>
</div>
<!-- wp:paragraph /--><!-- /wp:image -->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/api-design-and-api-consumption-in-one-place/">API Design and API Consumption in One Place</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/api-design-and-api-consumption-in-one-place/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Introducing New Supported Formats: RAML 1.0, Postman 2.0</title>
		<link>/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/</link>
					<comments>/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 25 Nov 2016 10:53:46 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Api Description]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Postman]]></category>
		<category><![CDATA[Raml]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=469</guid>

					<description><![CDATA[<p>The wait is over! We have added RAML 1.0 and Postman 2.0 to our list of &#160;supported API formats. So grab your RAML 1.0 or Postman 2.0 APIs and start converting them to other formats of your choice or convert your existing APIs to these new formats. Unlike before, you can now also convert your [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/">Introducing New Supported Formats: RAML 1.0, Postman 2.0</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="469" class="elementor elementor-469">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-22a9c99d elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="22a9c99d" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-3452a568" data-id="3452a568" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-b371405 elementor-widget elementor-widget-text-editor" data-id="b371405" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="f95e" class="">The wait is over! We have added RAML 1.0 and Postman 2.0 to our list of &nbsp;supported API formats. So grab your RAML 1.0 or Postman 2.0 APIs and start converting them to other formats of your choice or convert your existing APIs to these new formats. Unlike before, you can now also convert your APIs to Postman 1.0.</p>
<p id="03ae" class="">For this blog, we will be using the APIMatic Calculator API description file as an example. You can grab this file when you export this API from the APIMatic Dashboard to APIMATIC format.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="alignnone wp-image-470" src="/wp-content/uploads/2021/12/1__9vtGsvibJsI-8DJ9T9TmA.png" alt="APIMatic now supports API Formats RAML 1.0, Postman 2.0  " width="348" height="399"></p>
<figcaption>Export API Description</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="cad9" class="">RAML 1.0</h2>
<p id="2b03" class="">You can import your RAML 1.0 APIs from the Dashboard or you can use our Transformer to convert RAML 1.0 files to other supported API formats. You can even generate RAML 1.0 files from APIs in other API formats using the Transformer.</p>
<p id="ae17">Navigate to the Transformer and using the Calculator API convert it to RAML 1.0 as follows:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="alignnone wp-image-471" src="/wp-content/uploads/2021/12/1_GVnuShzdGUdth4cBFAfDnQ.png" alt="API Conversion" width="700" height="441"></p>
<figcaption>API Conversion</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="a871" class="">After successful conversion, you will get your converted file in RAML 1.0 format.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-472" src="/wp-content/uploads/2021/12/1_HEea_w9CtqEk_gJ4lWN7ng.png" alt=""></p>
<figcaption>API Transformer</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:preformatted -->
<pre class=""><code class="language-yaml">#%RAML 1.0
title: APIMATIC Calculator
version: 1.0
baseUri: http://examples.devapi.dream.press/apps/calculator
documentation:
- title: APIMATIC Calculator
content: Simple calculator API hosted on APIMATIC
/{operation}:
get:
 displayName: Calculate
 description: Calculates the expression using the specified  
 operation.
 queryParameters:
    x:
     required: true
     displayName: x
     description: The LHS value
     type: number
     format: double
    y:
     required: true
     displayName: y
     description: The RHS value
     type: number
     format: double
    responses:
     200:
    description: Success
    body:
     text/plain:
      displayName: response
      type: number
      format: double
    uriParameters:
     operation:
      required: true
      displayName: operation
      description: The operator to apply on the variables
      type: string
      enum:
      - SUM
      - SUBTRACT
      - MULTIPLY
      - DIVIDE</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="7d07">You can also convert from RAML 1.0 back to other formats as required.</p>
<h2 id="db8d" class="">Postman</h2>
<p id="3aa4" class="">You can now convert back and forth from Postman 2.0 files. Support for converting from Postman 1.0 to other formats has been there for a while. But now we offer support for Postman 1.0 export as well. You can import your Postman 2.0 APIs from the Dashboard or you can use our <a href="https://docs.devapi.dream.press/api-transformer/overview-transformer">Transformer</a> to convert Postman 2.0 files to other supported formats.</p>
<p id="fb60" class="">Go to Transformer and convert your Calculator API to Postman 1.0 or Postman 2.0 as per your choice. For our example we will be converting to Postman 2.0.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-474" src="/wp-content/uploads/2021/12/1_9PNn2GIzIZ4pDdU27gE9uw.png" alt=""></p>
<figcaption>API Conversion in Postman</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="c7b2">After successful conversion, you will get your converted file in Postman 2.0 format</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">{
  &quot;info&quot;: {
    &quot;name&quot;: &quot;APIMATIC Calculator&quot;,
    &quot;_postman_id&quot;: &quot;a2022ecc-bc18–42bc-9fd4-ccd964606911&quot;,
    &quot;description&quot;: &quot;Simple calculator API hosted on APIMATIC&quot;,
    &quot;schema&quot;: &quot;https://schema.getpostman.com/json/collection/v2.0.0/&quot;
  },
  &quot;item&quot;: [
    {
      &quot;name&quot;: &quot;Simple Calculator&quot;,
      &quot;item&quot;: [
        {
          &quot;id&quot;: &quot;e95fc07e-85eb-40f3-a59a-99e57a808c0e&quot;,
          &quot;name&quot;: &quot;Calculate&quot;,
          &quot;request&quot;: {
            &quot;url&quot;: {
              &quot;protocol&quot;: &quot;http&quot;,
              &quot;host&quot;: &quot;examples.devapi.dream.press&quot;,
              &quot;path&quot;: [
                &quot;apps&quot;,
                &quot;calculator&quot;,
                &quot;:operation&quot;
              ],
              &quot;port&quot;: &quot;80&quot;,
              &quot;query&quot;: [
                {
                  &quot;key&quot;: &quot;x&quot;,
                  &quot;value&quot;: &quot;undefined&quot;
                },
                {
                  &quot;key&quot;: &quot;y&quot;,
                  &quot;value&quot;: &quot;undefined&quot;
                }
              ],
              &quot;variable&quot;: [
                {
                  &quot;id&quot;: &quot;operation&quot;,
                  &quot;value&quot;: &quot;&quot;
                }
              ]
            },
            &quot;method&quot;: &quot;GET&quot;,
            &quot;body&quot;: {
              &quot;mode&quot;: &quot;raw&quot;
            }
          },
          &quot;response&quot;: [
            {
              &quot;code&quot;: 200
            }
          ]}]}]}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="c378">You can directly import this file into your Postman app.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-476" src="/wp-content/uploads/2021/12/1_kdKijfORq8rs8iIVibfgMg.png" alt=""></p>
<figcaption>Postman App</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="6598" class="">After successful conversion, you will get your converted file in RAML 1.0 format.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-477" src="/wp-content/uploads/2021/12/1_3ecP0GAtLc-LKTGTycd2wg.png" alt=""></p>
<figcaption>Postman App</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Do you have an APIMatic API definition that also includes test cases? Good news! Exporting to Postman will create completely ready-to-test collection of requests.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/">Introducing New Supported Formats: RAML 1.0, Postman 2.0</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Swagger 2.0 Extension for Code Generation Settings</title>
		<link>/blog/swagger-2-0-extension-for-code-generation-settings/</link>
					<comments>/blog/swagger-2-0-extension-for-code-generation-settings/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Tue, 25 Aug 2015 11:02:52 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Api Description]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Automatic Code Generation]]></category>
		<category><![CDATA[Sdks]]></category>
		<category><![CDATA[Swagger]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=456</guid>

					<description><![CDATA[<p>Swagger 2.0 spec was created with the foresight of allowing 3rd-party vendors to implement tool-specific extensions. These extensions allow customizing behaviors beyond simple API descriptions. Traditionally, such behaviors used to stay locked inside custom settings, restricting the interoperability of tools and services. Using these extensions, we can not only offer extended compatibility between tools and [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/swagger-2-0-extension-for-code-generation-settings/">Swagger 2.0 Extension for Code Generation Settings</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="456" class="elementor elementor-456">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-5ed6a492 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="5ed6a492" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-24e069cf" data-id="24e069cf" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-1e8c43a4 elementor-widget elementor-widget-text-editor" data-id="1e8c43a4" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-457" src="/wp-content/uploads/2021/12/1_Cli7qudxir0f9ed6FmCQwA.png" alt="APIMatic's Swagger 2.0 Extension for Code Generation Settings " width="623" height="143" /></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3853" class="">Swagger 2.0 spec was created with the foresight of allowing 3rd-party vendors to implement tool-specific extensions. These extensions allow customizing behaviors beyond simple API descriptions. Traditionally, such behaviors used to stay locked inside custom settings, restricting the interoperability of tools and services. Using these extensions, we can not only offer extended compatibility between tools and services, but this also opens up a pathway to improve and add missing features that eventually become de-facto standard for API descriptions. For example, extensions that allow customization of API analytics data collections e.g., how to treat rate limit exceeded, may eventually become part of official Swagger spec if the developer community decide in its favor. One widely known example of Swagger vendor extension is the <a href="https://github.com/apigee-127/a127">Apigee a-127 extension</a>, which allows you to generate APIs in Node.js. API Evangelist has already written a post about this concept some while ago (<a href="http://apievangelist.com/2015/03/12/crafting-exactly-the-api-definition-you-need-with-swagger-vendor-extensions/">read it here</a>).</p>
<h2 id="dc71">APIMatic CodeGen Extensions</h2>
<p id="2274" class="">APIMATIC’s code generation engine is highly customizable. You can decide on naming convention, configuration stores, and perform some white labelling through our CodeGen Settings, and Advanced Settings per Endpoint. However, this customizability was previously locked behind our API Editor UI, and inside our internal API format (called APIMATIC format). We were often asked how to specify these settings from other API description formats, specially Swagger. So, we are now announcing our vendor extensions for Swagger 2.0, which can be used to specify the said settings for complete customizability. The extensions are supported by both the “Import” API operation, as well as by our Code Generation as a Service API (<a href="https://www.apimatic.io/blog/post/announcing-code-generation-api">read more here</a>).</p>
<h2 id="3dce" class="">CodeGen Settings for Swagger 2.0</h2>
<p id="9906">We followed the <a href="https://github.com/swagger-api/swagger-spec/blob/master/guidelines/EXTENSIONS.md">Swagger 2.0 extensions spec</a> and created a new property definition inside the “info” object, named “<code>x-codegen-settings</code>”. These settings are globally applicable to all operations and schema definitions. See example below.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-json">{
 “swagger”: 2.0,
 “info”: {
  …,
  “x-codegen-settings”: {
  “generateAsyncCode”: true,
  “useMethodPrefix”: true,
  “useModelPostfix”: true,
  “useControllerPostfix”: true,
  “useEnumPostfix”: true,
  “useConstructorsForConfig”: true,
  “iOSUseAppInfoPlist”: true,
  “iOSGenerateCoreData”: false,
  “androidUseAppManifest”: true,
  “collectParameters”: false,
  “csharpDefaultNamespace”: “ACME.CORP.API”,
  “javaDefaultPackageName”: “com.acme.corp.api”,
  “appendContentHeaders”: true,
  “brandLabel”: “ACME Corp.”,
  “userAgent”: “APIMATIC 2.0”,
  “enableAdditionalModelProperties”: false
  }
 },
 …
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3592">The purpose of these parameters is explained below.</p>
<h3 id="9476">generateAsyncCode</h3>
<p id="69fb">When true, the CodeGen engine generates asynchronous C# and Java code.</p>
<h3 id="f352"><strong>useMethodPrefix</strong></h3>
<p id="594f">When true, HTTP verbs are used as prefix for generated controller methods.</p>
<h3 id="b9b4"><strong>useModelPostfix</strong></h3>
<p id="05b0">When true, a postfix “Model” is appended to all classes generated from schemas.</p>
<h3 id="9687"><strong>useControllerPostfix</strong></h3>
<p id="f8e2">When true, a postfix “Controller” is appended to all controllers generated from path groups.</p>
<h3 id="a44e"><strong>useEnumPostfix</strong></h3>
<p id="ae95">When true, a postfix “Enum” is appended to all enumerations lifted from “allowedValues”.</p>
<h3 id="5fe6"><strong>useConstructorsForConfig</strong></h3>
<p id="d7a6">When true, configuration values e.g., authentication credentials, are accepted as controller constructor parameters. Otherwise, these values generate variables in a Configuration class.</p>
<h3 id="4a4d"><strong>iOSUseAppInfoPlist</strong></h3>
<p id="69c7">When true, configuration values e.g., authentication credentials, are expected in app-info.plist file for the iOS SDK. When set, this setting ignores useConstructorsForConfig flag.</p>
<h3 id="df42">iOSGenerateCoreData</h3>
<p id="c309">When true, iOS CoreData schema and classes are generated.</p>
<h3 id="c597">androidUseAppManifest</h3>
<p id="840a">When true, configuration values e.g., authentication credentials, are expected in AndroidManifest.xml file for the Android SDK. When set, this setting ignores useConstructorsForConfig flag.</p>
<h3 id="f71f">collectParameters</h3>
<p id="efb3">When true, operation parameters are expected to passed as a collection. For example in PHP, the generated method expects a Map containing parameters as Key-Value pairs. This is currently implemented for PHP, Python, GO, and Objective-C. When set, this is applied globally on all endpoints/operations. If you wish to use this option on specific endpoints, use the x-operation-settings::collectParameters instead.</p>
<h3 id="5a71">csharpDefaultNamespace</h3>
<p id="5ad9">A valid C# namespace value to be used as the default namespace. Leave empty or null to automatically generate.</p>
<h3 id="0c1b">javaDefaultPackageName</h3>
<p id="53c0">A valid Java package name to be used as the base package name. Leave empty or null to automatically generate. This value is applied for both Java and Android code generation templates.</p>
<h3 id="5cbc">appendContentHeaders</h3>
<p id="04cc">When true, code generation engine automatically detects request and response schema and appends content headers e.g., “accept: application/json” and “content-type: application/json” headers for JSON serialization mode.</p>
<h3 id="1ef4">brandLabel</h3>
<p id="cb2b">A string value to brand the generated files. For example: “Acme Corp.”</p>
<h3 id="1769">userAgent</h3>
<p id="1bca">A string value to use as user-agent in the API calls. This is useful for analytics and tracking purposes. For example: “SDK V1.1”</p>
<h3 id="e5fb">enableAdditionalModelProperties</h3>
<p id="eac3">When true, additional or unknown properties in the response JSON are collected into a dictionary.</p>
<h2 id="cf10">Advanced Settings</h2>
<p id="ee50">APIMATIC allows further customization of endpoints (called operations in Swagger). These settings can be specified inside an “operation” object using property name “<code>x-operation-settings</code>”. See an example as following.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-json">“paths”: {
 “/pets”: {
 “get”: {
 …,
 “x-operation-settings” : {
 “collectParameters” : false,
 “allowDynamicQueryParameters”: true,
 “allowDynamicFormParameters”: false,
 “isMultiContentStreaming”: false
 }
 }
 }
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="197a">The purpose of these parameters is explained below.</p>
<h3 id="674d">collectParameters</h3>
<p id="8baf">When true, this operation’s parameters are expected to passed as a collection. For example in PHP, the generated method expects a Map containing parameters as Key-Value pairs. This is currently implemented for PHP, Python, GO, and Objective-C.</p>
<h3 id="a3be">useModelPostfix</h3>
<p id="451e">When true, a postfix “Model” is appended to all classes generated from schemas.</p>
<h3 id="1775">allowDynamicQueryParameters</h3>
<p id="fb81">When true, the generated method has an additional Map input, which may contain dynamic number of query parameters as Key-Value pairs.</p>
<h3 id="f3b2">allowDynamicFormParameters</h3>
<p id="c16a">When true, the generated method has an additional Map input, which may contain dynamic number of form parameters as Key-Value pairs.</p>
<h3 id="82f2">isMultiContentStreaming</h3>
<p id="aa89">When true, it indicates that this operation is a streaming endpoints. For example <a href="https://dev.twitter.com/streaming/overview">Twitter Streaming API</a> endpoints.</p>
<h2 id="466b">Additional Headers</h2>
<p id="cdb7">APIMATIC allows defining global headers that are sent with every API call. These headers are in addition to any headers required for authentication or defined as parameters. These headers can be specified inside a “Security Scheme” object using property name “x-additional-headers”. See an example below.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-json">“securityDefinitions”: {
 “basicAuth”: {
 “type”: “basic”,
 “x-additional-headers”: [
 {
 “name”: “API Version”,
 “description”: “The version number indicator for the API”,
 “default”: “1.1”
 },
 {
 “name”: “SDK Version”,
 “description”: “The version number indicator for the SDK”,
 “default”: “1.1.0.1”
 },
 …
 ]
 }
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="2e4e">Please direct any queries on this aspect to our <a href="https://apimatic.zendesk.com/">support team</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/swagger-2-0-extension-for-code-generation-settings/">Swagger 2.0 Extension for Code Generation Settings</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/swagger-2-0-extension-for-code-generation-settings/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
