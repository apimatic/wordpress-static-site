
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Apimatic Features Archives - APIMatic</title>
	<atom:link href="/blog/tag/apimatic-features/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Thu, 24 Mar 2022 07:15:24 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.4</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>Apimatic Features Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Introducing API Developer Experience Analytics</title>
		<link>/blog/introducing-api-developer-experience-analytics/</link>
					<comments>/blog/introducing-api-developer-experience-analytics/#respond</comments>
		
		<dc:creator><![CDATA[Adeel Ali]]></dc:creator>
		<pubDate>Thu, 28 Oct 2021 11:26:43 +0000</pubDate>
				<category><![CDATA[Analytics]]></category>
		<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[API analytics]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[API portal]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1543</guid>

					<description><![CDATA[<p>&#160; How do you define the success of an API? Is it the number of developers using the API, the number of apps built using the API, the revenue stream it has created, or perhaps some other KPI? Whatever the criteria, the important bit is to constantly generate demand among the target audience, and keep [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/introducing-api-developer-experience-analytics/">Introducing API Developer Experience Analytics</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1543" class="elementor elementor-1543">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-5dad33c5 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="5dad33c5" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-6d6d6af3" data-id="6d6d6af3" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-5ec4bf46 elementor-widget elementor-widget-text-editor" data-id="5ec4bf46" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.6.1 - 23-03-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="wp-image-1560 aligncenter" src="/wp-content/uploads/2021/12/DX-Analytics-2_Facebook-copy-08-300x157.png" alt="" width="450" height="235"></p>
<p class="">&nbsp;</p>
<p class=""><span style="font-weight: 400;">How do you define the success of an API? Is it the number of developers using the API, the number of apps built using the API, the revenue stream it has created, or perhaps some other KPI? Whatever the criteria, the important bit is to constantly generate demand among the target audience, and keep measuring and aligning their activities towards the desired success criteria.</span></p>

<h2 class=""><strong>Knowing your Audience</strong></h2>
<p class=""><span style="font-weight: 400;">Defining an ideal customer profile is the first step of any demand generation strategy. Imagine after publishing a well-crafted API, you want to go out and start marketing it, but do you actually know what your ideal consumer/developer profile is? Do you want to target consumers of mobile or web or both? What developer community and platforms are important to you?&nbsp;</span></p>
<p class=""><img class="aligncenter wp-image-1545 size-full" src="/wp-content/uploads/2021/12/audience.png" alt="" width="810" height="323"></p>
<p class=""><span style="font-weight: 400;">Remember, your API is language-agnostic, but your targeted platforms and developers are not. Therefore, understanding the needs of a large diverse audience is as important as speaking their language. </span><a href="https://www.youtube.com/watch?v=WNeZxbc4dtI"><span style="font-weight: 400;">Here is a talk</span></a><span style="font-weight: 400;"> elucidating how Twilio has created a phenomenal API experience by supporting a variety of languages.</span></p>

<h2 class="">How are Developers Interacting with Your API?</h2>
<p class=""><span style="font-weight: 400;">After identifying the success criteria for your API, and knowing who your audience is, it’s time to measure how they perform once they have landed on your </span><a href="https://www.apimatic.io/developer-experience-portal/"><span style="font-weight: 400;">API portal</span></a><span style="font-weight: 400;">. For this purpose, we are introducing a novel kind of metrics at APIMatic.io, which we call “Developer Experience Analytics”.&nbsp;</span></p>
<p class=""><img class="aligncenter wp-image-1548 size-large" src="/wp-content/uploads/2021/12/overview-1024x285.png" alt="Performance Overview in API Developer Experience Analytics " width="1024" height="285"></p>
<p class=""><span style="font-weight: 400;">While there exist a bunch of solutions to analyze API traffic, APIMatic’s analytics are focused on the developer experience with respect to developers and programming platforms. For example, it can help in knowing </span><span style="font-weight: 400;">how many users get to make a successful call with your API before they even start coding. Or how many developers are running into problems while trying out an API, and the nature of their problems.</span><span style="font-weight: 400;">
</span></p>
<p class=""><span style="font-weight: 400;">There is a variety of metrics available, such as:</span><span style="font-weight: 400;">
</span></p>

<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><b>Time to First API Call (TTFC):</b><span style="font-weight: 400;"> shows the average time taken by different users to the first API call with the 2XX status code. Reaching the first successful API call means a developer has figured out the API communication setup and authentication requirements etcetera and is now ready to start integrating the API in production code. The time taken to reach the first call can help measure how intuitive and straightforward your&nbsp; API’s onboarding process is.</span>&nbsp;</li>
 	<li style="font-weight: 400;" aria-level="1"><b>API Portal Visits</b><span style="font-weight: 400;">: represents the traffic on your API portal, but at a more granular level based on the languages/platform documentation visited.&nbsp; The language distribution can help measure the popularity of a particular language or gauge the results of a demand generation effort being made to attract a particular developer community.</span></li>
</ul>
&nbsp;
<p class=""><img class="aligncenter wp-image-1544 size-large" src="/wp-content/uploads/2021/12/api-portal-visits-1024x417.png" alt="API Portal Visits in API Analytics" width="1024" height="417"></p>

<ul>
 	<li><b>Portal Page Views</b><span style="font-weight: 400;">: portrays the most popular pages visited by the developers of different languages. This could be a great indicator of the importance of a particular language, endpoint, use case, or a custom guide.</span><span style="font-weight: 400;">
</span></li>
</ul>
<p class=""><img class="aligncenter wp-image-1547 size-large" src="/wp-content/uploads/2021/12/image3-1024x415.png" alt="Portal Page Views in API Analytics" width="1024" height="415"></p>

<ul>
 	<li><b>API Code Playground calls:</b><span style="font-weight: 400;"> depicts the actual API calls made by users using their own data, right from the docs. The result of those calls, in terms of returned HTTP status codes, is quite insightful to fix any potential issues in the docs or in the developers’ understanding.</span><span style="font-weight: 400;">
</span></li>
</ul>
<p class=""><img class="aligncenter wp-image-1546 size-large" src="/wp-content/uploads/2021/12/direct-api-calls-1024x425.png" alt="Direct API Calls in API Analytics" width="1024" height="425"></p>
<p class=""><span style="font-weight: 400;">Moreover, the API code playground also generates dynamic code samples, so analyzing the calls with respect to languages would also help identify the efforts and struggles of the developers of different languages.</span><span style="font-weight: 400;">
</span></p>
<p class=""><img class="aligncenter wp-image-1549 size-large" src="/wp-content/uploads/2021/12/trends-api-calls-1024x336.png" alt="Developer Experience Analytics " width="1024" height="336"></p>
<p class=""><span style="font-weight: 400;">For further details and a complete list of available metrics, please visit our detailed documentation on the </span><a href="https://docs.apimatic.io/publish-apis/analytics-dashboard/"><span style="font-weight: 400;">Developer Experience Analytics</span></a><span style="font-weight: 400;">.</span><span style="font-weight: 400;"> We aim to add more metrics in the future, including a few from the SDKs usage on the client-side. Please feel free to </span><a href="https://www.apimatic.io/contact/"><span style="font-weight: 400;">reach out</span></a><span style="font-weight: 400;"> for any feedback and suggestions.</span></p>
<p class="">&nbsp;</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/introducing-api-developer-experience-analytics/">Introducing API Developer Experience Analytics</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/introducing-api-developer-experience-analytics/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>A GitHub Action for Transforming APIs</title>
		<link>/blog/a-github-action-for-transforming-apis/</link>
					<comments>/blog/a-github-action-for-transforming-apis/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 30 Nov 2020 09:42:40 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[GitHub Actions]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[automation]]></category>
		<category><![CDATA[Github]]></category>
		<category><![CDATA[github actions]]></category>
		<guid isPermaLink="false">https://apimatic-blog.000webhostapp.com/?p=128</guid>

					<description><![CDATA[<p>How does it work? This Github Action uploads and converts any API Specification into one of the supported formats listed here, The user just need to use the GitHub action in their repository on GitHub and provide the API Specification URL and export format as the arguments to the action. It provides the URL to [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/a-github-action-for-transforming-apis/">A GitHub Action for Transforming APIs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="128" class="elementor elementor-128">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-fe52aa3 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="fe52aa3" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-458ce4a4" data-id="458ce4a4" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-63d0add elementor-widget elementor-widget-text-editor" data-id="63d0add" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-129" src="/wp-content/uploads/2021/12/1_1tkLbPa_i4tXkimSG-PrUA.png" alt="A GitHub Action for Transforming APIs" width="800" height="320"></p>
</figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Recently, there has been a lot of talk around <a href="https://github.com/features/actions" target="_blank" rel="noreferrer noopener">GitHub Actions</a>, and the wide range of features it can offer with just a simple YAML based workflow file!</p>
<h2 class=""><strong>What are GitHub Actions?</strong></h2>
<p class="">GitHub Actions connect all of your tools to automate every step of your development workflow. Easily deploy to any cloud, create tickets in Jira, or publish a package to npm. If you want to understand how GitHub actions work and how to set up existing actions from the <a href="https://github.com/marketplace?type=actions" target="_blank" rel="noreferrer noopener">GitHub marketplace</a> then you should look at this <a href="https://gabrieltanner.org/blog/an-introduction-to-github-actions" target="_blank" rel="noreferrer noopener">guide</a>.</p>
<p class="">In this article, we will use a&nbsp;<a href="https://github.com/marketplace/actions/apimatic-transformer" target="_blank" rel="noreferrer noopener">GitHub Action for API Transformer</a> for transforming API’s to the <a href="https://www.apimatic.io/transformer/#supported-formats" target="_blank" rel="noreferrer noopener">supported formats</a> by APIMatic.</p>
<h2 class=""><strong>What is APIMatic Transformer?</strong></h2>
<p class="">APIMatic Transformer allows its users to convert between different API description formats e.g. Swagger, RAML, etc. This enables the user to benefit from a wide range of tools available associated with any format, not just one.</p>
<h2 class=""><strong>APIMatic Transformer GitHub Action</strong></h2>
<p class="">We at APIMatic have created a GitHub action for our users that lets them use APIMatic Transformer through a GitHub action available on the GitHub marketplace to help them establish CI/CD pipelines and automating their workflows.</p>
</div>
</div>
</div>
</div>
<!-- /wp:image -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1zfsvPTFhptMO64pIVBLO-g.png" alt=""></p>
<figcaption>Workflow file using APIMatic Transformer GitHub&nbsp;action</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2><strong>How does it work?</strong></h2>
<p class="">This <a href="https://github.com/actions" target="_blank" rel="noreferrer noopener">Github Action</a> uploads and converts any API Specification into one of the supported formats listed <a href="https://www.apimatic.io/transformer/#supported-formats" target="_blank" rel="noreferrer noopener">here</a>, The user just need to use the GitHub action in their repository on GitHub and provide the API Specification URL and export format as the arguments to the action. It provides the URL to the converted API specification in the format specified by the user.</p>
<p>Here is an example workflow file that explains how you can use it with your GitHub repository:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:prismatic/blocks -->
<pre class=""><code class="language-yaml">steps:
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
      - name: APIMatic Transformer
        uses: apimatic/apimatic-transformer-action@v0.1
        id: transform
        with:
         auth: ${{ secrets.Test }}
         inputURL: &#039;https://petstore.swagger.io/v2/swagger.json&#039;
         exportFormat: &#039;raml&#039;
     # Use the Transformed API Spec as output from our action (id:transform)
      - name: Get the API Spec URL
        run: echo &quot;${{ steps.transform.outputs.specurl }}&quot;</code></pre>
<!-- /wp:prismatic/blocks -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>Now let me explain how this is working by directing each of the above-mentioned steps.</p>
<p class="">We are using <code>steps:</code> to let actions know that we are creating a step below with the name <code>Checkout</code></p>
<p>We are using <code>uses: actionscheckout@v2</code> which means that our step <code>Checkout</code> is using another action called <code>checkout</code> that checks out the current repository and use it.</p>
<p class="">Then we have the Transform API Spec step which is actually transforming the API Spec, Here <code>apimatic-transformer-action</code> is the name of the action, and <code>id:transform</code> is just a unique id assigned to this step so we can use output generated through this step in later steps. We are passing <code>auth: ${{ secrets.Test }}</code> that actually uses the secret Test stored in the current repository’s secrets, It is recommended to create an <a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets" target="_blank" rel="noreferrer noopener">encrypted secret</a> for the APIMatic API token (<code>auth</code>).</p>
<h3 class=""><strong>How to create a Basic Authorization token using your APIMatic account?</strong></h3>
<ul class="">
<li>You need to sign up for APIMatic <a href="https://www.apimatic.io/account/register" target="_blank" rel="noreferrer noopener">here</a> using your company email address.</li>
<li>Purchase subscription for APIMatic as per your relevant requirement, details of pricing mentioned <a href="https://www.apimatic.io/pricing" target="_blank" rel="noreferrer noopener">here</a>.</li>
<li>Visit <a href="https://www.blitter.se/utils/basic-authentication-header-generator/" target="_blank" rel="noreferrer noopener">Basic AUTH generator</a>, Enter your email and password to generate the Basic Authorization token which will look like this: Authorization: Basic dGVzdEB0ZXN0LmNvbTpyYW5kb20=</li>
<li>Now visit the repository on GitHub where you want to use this GitHub action, Select settings &gt; secrets and Add a new secret and fill in the details as shown below:</li>
</ul>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1KGipCwDXL7ZHhU3qBvWhaQ.png" alt=""></p>
<figcaption>Adding a secret to the GitHub repository</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">We are also passing inputURL and exportFormatas the other arguments for this step and they are corresponding to the API Specification URL and the required format by the user.</p>
<p>In the last step, we are just getting the URL for the generated API Spec in the required format so we can download it and use it as required.</p>
<p>Here is a complete workflow file with multiple steps generating different formats of API using the same APIMatic Transformer GitHub action:</p>
</div>
</div>
</div>
</div>
<pre class=""><code class="language-yaml">name: APITransformer
on: [push]
jobs:
  Test_Transformer:
    runs-on: ubuntu-latest
    name: Testing API Transformer Action
    steps:
      # you must check out the repository
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: APIMatic Transformer
        uses: apimatic/apimatic-transformer-action@v0.1
        id: raml
        with:
         auth: ${{ secrets.Test }}
         inputURL: &#039;https://github.com/mujjazi/apimatic-transformer-action/blob/master/bookingpal.json&#039;
         exportFormat: &#039;raml&#039;
     # Use the Transformed API Spec as output from our action (id:raml)
      - name: Get the API Spec URL
        run: echo &quot;${{ steps.raml.outputs.specurl }}&quot;
        
      - name: APIMatic Transformer
        uses: apimatic/apimatic-transformer-action@v0.1
        id: wsdl
        with:
         auth: ${{ secrets.Test }}
         inputURL: &#039;https://github.com/mujjazi/apimatic-transformer-action/blob/master/bookingpal.json&#039;
         exportFormat: &#039;wsdl&#039;
     # Use the Transformed API Spec as output from our action (id:wsdl)
      - name: Get the API Spec URL
        run: echo &quot;${{ steps.wsdl.outputs.specurl }}&quot;</code><code></code></pre>
<!-- /wp:paragraph -->

<!-- wp:preformatted /-->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">After adding all these details, save the main.yml file and commit the changes to the repository.</p>
<p class="">Now we will make some changes to our API Specification and commit those changes to the repository so that this action is triggered and generate the URL to download the updated API Specification in the required format as shown below:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1quKQkSlhXp_MiRw6RpVvjA.gif" alt=""></p>
<figcaption>Downloading the latest API Specification in the required&nbsp;format</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 class=""><strong>Summary</strong></h2>
<p class="">The GitHub actions are definitely going to be useful in the long term specifically with respect to the CI/CD benefits they offer and it can be really helpful for those maintaining API Specifications on GitHub. With the advancements in technology, you have to make sure that you are equipped with the latest tools for automation and CI/CD so that you can keep up with the market competition and ensure faster release times with excellent quality.</p>
<p class="">We have created this action as per the requests from the customers that they need to use APIMatic Transformer with GitHub actions, Stay tuned and we will be offering more features through GitHub actions in the future.</p>
<p class="">Feel free to use this action and share your feedback, You can always <a href="https://www.apimatic.io/contact" target="_blank" rel="noreferrer noopener">reach out to our team</a> to discuss further regarding APIMatic and its products.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/a-github-action-for-transforming-apis/">A GitHub Action for Transforming APIs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/a-github-action-for-transforming-apis/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Introducing APIMatic CLI</title>
		<link>/blog/introducing-apimatic-cli/</link>
					<comments>/blog/introducing-apimatic-cli/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Tue, 25 Apr 2017 11:02:53 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Cli]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Github]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=518</guid>

					<description><![CDATA[<p>A large number of our users describe their APIs using our API editor and generate SDKs from our website. But there is an equally large niche of our users who prefer using our&#160;CodeGen API&#160;to generate SDKs or our&#160;Transformer API&#160;to transform their API descriptions. We set out with the goal of making the lives of these [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/introducing-apimatic-cli/">Introducing APIMatic CLI</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="518" class="elementor elementor-518">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-25f5ea89 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="25f5ea89" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-6e3a5307" data-id="6e3a5307" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4203d7bf elementor-widget elementor-widget-text-editor" data-id="4203d7bf" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">A large number of our users describe their APIs using our API editor and generate SDKs from our website. But there is an equally large niche of our users who prefer using our&nbsp;<a href="http://docs.apimatic.apiary.io/">CodeGen API</a>&nbsp;to generate SDKs or our&nbsp;<a href="http://docs.apimatictransformerapi.apiary.io/">Transformer API</a>&nbsp;to transform their API descriptions. We set out with the goal of making the lives of these API users easier and came up with the APIMatic CLI.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-519 aligncenter" src="/wp-content/uploads/2021/12/1_fx-_EpWaxA9U4esxbeJyPA.png" alt=""></p>
<figcaption>APIMatic CLI</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e18f" class="">APIMatic CLI is a command line tool written in Python which serves as a wrapper over our own Python SDK. It is available in the form of a small windows executable so you can easily plug it into your build cycle. You no longer have to write your own code or set up a development environment for the consumption of our APIs.</p>
<p id="6fe3" class="">The APIMatic CLI will create the API request for you, call the API and download the generated SDK or the converted API description. It even supports unzipping of zipped SDK files. It allows multiple authentication methods and supports all the features of our APIs i.e. SDK generation, API validation and API transformation. You can provide an API description in multiple ways to it as well. It supports API integration keys from APIMatic, API description files from URLs and also allows you to upload API descriptions from your computer.</p>
<p id="e26f" class="">Getting started with the APIMatic CLI is very easy. Let’s take you through a few different methods of installation and show you some examples of its usage.</p>
<h2 id="2a26" class="">Installing APIMatic CLI</h2>
<p id="32af" class="">Since the APIMatic CLI is written in Python, you have multiple installation options. If you don’t have Python installed, the simplest way to go would be to just download the executable from<a href="https://github.com/apimatic/apimatic-cli/releases">here</a>&nbsp;and run it. If you have Python installed, you can use pip to install the APIMatic CLI. Alternatively, you can install it manually or even directly run the code itself. You can check out the documentation on our Github&nbsp;<a href="https://github.com/apimatic/apimatic-cli#installation">page</a>&nbsp;for clear instructions.</p>
<h2 id="f507" class="">Usage</h2>
<p id="cbce">If you have installed APIMatic CLI using pip, you can start using it by typing:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-bash">apimatic-cli -h</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="6a7d" class="">Command (generate, validate or transform) and authentication (fromkey or fromuser) are the two positional arguments that have to be provided in order to use this tool. There is a whole list of options available for you to build your commands depending on the positional arguments you choose.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>h or — help       Displays the help text and exists.
-api-key          The API key of the API description obtained from 
                  APIMatic.
-platform         The platform for which the SDK needs to be       
                  generated. It can be one of:
                  cs_portable_net_lib, java_eclipse_jre_lib,    
                  java_gradle_android_lib,
                  objc_cocoa_touch_ios_lib, angular_javascript_lib, 
                  ruby_generic_lib,
                  python_generic_lib, php_generic_lib,    
                  node_javascript_lib, go_generic_lib
-download-to      The path of the folder in which to download the 
                  file.
-name             The name of the generated SDK.
-email            The email address of the user’s APIMatic account.
-password         The password of the user’s APIMatic account.
-url              The URL of the API description.
-file             The path of the API description file.
-format           The format to convert the API description to. It 
                  can be one of:
                  APIBluePrint, Swagger10, Swagger20, SwaggerYaml, 
                  WADL2009, RAML, APIMATIC
-download-as      The name (and extension) of the downloaded file.
-skip-unzip       Unzipping of downloaded SDKs is skipped if this 
                  option is used.</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="1e4d" class="">Now, for instance, you want to generate a C# SDK using an API integration key, all you need to type is:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre><code class="language-bash">apimatic-cli generate fromkey — api-key &lt;your key&gt; — platform cs_portable_net_lib — download-to ./SDKs</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="adce" class="">Similarly, if you want to generate a python SDK using user credentials and an API description file while skipping the unzipping part, you can write the following command line:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre><code class="language-bash">apimatic-cli generate fromuser — email &lt;your APIMatic account email&gt; — password &lt;your APIMatic account password&gt; — name TestSDK — file ./data/calculator.json — platform python_generic_lib — download-to ./SDKs — skip-unzip</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="061b" class="">In this way, whatever functions you’d want to perform, all you’ll need to do is type a command on your CLI and that’s it. I hope this article provides sufficient information regarding APIMatic CLI and its usage. For more information, you can always check it out on<a href="https://github.com/apimatic/apimatic-cli">GitHub</a>&nbsp;where complete documentation is provided.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/introducing-apimatic-cli/">Introducing APIMatic CLI</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/introducing-apimatic-cli/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Improved SDKs with Timeouts, Multiple Base URI Support and Custom Exception Classes</title>
		<link>/blog/improved-sdks-with-timeouts-multiple-base-uri-support-and-custom-exception-classes/</link>
					<comments>/blog/improved-sdks-with-timeouts-multiple-base-uri-support-and-custom-exception-classes/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Sat, 04 Mar 2017 08:21:59 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Custom Exception Classes]]></category>
		<category><![CDATA[Multiple Base Uri Support]]></category>
		<category><![CDATA[Sdk Generation]]></category>
		<category><![CDATA[Sdk Timeouts]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=510</guid>

					<description><![CDATA[<p>We never stop thinking of ways to make our SDKs better and easier to use. Due to this constant struggle for self-improvement, you see new features being added every now and then. I will be talking about three of those in this blog: ★ Timeouts ★ Multiple Base URI Support ★ Custom Exception Classes Timeouts [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/improved-sdks-with-timeouts-multiple-base-uri-support-and-custom-exception-classes/">Improved SDKs with Timeouts, Multiple Base URI Support and Custom Exception Classes</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="510" class="elementor elementor-510">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-1536fc96 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="1536fc96" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-65577685" data-id="65577685" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-7244815d elementor-widget elementor-widget-text-editor" data-id="7244815d" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="064d" class="">We never stop thinking of ways to make our SDKs better and easier to use. Due to this constant struggle for self-improvement, you see new features being added every now and then. I will be talking about three of those in this blog:</p>
<p id="93d9">★ Timeouts</p>
<p id="15ee" class="">★ Multiple Base URI Support</p>
<p id="ce0e" class="">★ Custom Exception Classes</p>
<h2 id="08bc" class="">Timeouts</h2>
<p id="9bc7">Timeout and retries are widely talked about terms in networking. And are important to consider when building reliable and consistent applications that require network calls. Some of the leading names in the IT industry (example: Google, Facebook, Amazon, Dropbox) provide timeout and retry features built-in with their SDKs.</p>
<p id="e3e4" class="">But why do we need timeout and retry? Let’s take a simple example. Let’s say you are a developer working on an application which makes an HTTP call to a server and waits for it to send you back some information. You then display this information to the user. Now you’ve written and tested all the code and everything is working perfectly. But after an hour, you try showing the application to your friend and it just breaks. Upon investigation, you find out that the server which you were contacting for data is not performing well. It is receiving a lot of client requests and is not able to reply back very quickly.</p>
<p class="">This is where retry and timeouts come in. You can use retry mechanism to keep pinging the server to check if it’s free to send back the response. If not, you’ll wait and then send the request again. You will specify a timeout value after which the retries will come to a halt. Suppose you specify a timeout value of 10 seconds. If the server doesn’t respond after 10 seconds, you will stop retrying and show the user a message that the server is busy. This is important because this improves user experience. Network latency drops all the time. Timeouts and retries make the application more robust and reliable.</p>
<p id="acce" class="">APIMatic provides SDKs with timeouts and retry behavior by default. The timeout values can be changed as required by the user. Tests generated with the SDKs can also be configured with timeouts. Timeout values can be changed in APIMatic API Editor, within CodeGen Settings and TestGen Settings (for tests) page.</p>
<h2 id="52a7" class="">Multiple Base URI Support</h2>
<p id="fd6e" class="">This is one of the most recent features that has been added to our new and improved SDKs. Within our SDKs, a base URI is provided by the user which specifies which URI will be used to make HTTP calls to.</p>
<p id="7fc2" class="">However, in the present day, developers use multiple environments to separate out different parts of their project. For example, the tested and running code will be pushed to Production. There could be another environment where all tests are run. Likewise, there could be another environment in which a developer might be adding new features to the code. The environments need to be separated out to make sure nothing breaks. Therefore, we have added Multiple Base URI support with our SDKs to allow developers to use the SDKs with their already configured environments, without any hassle. They can easily specify which environment they want to use and within that environment, which server has to be used for making HTTP calls to.</p>
<p id="4c11">The figures below show how different environments and corresponding servers can be set up inside the API Editor.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-511 aligncenter" src="/wp-content/uploads/2021/12/0_CRkNvU3v1cqCKHZq.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-512 aligncenter" src="/wp-content/uploads/2021/12/0_dLFwvNCMOrI6dZLJ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="f2df" class="">Custom Exception Classes</h2>
<p id="f8b6" class="">Many times, during development, programmers encounter situations in which the built-in exception classes are not good enough for displaying the error message that they require. In such cases, they sometimes add useful methods to already built-in exception classes that provide more information about the exception that occurred.</p>
<p id="938f" class="">Custom Exceptions can be defined in APIMatic’s API Editor. They are automatically included in the SDK when it is generated. Custom Exceptions are referred to as API Errors in the Editor. It allows specifying custom description of errors corresponding to HTTP response codes within the range of 300–599. Global API errors are applied across all endpoints within the generated SDK.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-513 aligncenter" src="/wp-content/uploads/2021/12/0__fvYFBn2jGr88gLh.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">This concludes everything that I had to talk about today. If these features got you excited, then keep on the lookout for more announcements about our SDK improvements because we are constantly working to improve developer’s experience and provide value-added features with our automatically generated SDKs. Do sign up for APIMatic’s <a href="https://devapi.dream.press/code-generation-as-a-service">Code Generation as a Service</a>and leave all the SDK hassle to us!</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/improved-sdks-with-timeouts-multiple-base-uri-support-and-custom-exception-classes/">Improved SDKs with Timeouts, Multiple Base URI Support and Custom Exception Classes</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/improved-sdks-with-timeouts-multiple-base-uri-support-and-custom-exception-classes/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Designing UX for a Developer Product</title>
		<link>/blog/designing-ux-for-a-developer-product/</link>
					<comments>/blog/designing-ux-for-a-developer-product/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Tue, 27 Dec 2016 11:02:52 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[User Interface]]></category>
		<category><![CDATA[UX]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=482</guid>

					<description><![CDATA[<p>“UX should be transparent and not opaque”. Before crafting the user flows of any product certain goals are defined. User goals may include exporting file in a specific format, posting content over web, watching a video on a certain platform etc. There can be multiple goals for a user in a single product too. In [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/designing-ux-for-a-developer-product/">Designing UX for a Developer Product</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="482" class="elementor elementor-482">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-1ceadb05 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="1ceadb05" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-7a27a6b6" data-id="7a27a6b6" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-1cce382c elementor-widget elementor-widget-text-editor" data-id="1cce382c" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-483 aligncenter" src="/wp-content/uploads/2021/12/1_m9ahC-CV6bRC16rpemjZUg-1024x394.jpg" alt="Designing UX for a Developer Product " width="1024" height="394"></p>
</figure>
<!-- /wp:image -->

<!-- wp:quote -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<blockquote class="wp-block-quote">
<p>“UX should be transparent and not opaque”.</p>
</blockquote>
<p id="8708" class="">Before crafting the user flows of any product certain goals are defined. User goals may include exporting file in a specific format, posting content over web, watching a video on a certain platform etc. There can be multiple goals for a user in a single product too. In our case user could achieve multiple goals. When it comes to a complex data driven software product one has to make sure the user journey is flawless and fluent.</p>
<p id="565c" class="">Talking of transparent UX and User Goals. User interface should never come in the way of user and its objective.</p>
<p id="abe3" class="">Let’s talk about the <a href="https://www.apimatic.io/">product</a>&nbsp;I worked on recently.</p>
<blockquote class="wp-block-quote">
<p>Developer specific product can have a lot of complex user goals which could result in even more entangled user flows.</p>
</blockquote>
<p id="249b" class="">To gather requirements one needs to talk to the product owners and the potential users. In my case, since I worked at the same company and product being developed for the developers I had the future users all around me. All I had to do was like talk to them and understand their needs. This introduces another problem on the way. Dev guys start giving you irrelevant input and start taking interest in the design itself, which can have fatal results.</p>
<p id="83e8">Once the requirements were gathered, wire-framing took place. Personally I recommend paper pencil as the best wire-framing tools of all time. The freedom and flow that you get using paper as a medium is out of this world.</p>
</div>
</div>
</div>
</div>
<!-- /wp:quote -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-484 aligncenter" src="/wp-content/uploads/2021/12/1_a5chj6g78lltydxaHNiM2Q.jpg" alt=""></p>
<figcaption>Low fidelity to High fidelity mockup</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Converting those rough ideas into proper design is the part where you need to be very careful.&nbsp;<strong>Best practices include creation of the design conventions and defining some rules and boundaries</strong>. From border width to color codes every thing should be defined to sustain throughout the product since consistency is the key.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-488 aligncenter" src="/wp-content/uploads/2021/12/1_x1LtG0sOnWfjn07DUVvRtg-3.jpg" alt=""></p>
<figcaption>Style Guideline</figcaption>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p id="b384" class="">Defining the design guidelines for the whole product makes it lot easier to curate new pages without compromising the consistency. Design guidelines are build around the product branding constraints. In some cases this style guideline helps build the product’s visual identity.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="779b" class="">On another level if we come to think of it, design guidelines basically bridge the gap between the designer and the front-end developer. The developer doesn’t have to bother design team for color codes and stuff.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote">
<p>“Brave designers design for zero data”</p>
</blockquote>
<!-- /wp:quote --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="738b" class="">Although it is my own quotation I still strongly appreciate it.&nbsp;<strong>Call me self-obsessed</strong>. Yes, you heard me right. Every designer is self obsessed which is a good thing I believe as far as confidence is concerned. Although in case of User Experience Design this self obsession can be fatal for the product. For example designers while designing the experiences tend to come up with the best looking mock-ups in order to be praised by the Project Owner or to just get more appreciation over platforms like&nbsp;<strong>dribbble&nbsp;</strong>and&nbsp;<strong>behance</strong>. In this race the main purpose of design gets lost.</p>
<blockquote class="wp-block-quote">
<p>“Design is the process of solving problems and not only about the visual appeal”</p>
</blockquote>
<p id="a011" class="">I mentioned “design for zero data” before. It is pretty clear that the product itself without any data won’t be as flashy as the mock-ups appeared which will clearly disappoint the product owners and other people around. Design with zero data is hard to swallow but has way better value. Starting from the zero data means troubleshooting a lot of UX issues that would arise later.</p>
<blockquote class="wp-block-quote">
<p>“Users are the tourists, UI should guide them”</p>
</blockquote>
<p id="f5c0" class="">In our product we made sure that we guide user at every step. At the same time we made sure that the user doesn’t get annoyed. Using the minimal approach we used notification stripes instead of popups. Popups are annoying and every UX designer should avoid using them.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-489 aligncenter" src="/wp-content/uploads/2021/12/1_bLAdy8ZZHqpnKX1fgSsvjA.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="0517" class="">Similarly colors must depict the results. One bad choice of color can mislead the user and can result in user frustration. Similarly conversion rate is directly linked to the CTA. CTA must be different from rest of the design and should be the first thing user should be looking at.</p>
<p class="">Talking to the real world users is the way to curate experiences. Even a bad feedback is blessing.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:quote /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/designing-ux-for-a-developer-product/">Designing UX for a Developer Product</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/designing-ux-for-a-developer-product/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Introducing New Supported Formats: RAML 1.0, Postman 2.0</title>
		<link>/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/</link>
					<comments>/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 25 Nov 2016 10:53:46 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Api Description]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Postman]]></category>
		<category><![CDATA[Raml]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=469</guid>

					<description><![CDATA[<p>The wait is over! We have added RAML 1.0 and Postman 2.0 to our list of &#160;supported API formats. So grab your RAML 1.0 or Postman 2.0 APIs and start converting them to other formats of your choice or convert your existing APIs to these new formats. Unlike before, you can now also convert your [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/">Introducing New Supported Formats: RAML 1.0, Postman 2.0</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="469" class="elementor elementor-469">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-22a9c99d elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="22a9c99d" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-3452a568" data-id="3452a568" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-b371405 elementor-widget elementor-widget-text-editor" data-id="b371405" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="f95e" class="">The wait is over! We have added RAML 1.0 and Postman 2.0 to our list of &nbsp;supported API formats. So grab your RAML 1.0 or Postman 2.0 APIs and start converting them to other formats of your choice or convert your existing APIs to these new formats. Unlike before, you can now also convert your APIs to Postman 1.0.</p>
<p id="03ae" class="">For this blog, we will be using the APIMatic Calculator API description file as an example. You can grab this file when you export this API from the APIMatic Dashboard to APIMATIC format.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="alignnone wp-image-470" src="/wp-content/uploads/2021/12/1__9vtGsvibJsI-8DJ9T9TmA.png" alt="APIMatic now supports API Formats RAML 1.0, Postman 2.0  " width="348" height="399"></p>
<figcaption>Export API Description</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="cad9" class="">RAML 1.0</h2>
<p id="2b03" class="">You can import your RAML 1.0 APIs from the Dashboard or you can use our Transformer to convert RAML 1.0 files to other supported API formats. You can even generate RAML 1.0 files from APIs in other API formats using the Transformer.</p>
<p id="ae17">Navigate to the Transformer and using the Calculator API convert it to RAML 1.0 as follows:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="alignnone wp-image-471" src="/wp-content/uploads/2021/12/1_GVnuShzdGUdth4cBFAfDnQ.png" alt="API Conversion" width="700" height="441"></p>
<figcaption>API Conversion</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="a871" class="">After successful conversion, you will get your converted file in RAML 1.0 format.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-472" src="/wp-content/uploads/2021/12/1_HEea_w9CtqEk_gJ4lWN7ng.png" alt=""></p>
<figcaption>API Transformer</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:preformatted -->
<pre class=""><code class="language-yaml">#%RAML 1.0
title: APIMATIC Calculator
version: 1.0
baseUri: http://examples.devapi.dream.press/apps/calculator
documentation:
- title: APIMATIC Calculator
content: Simple calculator API hosted on APIMATIC
/{operation}:
get:
 displayName: Calculate
 description: Calculates the expression using the specified  
 operation.
 queryParameters:
    x:
     required: true
     displayName: x
     description: The LHS value
     type: number
     format: double
    y:
     required: true
     displayName: y
     description: The RHS value
     type: number
     format: double
    responses:
     200:
    description: Success
    body:
     text/plain:
      displayName: response
      type: number
      format: double
    uriParameters:
     operation:
      required: true
      displayName: operation
      description: The operator to apply on the variables
      type: string
      enum:
      - SUM
      - SUBTRACT
      - MULTIPLY
      - DIVIDE</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="7d07">You can also convert from RAML 1.0 back to other formats as required.</p>
<h2 id="db8d" class="">Postman</h2>
<p id="3aa4" class="">You can now convert back and forth from Postman 2.0 files. Support for converting from Postman 1.0 to other formats has been there for a while. But now we offer support for Postman 1.0 export as well. You can import your Postman 2.0 APIs from the Dashboard or you can use our <a href="https://docs.devapi.dream.press/api-transformer/overview-transformer">Transformer</a> to convert Postman 2.0 files to other supported formats.</p>
<p id="fb60" class="">Go to Transformer and convert your Calculator API to Postman 1.0 or Postman 2.0 as per your choice. For our example we will be converting to Postman 2.0.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-474" src="/wp-content/uploads/2021/12/1_9PNn2GIzIZ4pDdU27gE9uw.png" alt=""></p>
<figcaption>API Conversion in Postman</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="c7b2">After successful conversion, you will get your converted file in Postman 2.0 format</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">{
  &quot;info&quot;: {
    &quot;name&quot;: &quot;APIMATIC Calculator&quot;,
    &quot;_postman_id&quot;: &quot;a2022ecc-bc18–42bc-9fd4-ccd964606911&quot;,
    &quot;description&quot;: &quot;Simple calculator API hosted on APIMATIC&quot;,
    &quot;schema&quot;: &quot;https://schema.getpostman.com/json/collection/v2.0.0/&quot;
  },
  &quot;item&quot;: [
    {
      &quot;name&quot;: &quot;Simple Calculator&quot;,
      &quot;item&quot;: [
        {
          &quot;id&quot;: &quot;e95fc07e-85eb-40f3-a59a-99e57a808c0e&quot;,
          &quot;name&quot;: &quot;Calculate&quot;,
          &quot;request&quot;: {
            &quot;url&quot;: {
              &quot;protocol&quot;: &quot;http&quot;,
              &quot;host&quot;: &quot;examples.devapi.dream.press&quot;,
              &quot;path&quot;: [
                &quot;apps&quot;,
                &quot;calculator&quot;,
                &quot;:operation&quot;
              ],
              &quot;port&quot;: &quot;80&quot;,
              &quot;query&quot;: [
                {
                  &quot;key&quot;: &quot;x&quot;,
                  &quot;value&quot;: &quot;undefined&quot;
                },
                {
                  &quot;key&quot;: &quot;y&quot;,
                  &quot;value&quot;: &quot;undefined&quot;
                }
              ],
              &quot;variable&quot;: [
                {
                  &quot;id&quot;: &quot;operation&quot;,
                  &quot;value&quot;: &quot;&quot;
                }
              ]
            },
            &quot;method&quot;: &quot;GET&quot;,
            &quot;body&quot;: {
              &quot;mode&quot;: &quot;raw&quot;
            }
          },
          &quot;response&quot;: [
            {
              &quot;code&quot;: 200
            }
          ]}]}]}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="c378">You can directly import this file into your Postman app.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-476" src="/wp-content/uploads/2021/12/1_kdKijfORq8rs8iIVibfgMg.png" alt=""></p>
<figcaption>Postman App</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="6598" class="">After successful conversion, you will get your converted file in RAML 1.0 format.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-477" src="/wp-content/uploads/2021/12/1_3ecP0GAtLc-LKTGTycd2wg.png" alt=""></p>
<figcaption>Postman App</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Do you have an APIMatic API definition that also includes test cases? Good news! Exporting to Postman will create completely ready-to-test collection of requests.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/">Introducing New Supported Formats: RAML 1.0, Postman 2.0</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/introducing-new-supported-formats-raml-1-0-postman-2-0/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>API Blueprint Extension for Code Generation Settings</title>
		<link>/blog/api-blueprint-extension-for-code-generation-settings/</link>
					<comments>/blog/api-blueprint-extension-for-code-generation-settings/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Sat, 07 Nov 2015 11:02:52 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Api Blueprint]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[Specification Extensions]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=459</guid>

					<description><![CDATA[<p>We have just launched Code Generation Extensions for API Blueprint. These extensions allow customizing the behaviour of APIMatic’s Code Generation Engine. By specifying additional metadata in your API Blueprint description, you can now control the naming conventions, configuration stores and have your custom code branding. We refer to these as Code Generation Settings. Previously, you [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/api-blueprint-extension-for-code-generation-settings/">API Blueprint Extension for Code Generation Settings</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="459" class="elementor elementor-459">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-6f325ab4 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="6f325ab4" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-27fe5f49" data-id="27fe5f49" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-24f5460b elementor-widget elementor-widget-text-editor" data-id="24f5460b" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="alignnone wp-image-461" src="/wp-content/uploads/2021/12/1_dg0IM1sORJDG0wZtGFN9Bw-1.png" alt="API Blueprint Extension for Code Generation Settings" width="720" height="167" /></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="25a7" class="">We have just launched Code Generation Extensions for API Blueprint. These extensions allow customizing the behaviour of APIMatic’s Code Generation Engine. By specifying additional metadata in your API Blueprint description, you can now control the naming conventions, configuration stores and have your custom code branding. We refer to these as Code Generation Settings. Previously, you had to import your API Blueprint into APIMATIC format and use our Editor UI to specify these settings. Some while ago we made a similar extension available for Swagger 2.0 (<a href="https://www.apimatic.io/blog/post/swagger-2-0-extension-for-code-generation-settings">read more here</a>). But if your API description uses API Blueprint, you can leverage this as well.</p>
<h2 id="dfd4">API Blueprint CodeGen Settings</h2>
<p id="6551" class="">We extended the <a href="https://docs.apimatic.io/specification-extensions/blueprint-extensions">API Blueprint metadata</a> attribute to specify additional properties. See the following example below:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>FORMAT: 1A

HOST: &lt;a href=&quot;http://api.datumbox.com/&quot;&gt;http://api.datumbox.com/&lt;/a&gt;GENERATEASYNCCODE: TRUE
USEMETHODPREFIX: TRUE
USEMODELPOSTFIX: TRUE
USECONTROLLERPOSTFIX: TRUE
USEENUMPOSTFIX: TRUE
USECONSTRUCTORSFORCONFIG: TRUE
IOSUSEAPPINFOPLIST: TRUE
IOSGENERATECOREDATA: FALSE
ANDROIDUSEAPPMANIFEST: TRUE
COLLECTPARAMETERS: FALSE
CSHARPDEFAULTNAMESPACE: ACME.CORP.API
JAVADEFAULTNAMESPACE: com.acme.corp.api
APPENDCONTENTHEADERS: TRUE
BRANDLABEL: ACME CORP.
USERAGENT: APIMATIC 2.0
ENABLEADDITIONALMODELPROPERTIES: FALSE</code></pre>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e31c" class="">The purpose of these parameters is explained below:</p>
<h2 id="f7da">GENERATEASYNCCODE</h2>
<p id="e8ac">When true, the CodeGen engine generates asynchronous C# and Java code.</p>
<h2 id="fc1c">USEMETHODPREFIX</h2>
<p id="8f4b">When true, HTTP verbs are used as prefix for generated controller methods.</p>
<h2 id="47c6">USEMODELPOSTFIX</h2>
<p id="972b" class="">When true, a postfix “Model” is appended to all classes generated from schemas.</p>
<h2 id="2514">USECONTROLLERPOSTFIX</h2>
<p id="3327">When true, a postfix “Controller” is appended to all controllers generated from path groups.</p>
<h2 id="be10">USEENUMPOSTFIX</h2>
<p id="2aee">When true, a postfix “Enum” is appended to all enumerations lifted from “allowedValues”.</p>
<h2 id="1ed3" class="">USECONSTRUCTORSFORCONFIG</h2>
<p id="8bd5">When true, configuration values e.g., authentication credentials, are accepted as controller constructor parameters. Otherwise, these values generate variables in a Configuration class.</p>
<h2 id="38d5">IOSUSEAPPINFOPLIST</h2>
<p id="b120" class="">When true, configuration values e.g., authentication credentials, are expected in app-info.plist file for the iOS SDK. When set, this setting ignores useConstructorsForConfig flag.</p>
<h2 id="712b">IOSGENERATECOREDATA</h2>
<p id="2349">When true, iOS CoreData schema and classes are generated.</p>
<h2 id="f3a7">ANDROIDUSEAPPMANIFEST</h2>
<p id="34b4" class="">When true, configuration values e.g., authentication credentials, are expected in AndroidManifest.xml file for the Android SDK. When set, this setting ignores <code>useConstructorsForConfig</code> flag.</p>
<h2 id="0a87">COLLECTPARAMETERS</h2>
<p id="7a93" class="">When true, operation parameters are expected to passed as a collection. For example in PHP, the generated method expects a Map containing parameters as Key-Value pairs. This is currently implemented for PHP, Python, GO, and Objective-C. When set, this is applied globally on all endpoints/operations. If you wish to use this option on specific endpoints, use the <code>x-operation-settings:collectParameters</code> instead.</p>
<h2 id="5b17">CSHARPDEFAULTNAMESPACE</h2>
<p id="e17b">A valid C# namespace value to be used as the default namespace. Leave empty or null to automatically generate.</p>
<h2 id="9249">JAVADEFAULTNAMESPACE</h2>
<p id="1c84">A valid Java package name to be used as the base package name. Leave empty or null to automatically generate. This value is applied for both Java and Android code generation templates.</p>
<h2 id="42b1">APPENDCONTENTHEADERS</h2>
<p id="48e5">When true, code generation engine automatically detects request and response schema and appends content headers e.g., “<code>accept: application/json</code>” and “<code>content-type: application/json</code>” headers for JSON serialization mode.</p>
<h2 id="dd20">BRANDLABEL</h2>
<p id="498b">A string value to brand the generated files. For example: “Acme Corp.”</p>
<h2 id="9bc8">USERAGENT</h2>
<p id="854b">A string value to use as user-agent in the API calls. This is useful for analytics and tracking purposes. For example: “SDK V1.1”</p>
<h2 id="488d">ENABLEADDITIONALMODELPROPERTIES</h2>
<p id="6f8f" class="">When true, additional or unknown properties in the response JSON are collected into a dictionary.</p>
<p id="f463">Please direct any queries on this aspect to our <a href="https://apimatic.zendesk.com/">support portal</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:preformatted -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/api-blueprint-extension-for-code-generation-settings/">API Blueprint Extension for Code Generation Settings</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/api-blueprint-extension-for-code-generation-settings/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Swagger 2.0 Extension for Code Generation Settings</title>
		<link>/blog/swagger-2-0-extension-for-code-generation-settings/</link>
					<comments>/blog/swagger-2-0-extension-for-code-generation-settings/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Tue, 25 Aug 2015 11:02:52 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Api Description]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Automatic Code Generation]]></category>
		<category><![CDATA[Sdks]]></category>
		<category><![CDATA[Swagger]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=456</guid>

					<description><![CDATA[<p>Swagger 2.0 spec was created with the foresight of allowing 3rd-party vendors to implement tool-specific extensions. These extensions allow customizing behaviors beyond simple API descriptions. Traditionally, such behaviors used to stay locked inside custom settings, restricting the interoperability of tools and services. Using these extensions, we can not only offer extended compatibility between tools and [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/swagger-2-0-extension-for-code-generation-settings/">Swagger 2.0 Extension for Code Generation Settings</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="456" class="elementor elementor-456">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-5ed6a492 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="5ed6a492" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-24e069cf" data-id="24e069cf" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-1e8c43a4 elementor-widget elementor-widget-text-editor" data-id="1e8c43a4" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-457" src="/wp-content/uploads/2021/12/1_Cli7qudxir0f9ed6FmCQwA.png" alt="APIMatic's Swagger 2.0 Extension for Code Generation Settings " width="623" height="143" /></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3853" class="">Swagger 2.0 spec was created with the foresight of allowing 3rd-party vendors to implement tool-specific extensions. These extensions allow customizing behaviors beyond simple API descriptions. Traditionally, such behaviors used to stay locked inside custom settings, restricting the interoperability of tools and services. Using these extensions, we can not only offer extended compatibility between tools and services, but this also opens up a pathway to improve and add missing features that eventually become de-facto standard for API descriptions. For example, extensions that allow customization of API analytics data collections e.g., how to treat rate limit exceeded, may eventually become part of official Swagger spec if the developer community decide in its favor. One widely known example of Swagger vendor extension is the <a href="https://github.com/apigee-127/a127">Apigee a-127 extension</a>, which allows you to generate APIs in Node.js. API Evangelist has already written a post about this concept some while ago (<a href="http://apievangelist.com/2015/03/12/crafting-exactly-the-api-definition-you-need-with-swagger-vendor-extensions/">read it here</a>).</p>
<h2 id="dc71">APIMatic CodeGen Extensions</h2>
<p id="2274" class="">APIMATIC’s code generation engine is highly customizable. You can decide on naming convention, configuration stores, and perform some white labelling through our CodeGen Settings, and Advanced Settings per Endpoint. However, this customizability was previously locked behind our API Editor UI, and inside our internal API format (called APIMATIC format). We were often asked how to specify these settings from other API description formats, specially Swagger. So, we are now announcing our vendor extensions for Swagger 2.0, which can be used to specify the said settings for complete customizability. The extensions are supported by both the “Import” API operation, as well as by our Code Generation as a Service API (<a href="https://www.apimatic.io/blog/post/announcing-code-generation-api">read more here</a>).</p>
<h2 id="3dce" class="">CodeGen Settings for Swagger 2.0</h2>
<p id="9906">We followed the <a href="https://github.com/swagger-api/swagger-spec/blob/master/guidelines/EXTENSIONS.md">Swagger 2.0 extensions spec</a> and created a new property definition inside the “info” object, named “<code>x-codegen-settings</code>”. These settings are globally applicable to all operations and schema definitions. See example below.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-json">{
 “swagger”: 2.0,
 “info”: {
  …,
  “x-codegen-settings”: {
  “generateAsyncCode”: true,
  “useMethodPrefix”: true,
  “useModelPostfix”: true,
  “useControllerPostfix”: true,
  “useEnumPostfix”: true,
  “useConstructorsForConfig”: true,
  “iOSUseAppInfoPlist”: true,
  “iOSGenerateCoreData”: false,
  “androidUseAppManifest”: true,
  “collectParameters”: false,
  “csharpDefaultNamespace”: “ACME.CORP.API”,
  “javaDefaultPackageName”: “com.acme.corp.api”,
  “appendContentHeaders”: true,
  “brandLabel”: “ACME Corp.”,
  “userAgent”: “APIMATIC 2.0”,
  “enableAdditionalModelProperties”: false
  }
 },
 …
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="3592">The purpose of these parameters is explained below.</p>
<h3 id="9476">generateAsyncCode</h3>
<p id="69fb">When true, the CodeGen engine generates asynchronous C# and Java code.</p>
<h3 id="f352"><strong>useMethodPrefix</strong></h3>
<p id="594f">When true, HTTP verbs are used as prefix for generated controller methods.</p>
<h3 id="b9b4"><strong>useModelPostfix</strong></h3>
<p id="05b0">When true, a postfix “Model” is appended to all classes generated from schemas.</p>
<h3 id="9687"><strong>useControllerPostfix</strong></h3>
<p id="f8e2">When true, a postfix “Controller” is appended to all controllers generated from path groups.</p>
<h3 id="a44e"><strong>useEnumPostfix</strong></h3>
<p id="ae95">When true, a postfix “Enum” is appended to all enumerations lifted from “allowedValues”.</p>
<h3 id="5fe6"><strong>useConstructorsForConfig</strong></h3>
<p id="d7a6">When true, configuration values e.g., authentication credentials, are accepted as controller constructor parameters. Otherwise, these values generate variables in a Configuration class.</p>
<h3 id="4a4d"><strong>iOSUseAppInfoPlist</strong></h3>
<p id="69c7">When true, configuration values e.g., authentication credentials, are expected in app-info.plist file for the iOS SDK. When set, this setting ignores useConstructorsForConfig flag.</p>
<h3 id="df42">iOSGenerateCoreData</h3>
<p id="c309">When true, iOS CoreData schema and classes are generated.</p>
<h3 id="c597">androidUseAppManifest</h3>
<p id="840a">When true, configuration values e.g., authentication credentials, are expected in AndroidManifest.xml file for the Android SDK. When set, this setting ignores useConstructorsForConfig flag.</p>
<h3 id="f71f">collectParameters</h3>
<p id="efb3">When true, operation parameters are expected to passed as a collection. For example in PHP, the generated method expects a Map containing parameters as Key-Value pairs. This is currently implemented for PHP, Python, GO, and Objective-C. When set, this is applied globally on all endpoints/operations. If you wish to use this option on specific endpoints, use the x-operation-settings::collectParameters instead.</p>
<h3 id="5a71">csharpDefaultNamespace</h3>
<p id="5ad9">A valid C# namespace value to be used as the default namespace. Leave empty or null to automatically generate.</p>
<h3 id="0c1b">javaDefaultPackageName</h3>
<p id="53c0">A valid Java package name to be used as the base package name. Leave empty or null to automatically generate. This value is applied for both Java and Android code generation templates.</p>
<h3 id="5cbc">appendContentHeaders</h3>
<p id="04cc">When true, code generation engine automatically detects request and response schema and appends content headers e.g., “accept: application/json” and “content-type: application/json” headers for JSON serialization mode.</p>
<h3 id="1ef4">brandLabel</h3>
<p id="cb2b">A string value to brand the generated files. For example: “Acme Corp.”</p>
<h3 id="1769">userAgent</h3>
<p id="1bca">A string value to use as user-agent in the API calls. This is useful for analytics and tracking purposes. For example: “SDK V1.1”</p>
<h3 id="e5fb">enableAdditionalModelProperties</h3>
<p id="eac3">When true, additional or unknown properties in the response JSON are collected into a dictionary.</p>
<h2 id="cf10">Advanced Settings</h2>
<p id="ee50">APIMATIC allows further customization of endpoints (called operations in Swagger). These settings can be specified inside an “operation” object using property name “<code>x-operation-settings</code>”. See an example as following.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-json">“paths”: {
 “/pets”: {
 “get”: {
 …,
 “x-operation-settings” : {
 “collectParameters” : false,
 “allowDynamicQueryParameters”: true,
 “allowDynamicFormParameters”: false,
 “isMultiContentStreaming”: false
 }
 }
 }
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="197a">The purpose of these parameters is explained below.</p>
<h3 id="674d">collectParameters</h3>
<p id="8baf">When true, this operation’s parameters are expected to passed as a collection. For example in PHP, the generated method expects a Map containing parameters as Key-Value pairs. This is currently implemented for PHP, Python, GO, and Objective-C.</p>
<h3 id="a3be">useModelPostfix</h3>
<p id="451e">When true, a postfix “Model” is appended to all classes generated from schemas.</p>
<h3 id="1775">allowDynamicQueryParameters</h3>
<p id="fb81">When true, the generated method has an additional Map input, which may contain dynamic number of query parameters as Key-Value pairs.</p>
<h3 id="f3b2">allowDynamicFormParameters</h3>
<p id="c16a">When true, the generated method has an additional Map input, which may contain dynamic number of form parameters as Key-Value pairs.</p>
<h3 id="82f2">isMultiContentStreaming</h3>
<p id="aa89">When true, it indicates that this operation is a streaming endpoints. For example <a href="https://dev.twitter.com/streaming/overview">Twitter Streaming API</a> endpoints.</p>
<h2 id="466b">Additional Headers</h2>
<p id="cdb7">APIMATIC allows defining global headers that are sent with every API call. These headers are in addition to any headers required for authentication or defined as parameters. These headers can be specified inside a “Security Scheme” object using property name “x-additional-headers”. See an example below.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:preformatted -->
<pre><code class="language-json">“securityDefinitions”: {
 “basicAuth”: {
 “type”: “basic”,
 “x-additional-headers”: [
 {
 “name”: “API Version”,
 “description”: “The version number indicator for the API”,
 “default”: “1.1”
 },
 {
 “name”: “SDK Version”,
 “description”: “The version number indicator for the SDK”,
 “default”: “1.1.0.1”
 },
 …
 ]
 }
}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="2e4e">Please direct any queries on this aspect to our <a href="https://apimatic.zendesk.com/">support team</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/swagger-2-0-extension-for-code-generation-settings/">Swagger 2.0 Extension for Code Generation Settings</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/swagger-2-0-extension-for-code-generation-settings/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Announcing Code Generation API</title>
		<link>/blog/announcing-code-generation-api/</link>
					<comments>/blog/announcing-code-generation-api/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Sun, 21 Jun 2015 11:02:52 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Restful Api]]></category>
		<category><![CDATA[Sdk Generation]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=466</guid>

					<description><![CDATA[<p>APIMatic’s automatic code generation is now publicly available for our users. You can check out its API documentation here. The Code Generation API allows you to do interesting stuff with SDK generation for your API. Some of the interesting uses of this API that we could think of are as follows. Provide freshly-squeezed SDKs for [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/announcing-code-generation-api/">Announcing Code Generation API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="466" class="elementor elementor-466">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-435f7dde elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="435f7dde" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-6fab6970" data-id="6fab6970" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-99424c2 elementor-widget elementor-widget-text-editor" data-id="99424c2" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-467 aligncenter" src="/wp-content/uploads/2021/12/1_1MbRUd5V1fDD3cTFrrvQGg.png" alt="Code Generation API" width="632" height="310"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="7b3f" class="">APIMatic’s automatic code generation is now publicly available for our users. You can check out its <a href="https://docs.apimatic.io/">API documentation here</a>. The Code Generation API allows you to do interesting stuff with SDK generation for your API. Some of the interesting uses of this API that we could think of are as follows.</p>
<ul class="">
<li>Provide freshly-squeezed SDKs for your API on your developer portal</li>
<li>Validate your API backend through its generated description file</li>
<li>Batch script to push your SDKs to GitHub or other code repos</li>
<li>Hook this API in your continuous integration (CI) cycle for automatic code generation</li>
</ul>
<p id="8568" class="">As you might have guessed, this is the same API we use for our SDKs search engine&nbsp;&nbsp;SDKS.IO&nbsp;&nbsp;as well as our Javascript widget. Let us know if you have found any other interesting use case for our API and we will update the list. If you have any suggestion of feature request for this API, we would love to hear from you.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
							</div>
		<p>The post <a rel="nofollow" href="/blog/announcing-code-generation-api/">Announcing Code Generation API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/announcing-code-generation-api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
