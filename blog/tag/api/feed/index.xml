
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>API Archives - APIMatic</title>
	<atom:link href="/blog/tag/api/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Fri, 24 Dec 2021 08:19:22 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>API Archives - APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>What’s New in APIMatic v3?</title>
		<link>/blog/whats-new-in-apimatic-v3/</link>
					<comments>/blog/whats-new-in-apimatic-v3/#respond</comments>
		
		<dc:creator><![CDATA[Nida I Zamir]]></dc:creator>
		<pubDate>Fri, 18 Jun 2021 10:56:01 +0000</pubDate>
				<category><![CDATA[API Portal]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Releases]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Codegen]]></category>
		<category><![CDATA[Developer Portal]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=443</guid>

					<description><![CDATA[<p>With organizations going increasingly digital, it has become challenging for API providers to maintain API visibility amongst a plethora of APIs and ensure faster API adoption. This is where developer experience pivots the developer’s decision in your API’s favor. Keeping this challenge in mind, APIMatic has undergone numerous updates to get you the most out [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/whats-new-in-apimatic-v3/">What’s New in APIMatic v3?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="443" class="elementor elementor-443" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-6d794aaf elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="6d794aaf" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-2bd1a153" data-id="2bd1a153" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4ecb43bb elementor-widget elementor-widget-text-editor" data-id="4ecb43bb" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.5.6 - 28-02-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-444 aligncenter" src="/wp-content/uploads/2021/12/1_YOxwTEYQH2n9iAsyN5T2og-1024x512.png" alt="APIMatic v3 " width="1024" height="512"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e1f5" class="">With organizations going increasingly digital, it has become challenging for API providers to maintain API visibility amongst a plethora of APIs and ensure faster API adoption. This is where developer experience pivots the developer’s decision in your API’s favor. Keeping this challenge in mind, APIMatic has undergone numerous updates to get you the most out of your API.</p>
<p id="c384" class="">With APIMatic v3, you can generate feature-rich and code-compliant SDKs as our flagship&nbsp;<strong>Code Generator</strong> includes new features and improvements as an overhaul. We have also completely revamped the&nbsp;<strong>API Portal</strong>&nbsp;with a more aesthetic and interactive API portal and a Markdown docs editor. Furthermore, the&nbsp;<strong>API Transformer</strong>&nbsp;now supports the much-awaited&nbsp;<code>anyOf</code>,&nbsp;<code>oneOf</code>,&nbsp;<code>not&nbsp;</code>constructs and union types and much more.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-445 aligncenter" src="/wp-content/uploads/2021/12/1_GpHWeFNx4IB2CRG1ryZVgA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="2146" class="">Generate Robust SDKs with Overhauled Code Generator</h2>
<p id="8646" class="">The APIMatic Code Generator contains numerous updates to its feature list along with improvements in the CodeGen Engine:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-446 aligncenter" src="/wp-content/uploads/2021/12/1_0kwDu7p6QTlVUG4YL9Idmw.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="d6de"><strong>Updated Language Versions, Dependencies, and Adherence to Coding Standards</strong></h3>
<p id="7773" class="">To ensure SDK compatibility with the maximum user codebase, the SDKs have been refactored to target minimum language and runtime versions and updated dependencies. Moreover, we have applied the latest industry-accepted <a href="https://docs.apimatic.io/generate-sdks/sdk-coding-standards">coding standards</a> in all languages to the SDKs.</p>
<h3 id="cb43" class="">Immutable Clients for Multi-Threading</h3>
<p id="8e46" class="">We have refactored our SDKs to <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#new-immutable-clients-in-sdks">immutable clients</a>that make it easier to write network-related code dealing with concurrency, as immutable clients are thread-safe and do not require explicit synchronization or defensive copying.</p>
<h3 id="c83a" class="">Timeout and Retries on API Call Errors</h3>
<p id="ecc0" class="">All APIMatic SDKs now support handling <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#timeout-and-automatic-retries-on-api-call-errors">timeouts and automatic retries</a> if an API call is timing out, is unreachable, or returning API call errors.</p>
<h3 id="fe34" class="">Support for XML in API Calls</h3>
<p id="3a23" class="">All SDKs now come with the added support for <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#support-for-xml">sending and receiving XML</a>&nbsp;in the API calls. So if your API definition uses XML, it can be imported into APIMatic v3 to generate SDKs without having to worry about serializing and deserializing the XML data.</p>
<h3 id="30e8">Support for Nullable Properties in Models</h3>
<p id="247e" class="">Java and C# SDKs now <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#nullable-properties-in-models">contain nullable properties in models</a>, so if a user does not assign any value to a property after model instance initialization, a null value will be sent in the HTTP request instead of being skipped altogether.</p>
<h3 id="1b2d" class="">More Updates to the Code Generator</h3>
<p id="d4e3" class="">Apart from these features, the APIMatic Code Generator generates SDKs that support numerous features and enhancements like deprecating endpoints, cancellable API calls, access to HTTP response data, and more.</p>
<blockquote class="wp-block-quote">
<p>For more in-depth detail on the updated features of the Code Generator, please head over to <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan">APIMatic Code Generator v3</a>.</p>
</blockquote>
<h2 id="21fd" class="">Enhance Developer Experience with Revamped API Portal</h2>
<p id="7c60" class="">The API Portal has been revamped in APIMatic v3 to make your documentation and code samples more readable and interactive, making API consumption even faster. We have also updated the Portal Editor for more flexibility in customization to the portal.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-447 aligncenter" src="/wp-content/uploads/2021/12/1_7-EKUeLckKyhjf_3f9QN2w.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="3b90" class="">Improved Aesthetics and UX</h3>
<p id="aa54" class="">Based on feedback from our customers, we updated the design of the API portal to a more modern and reader-friendly interface with new typography, layout, and UI components for a more intuitive experience.</p>
<figure id="attachment_1239" aria-describedby="caption-attachment-1239" style="width: 1890px" class="wp-caption aligncenter"><img class="wp-image-1239 size-full" src="/wp-content/uploads/2021/12/portal.gif" alt="Revamped API Portal in APIMatic v3" width="1890" height="931"><figcaption id="caption-attachment-1239" class="wp-caption-text">Revamped API Portal in APIMatic v3</figcaption></figure>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large"></figure>
</div>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="6333" class="">Merged API Explorer (API Playground)</h3>
<p id="9472" class="">We have merged the endpoint request documentation with the API Console into a unified <a href="https://docs.apimatic.io/publish-apis/api-console">API Explorer</a>, also called the “API Playground”, that allows your users to explore the endpoint documentation and edit the request data in one place.</p>
<h3 id="e773" class="">Updated Portal Editor</h3>
<p id="ecec" class="">The Portal Editor for customizing the API portal has been remodeled to make it as easy to use as possible while adding a WYSIWYG Markdown docs editor for custom guides. You can customize <a href="https://docs.apimatic.io/publish-apis/customizing-your-portal">portal settings</a> and version-specific <a href="https://docs.apimatic.io/publish-apis/customize-docs">documentation settings</a>, and also include auto-generated documentation for endpoints and models.</p>
<figure id="attachment_1240" aria-describedby="caption-attachment-1240" style="width: 1890px" class="wp-caption aligncenter"><img class="wp-image-1240 size-full" src="/wp-content/uploads/2021/12/portal-editor-1.gif" alt="Revamped Portal Editor in APIMatic v3" width="1890" height="931"><figcaption id="caption-attachment-1240" class="wp-caption-text">Revamped Portal Editor in APIMatic v3</figcaption></figure>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large"></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="a325" class="">More Features in the v3 API Portal</h3>
<p id="b6fe" class="">The API Portal contains more fun features like pop-out code samples, version-specific documentation, customizable table-of-contents, and much more!</p>
<blockquote class="wp-block-quote">
<p>For more information about what APIMatic v3 offers for the API portal in detail, check out <a href="https://docs.apimatic.io/changelog/releasing-apimatic-v3-revamped-api-portal">Revamped API Portal in APIMatic v3</a>.</p>
</blockquote>
<h2 id="3616" class="">Polish Your API Definition with Upgraded API Transformer</h2>
<p id="1533">The API Transformer includes various new features and improvements, so your API definitions can make the most out of APIMatic V3.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-450 aligncenter" src="/wp-content/uploads/2021/12/1_dkZodYI-qBbeus6CoJ7l5g.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="c5a8">Faster OpenAPI v2.0 and v3.0 Imports</h3>
<p id="d2ba" class="">The OpenAPI/Swagger 2.0 and 3.0 import has been completely revamped and impacts your SDK and Docs/Portal generation and API Transformer output. The revamp includes faster imports, improved support for&nbsp;<code>$refs</code> , improved error messages, changes to null value handling, and much more.</p>
<h3 id="4bd6" class="">Support for anyOf, oneOf, not Constructs and Union Types</h3>
<p id="c39a" class="">Probably one of the most requested support for&nbsp;<code>anyOf</code>,&nbsp;<code>oneOf&nbsp;</code>and&nbsp;<code>not&nbsp;</code>constructs is now available in all major API specification formats including OpenAPI, JSON Schema, API Blueprint. Support for RAML and XML schema “union” types has also been added.</p>
<h3 id="23c6" class="">What’s More in the v3 API Transformer?</h3>
<p id="2a1d" class="">The API Transformer is packed with more features and settings like new configuration settings, more specification extensions for OAS and RAML annotations, and so on.</p>
<blockquote class="wp-block-quote">
<p>Read more about what the&nbsp;<a href="https://docs.apimatic.io/changelog/releasing-apimatic-v3-revamped-transformer">revamped API Transformer offers</a>&nbsp;in APIMatic v3.</p>
</blockquote>
<h2 id="2c4a" class="">How do I Migrate to APIMatic v3? <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2708.png" alt="✈" class="wp-smiley" style="height: 1em; max-height: 1em;" /></h2>
<p id="6280" class="">Migrating to APIMatic v3 is easy. All your data is preserved during migration so you don’t have to worry about any data being lost or discarded. We have also ensured that everything remains backward compatible so if for any reason you revert to v2, no data is lost.</p>
<blockquote class="wp-block-quote">
<p>For more detail, please refer to our guide on&nbsp;<a href="https://docs.apimatic.io/account-management/migrate-to-v3">how to migrate to APIMatic v3</a>, or contact&nbsp;<a href="https://www.apimatic.io/contact/">support</a>.</p>
</blockquote>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/whats-new-in-apimatic-v3/">What’s New in APIMatic v3?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/whats-new-in-apimatic-v3/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The Whys and Hows of Exposing a SOAP Service Using Your REST API</title>
		<link>/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/</link>
					<comments>/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Mon, 22 Jun 2020 13:12:15 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SOAP]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[Rest]]></category>
		<category><![CDATA[Soap]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=1183</guid>

					<description><![CDATA[<p>This blog is the fifth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&#160;API Transformer&#160;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it should eliminate any assumptions that they might have about being restricted to [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/">The Whys and Hows of Exposing a SOAP Service Using Your REST API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1183" class="elementor elementor-1183" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-29e95da2 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="29e95da2" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-76519aca" data-id="76519aca" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-6585503a elementor-widget elementor-widget-text-editor" data-id="6585503a" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12"><!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column" style="flex-basis: 100%;"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_2SKA02w5_032Y4Yg5SEvTw-1024x682.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column" style="flex-basis: 100%;"><!-- wp:paragraph -->
<p class=""><em>This blog is the fifth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&nbsp;</em><a href="https://www.apimatic.io/transformer"><em>API Transformer</em></a><em>&nbsp;into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it should eliminate any assumptions that they might have about being restricted to a particular set of tools just because they use a certain API specification format.</em></p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns --></div>
</div>
<!-- /wp:group -->

<!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p id="3e6f" class="">You can find numerous debates out there on the topic of “SOAP vs REST” including those that believe&nbsp; REST is the new SOAP.&nbsp;Depending on your service and its target consumers, it might actually be a good idea (albeit rarely) to provide that service in the form of both SOAP and REST APIs. Sounds like an awful load of work? Perhaps not. Let’s dig deeper.</p>
<!-- /wp:paragraph --></div>
</div>
<!-- /wp:group -->

<!-- wp:group -->
<div class="wp-block-group">
<div class="wp-block-group__inner-container"><!-- wp:paragraph -->
<p id="3dcb" class="">You can also check out one of my earlier blogs on a similar topic where I shared some tips on<a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest">migrating your SOAP APIs to REST</a>.</p>
<!-- /wp:paragraph --></div>
</div>
<!-- /wp:group -->

<!-- wp:paragraph -->
<h2 class=""><strong>Is REST not enough?</strong></h2>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="e560" class="">A lot of businesses today have adapted the RESTful approach for their services as it provides a more flexible, lightweight, and efficient solution as compared to the other available alternatives. While this holds true for most cases, there can be times when you’ll find your clients (especially enterprises) seeking a SOAP service to integrate with. Some of the reasons for that can be:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="">
<li>Being slow adopters, enterprise clients might be reluctant to shift to REST since it is still a relatively newer approach to things and differs greatly from the rigid contract-based approach used by SOAP.</li>
<li>Tools and infrastructure used by enterprise clients may not yet support REST well.</li>
</ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p id="0855">Keeping this in mind, it may be useful to expose your REST service partially/completely in the form of a SOAP service as well.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h2 class=""><strong>Real-life Use Cases</strong></h2>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d89b" class=""><a href="https://www.salesforce.com/in/?ir=1">Salesforce</a>&nbsp;provides some APIs as both SOAP and REST allowing developers to integrate in a way that suits them best e.g. check out their&nbsp;<a href="https://developer.salesforce.com/docs/atlas.en-us.api_tooling.meta/api_tooling/intro_api_tooling.htm">Tooling API</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7b09" class="">One of our clients at APIMatic,&nbsp;<a href="https://www.cdq.ch/">CDQ AG</a>, is a data centric company. Their RESTful services provide a link between their cloud services and business applications. To facilitate smooth integration for enterprise customers, whose infrastructure does not support REST well, they have exposed the same APIs as SOAP services/WSDL interfaces too. This WSDL serves as a contract for both parties. To keep their REST and SOAP APIs in sync, they have integrated&nbsp;<a href="https://www.apimatic.io/transformer/">API Transformer</a>&nbsp;into their workflow which helps generate a new version of the WSDL for every change in their REST API (more on this later). With the newer WSDL, they update their SOAP service accordingly and in order to access the latest changes their service consumers also eventually update their applications based on this latest WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>SOAP and WSDL</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="076c" class="">While it is not mandatory for every SOAP service to have a WSDL file associated with it, it is widely used as a contract between the SOAP service provider and its consumer. This file provides a complete definition of how the service works, the various operations involved and other fine grain details of all elements and attributes involved. Many tools exist that lets you generate method stubs in almost any language if you have the WSDL file with you.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3><strong>From REST to SOAP, Using API Transformer</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="1af0" class="">One of the less obvious but distinctive features of&nbsp;<a href="https://www.apimatic.io/transformer/">API Transformer</a>&nbsp;is its ability to convert REST APIs to SOAP by generating WSDL files from popular formats used to describe REST APIs like OpenAPI/Swagger, RAML, API Blueprint, etc. We’ve seen, on average, over 50 unique transformations (unique per user) to WSDL every month for the past three years since this feature was launched.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure style="width: 700px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2021/12/1__B0qfzhhuvta5UoEBWqIWw.png" alt="API Transformer WSDL Export Trend (Jun 2017 — Jun 2020)" width="700" height="292"><figcaption class="wp-caption-text">API Transformer WSDL Export Trend (Jun 2017 — Jun 2020)</figcaption></figure>
<figcaption></figcaption>
Note, however, that the REST APIs spoken of here include not only APIs that completely follow REST architecture style but also those that follow more of a hybrid approach between REST and RPC style.</figure>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h2><strong>Generating WSDL from REST &#8212; How does this work?</strong></h2>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7341" class="">I went ahead and created a sample OpenAPI&nbsp;<code>v3.0</code>&nbsp;file which I then converted to WSDL using&nbsp;<a href="https://www.apimatic.io/transformer/">API Transformer</a>. Using these files, I will now show you the inner workings of the conversion below. If you are interested to see the complete files, you can find them<a href="https://github.com/fariadev22/api-transformer-recipes/tree/master/Exposing%20a%20SOAP%20API%20Using%20REST">here</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>1. API Information</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="14f8">During the conversion, details related to the API like its identifying title, description and server URLs are extracted from the OpenAPI file and placed in the relevant service metadata of WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p class=""><strong><em>OpenAPI:</em></strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<pre class=""><code class="language-json">openapi: 3.0.0
info:
  title: HelloService
  description: Swagger file for generating WSDL
version: &#039;1.0&#039;
servers:
  - url: https://www.example.com/SayHello/</code></pre>
<!-- /wp:paragraph -->

<!-- wp:paragraph --><strong><em>WSDL:</em></strong> <!-- /wp:paragraph -->

<!-- wp:paragraph -->
<pre class=""><code class="language-xml">&lt;service name=&quot;HelloService&quot;&gt;
  &lt;documentation&gt;Swagger file for generating WSDL&lt;/documentation&gt;
  &lt;port name=&quot;default_Port&quot; binding=&quot;wsdl:HelloService_Binding&quot;&gt;
    &lt;soap:address location=&quot;https://www.example.com/SayHello/&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
  &lt;/port&gt;
&lt;/service&gt;</code></pre>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>2. OpenAPI Paths</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p class="">Generally, the relative paths in OpenAPI help identify RESTful resources and associated with each of these paths are the various operations possible on these resources. However, these paths have no significance in SOAP/WSDL because the concept of resources is restricted to RESTful APIs only. Only their associated operations are converted to WSDL operations.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3 class=""><strong>3. OpenAPI Operations vs WSDL Operations</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->WSDL operations are defined in an abstract way inside the port types and their concrete details are provided in the bindings. Information from OpenAPI operations is loaded into both these port types and binding operations. <!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p class=""><em><strong>OpenAPI</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<pre class=""><code class="language-json">/message:
   get:
     tags:
      - Messages
     description: View message entry
     operationId: GetMessage
     parameters:
       - name: messageId
         in: query
         required: true
         schema:
           type: string
     responses:
       200:
         description: Message object against the id, if found
         content:
           application/json:
             schema:
               $ref: &#039;#/components/schemas/Message&#039;
       404:
         description: No messages found
         content:
           application/json:
             schema:
               $ref: &#039;#/components/schemas/Error&#039;</code></pre>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="4899" class=""><em><strong>WSDL</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;portType name=&quot;HelloService_PortType&quot;&gt;
  &lt;operation name=&quot;GET_GetMessage&quot;&gt;
    &lt;documentation&gt;View message entry&lt;/documentation&gt;
    &lt;input message=&quot;wsdl:GET_GetMessage_InputMessage&quot; /&gt;
    &lt;output message=&quot;wsdl:GET_GetMessage_OutputMessage&quot;&gt;
        &lt;documentation&gt;Message object against the id, if found&lt;/documentation&gt;
    &lt;/output&gt;
    &lt;fault name=&quot;GET_GetMessage_404&quot; message=&quot;wsdl:GET_GetMessage_404&quot;&gt;
        &lt;documentation&gt;No messages found&lt;/documentation&gt;
    &lt;/fault&gt;
    &lt;/operation&gt;
&lt;/portType&gt;
&lt;binding name=&quot;HelloService_Binding&quot; type=&quot;wsdl:HelloService_PortType&quot;&gt;
  &lt;soap:binding transport=&quot;http://schemas.xmlsoap.org/soap/http&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
  &lt;operation name=&quot;GET_GetMessage&quot;&gt;
    &lt;soap:operation soapAction=&quot;GET_GetMessage&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;input&gt;
      &lt;soap:body use=&quot;literal&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;/input&gt;
    &lt;output&gt;
      &lt;soap:body use=&quot;literal&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;/output&gt;
    &lt;fault name=&quot;GET_GetMessage_404&quot;&gt;
      &lt;soap:fault use=&quot;literal&quot; name=&quot;GET_GetMessage_404&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; /&gt;
    &lt;/fault&gt;
  &lt;/operation&gt;
&lt;/binding&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<h4 id="1625"><strong>HTTP Verb</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="53c0" class="">An OpenAPI operation has a distinct HTTP verb associated with it e.g.&nbsp;<code>GET</code>,&nbsp;<code>POST</code>,&nbsp;<code>DELETE</code>, etc. indicating the type of functionality that is expected to be performed on the resource. All OpenAPI operations are converted to&nbsp;<code>POST</code>&nbsp;methods for SOAP/WSDL conversion.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h4 id="722f" class=""><strong>WSDL Operation Name</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="2f34" class="">The operation name for WSDL is generated by combining the HTTP verb and operation id/name from the OpenAPI operation and serves as a unique identifier.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h4 id="ee27"><strong>Request Parameters</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large is-resized">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/0_WZXzYl_m6KZQWtpE-1.jpg" alt="" width="500" height="505"></p>
<figcaption>Input parameters are wrapped and sent in SOAP body</figcaption>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p id="4d93">All associated request parameters of an OpenAPI operation are wrapped in a single new input type and sent in the form of an&nbsp;<strong>input message</strong>&nbsp;in the SOAP body. The wrapper input type’s name is generated by combining the original HTTP verb of the operation with the operation’s id and a postfix indicating it as the input type.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="cd0f" class="">Unlike JSON, a root XML element cannot be an array. So even if only a single parameter is involved, a wrapper type helps preserve all type related information of it including array representations that would otherwise be lost.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->In the WSDL example above, note the use of the&nbsp;<code>message</code>&nbsp;attribute in&nbsp;<code class="">&lt;input&gt;</code>&nbsp;that provides a link to the concrete&nbsp;<code>&lt;message&gt;</code>&nbsp;definition in WSDL. <!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<h4 id="3f92"><strong>Operation Responses</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="7661">The first success response definition (of the range 2XX) is also wrapped in a new output type which defines the body of the&nbsp;<strong>output message</strong>&nbsp;received. The type name is generated in a similar fashion as that of the input type except for the postfix which indicates it as an output type.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="5e1e" class="">Error responses of the range 400 and above are considered SOAP&nbsp;<strong>faults</strong>. Note, however, that response code has no significance in WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="6fa3">Again, note the use of the&nbsp;<code>message</code>&nbsp;attribute in&nbsp;<code>&lt;output&gt;</code>&nbsp;and&nbsp;<code>&lt;fault&gt;</code>&nbsp;that provides a link to the concrete&nbsp;<code>&lt;message&gt;</code>&nbsp;definition in WSDL.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h4 id="0c7e"><strong>SOAP Binding Transport Protocol</strong></h4>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="739a" class="">SOAP binding transport protocol is assumed to be HTTP for the conversion. Since SOAP supports other transport protocols as well, this can be modified manually if required.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<h3><strong>4. WSDL Messages</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="ae44" class="">WSDL messages defined using the&nbsp;<code>&lt;message&gt;</code>&nbsp;tag help describe the data being exchanged between the service provider and the client. Request messages are associated with the&nbsp;<code>&lt;input&gt;</code>&nbsp;tag while response messages are associated with the&nbsp;<code>&lt;output&gt;</code>&nbsp;or&nbsp;<code>&lt;fault&gt;</code>&nbsp;tag. Different parts of a message define its components and help provide a link to their concrete type schema definitions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="796f" class=""><em><strong>WSDL</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;message name=&quot;GET_GetMessage_InputMessage&quot;&gt;
  &lt;part name=&quot;GET_GetMessage_InputMessage&quot; element=&quot;schemas:GET_GetMessage_InputMessage&quot; /&gt;
&lt;/message&gt;
&lt;message name=&quot;GET_GetMessage_OutputMessage&quot;&gt;
  &lt;part name=&quot;GET_GetMessage_OutputMessage&quot; element=&quot;schemas:GET_GetMessage_OutputMessage&quot; /&gt;
&lt;/message&gt;
&lt;message name=&quot;GET_GetMessage_404&quot;&gt;
  &lt;part name=&quot;GET_GetMessage_404&quot; element=&quot;schemas:GET_GetMessage_404&quot; /&gt;
&lt;/message&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<h3><strong>5. OpenAPI Schema and XML Schema</strong></h3>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="5503">Schema definitions from OpenAPI are added to the XML schema(s) in WSDL&nbsp;<code>&lt;types&gt;</code>&nbsp;section. These not only include the types defined globally in OpenAPI&nbsp;<code>schema</code>&nbsp;definitions but also additional types that represent the wrapped request/response messages.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="490a" class="">In OpenAPI, you can fine-tune your schema definitions to represent XML types by adding<a href="https://swagger.io/docs/specification/data-models/representing-xml/">XML metadata</a>&nbsp;like information about namespace, prefix, XML node name, whether the property is an attribute or not, etc. Let’s have a look at how an OpenAPI schema defined with these attributes translates to a type in WSDL during the conversion.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="62f3" class=""><em><strong>OpenAPI</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">Message:
  title: Message
  required:
    - from
    - to
    - text
    - date
  type: object
  properties:
    from:
      type: string
    to:
      type: string
    text:
      type: string
    date:
      type: string
      format: date-time
    id:
      type: string
      xml:
        name: id
        attribute: true
  xml:
    name: MessageEntry
    namespace: https://www.example.com/message
    prefix: m</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p id="f2c3"><em>WSDL:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;types&gt;
  &lt;xs:schema xmlns:tns=&quot;https://www.example.com/message&quot; targetNamespace=&quot;https://www.example.com/message&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
    &lt;xs:complexType name=&quot;MessageEntry&quot;&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;from&quot; type=&quot;xs:string&quot; /&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;to&quot; type=&quot;xs:string&quot; /&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;text&quot; type=&quot;xs:string&quot; /&gt;
        &lt;xs:element minOccurs=&quot;1&quot; name=&quot;date&quot; type=&quot;xs:dateTime&quot; /&gt;
      &lt;/xs:sequence&gt;
      &lt;xs:attribute name=&quot;id&quot; type=&quot;xs:string&quot; /&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:schema&gt;
&lt;/types&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:list -->
<ul class="">
<li>The XML name&nbsp;<code>MessageEntry</code>&nbsp;specified in the OpenAPI schema overrides the schema’s original name&nbsp;<code>Message</code>&nbsp;and is used instead, when creating the XML schema type in WSDL.</li>
<li>The boolean&nbsp;<code>attribute</code>&nbsp;flag in property&nbsp;<code>id</code>&nbsp;helped create an XML attribute of the same name as can be seen from the above example.</li>
<li>Furthermore, notice how in the example above, the&nbsp;<code>namespace</code>&nbsp;information from the OpenAPI schema helped us place the type definition in&nbsp;<code>&lt;schema&gt;</code>&nbsp;of the same namespace in WSDL. The prefix assigned to this namespace&nbsp;<code>m</code>&nbsp;is also preserved in the root tag of WSDL.</li>
</ul>
<!-- /wp:list -->

<!-- wp:preformatted -->
<pre><code class="language-xml">&lt;definitions 
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
  xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; 
  xmlns:schemas=&quot;https://www.example.com/SayHello/schemas&quot; 
  xmlns:wsdl=&quot;https://www.example.com/SayHello/wsdl&quot; 
  xmlns:m=&quot;https://www.example.com/message&quot; 
  xmlns:e=&quot;https://www.example.com/error&quot; 
  targetNamespace=&quot;https://www.example.com/SayHello/wsdl&quot; xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot;&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p id="693a" class="">Let’s now see how XML metadata specified in request/response schema translate to a type in WSDL:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="d63d" class=""><em><strong>OpenAPI</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-json">responses:
  200:
    description: List of all message objects
    content:
      application/json:
        schema:
          type: array
          items:
            $ref: &#039;#/components/schemas/Message&#039;
          description: List of all message objects
          xml:
            name: Messages
            wrapped: true</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<p id="c37b" class=""><em><strong>WSDL</strong>:</em></p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class=""><code class="language-xml">&lt;types&gt;
  &lt;xs:schema xmlns:tns=&quot;https://www.example.com/SayHello/schemas&quot; targetNamespace=&quot;https://www.example.com/SayHello/schemas&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;  
    &lt;xs:complexType name=&quot;GET_GetMessages_OutputMessage&quot;&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name=&quot;Messages&quot;&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element minOccurs=&quot;1&quot; maxOccurs=&quot;unbounded&quot; name=&quot;response&quot; type=&quot;m:MessageEntry&quot;&gt;
                &lt;xs:annotation&gt;
                  &lt;xs:documentation&gt;List of all message objects&lt;/xs:documentation&gt;
                &lt;/xs:annotation&gt;
              &lt;/xs:element&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:schema&gt;
&lt;/types&gt;</code></pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2 id="b148">You have the WSDL — What next?</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="6f9f" class="">Having a WSDL basically means, you have a skeleton of what your SOAP service will look like. Various tools and frameworks can then help you accelerate actual implementation of the SOAP service by generating stubs. However, before you start implementing, you need to decide whether you plan to keep the SOAP service independent from your existing REST service or not. The former case will have bigger maintenance cost and it will be difficult to keep both services in sync when changes occur. The recommended way is to implement this SOAP service more as a proxy service that handles SOAP payloads but converts them to those compatible with your existing REST service. This way your actual service will still be the REST service while the SOAP service will help facilitate the smaller chunk of your customers like enterprises. What option you pick is something you are the best judge of.</p>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image">
<figure style="width: 700px" class="wp-caption aligncenter"><img src="/wp-content/uploads/2021/12/1_zo53IiiN0ricDCXce6IvNw-2.png" alt="From REST to SOAP, using API Transformer" width="700" height="466"><figcaption class="wp-caption-text">From REST to SOAP, using API Transformer</figcaption></figure>
<figcaption></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 id="0df0" class="">Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p id="1aae" class="">REST or SOAP or both? I hope this article offered some clarification in this regard. Ultimately the choice really depends on your service and your target customers. Once you’ve made the decision, there are various tools like&nbsp;<a href="https://www.apimatic.io/transformer/" target="_blank" rel="noreferrer noopener">API Transformer</a>&nbsp;available to help you get started.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="4e4f" class="">Continue reading more API Transformer Recipes:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="">
<li><a href="https://apimatic.io/blog/2018/11/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users" target="_blank" rel="noreferrer noopener">Enabling Postman’s Team Sharing Features for OpenAPI Users</a></li>
<li><a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest" target="_blank" rel="noreferrer noopener">Facilitating Migration from SOAP to REST</a></li>
<li><a href="https://apimatic.io/blog/2019/01/api-transformer-recipes-opening-ways-into-ibm-api-connect" target="_blank" rel="noreferrer noopener">Opening ways into IBM API Connect</a></li>
<li><a href="https://apimatic.io/blog/2019/07/moving-to-graphql-from-soap-or-rest" target="_blank" rel="noreferrer noopener">Moving to GraphQL from SOAP or REST</a></li>
</ul>
<!-- /wp:list --></div>
</div>
<!-- /wp:group --></div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/">The Whys and Hows of Exposing a SOAP Service Using Your REST API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The Anatomy of API Code Samples</title>
		<link>/blog/the-anatomy-of-api-code-samples/</link>
					<comments>/blog/the-anatomy-of-api-code-samples/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 08 Jun 2020 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Code Samples]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Code Sample]]></category>
		<category><![CDATA[Sdk]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=359</guid>

					<description><![CDATA[<p>Hence it comes as no surprise why code samples make an important part of the developer experience checklist list for several APIs programs, including the likes of Amazon, Facebook, Twilio, and Stripe. All of them have code samples included one way or the other and have found massive success. And for a very good reason. [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/the-anatomy-of-api-code-samples/">The Anatomy of API Code Samples</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="359" class="elementor elementor-359" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-2c773500 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="2c773500" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-41f291e6" data-id="41f291e6" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-7abbf594 elementor-widget elementor-widget-text-editor" data-id="7abbf594" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large"></figure>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9c8b" class="">While APIs form an important part of modern software development, it’s crucial to ensure that the utility offered by an API does not come at the cost of hindered productivity. Often it takes developers multiple hours to get familiar with an API before they can start building and integrating with it, however, a great developer experience can ensure developers get started with the least of steps and minimal time. In this blog, we will discuss how code samples help contribute towards an outstanding developer experience. We will discuss in detail what makes good samples, the different styles of samples, and how samples gel in with documentation and other elements to form a formidable developer experience.</p>
<h2 id="74b0" class="">Part I: Code Samples — Why Should We Care?</h2>
<p id="6565" class="">Learning new technologies is a complex task, even for the savviest of developers. Often it requires them to go through in-depth documentation, guides, and tutorials, something which they are very keen to skip on. What code samples do instead, is provide them with a task-based learning activity, which requires concrete action.</p>
<blockquote class="wp-block-quote">
<p>Developers love learning by experience.</p>
</blockquote>
<p id="60f5" class="">Developers are hands-on learners and code is another language they speak. When they see code, they want to try it, break it apart, put it into action. It’s their favorite call-to-action, often when figuring out if an API is the right fit for them, developers would have already tested out the code samples on developer portals to make their choice.</p>
<p id="d54b" class="">This was proved by a&nbsp;<a href="https://eventil.com/talks/PPSznP-jarod-reyes-how-twilio-writes-documentation">user study</a>&nbsp;conducted by Twilio, where they found that pages with lesser words before code, did better than pages with more sentences before code.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_dlX9uwiw3sdqOg9VFMaDKg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="a6b5">Hence it comes as no surprise why code samples make an important part of the developer experience checklist list for several APIs programs, including the likes of Amazon, Facebook, Twilio, and Stripe. All of them have code samples included one way or the other and have found massive success. And for a very good reason.</p>
<h3 id="c41c">API Calls are Complex Structures</h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_th9O3N-5hKaf_z2EAFepQQ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="0a22">Before we further talk about code samples, it’s important to understand the need for them in the first place. Why can’t developers do without them?</p>
<p id="3347">And it all starts with putting an API call together. A lot goes into an API call, all these protocols, and conventions, and developers get all caught up in it, instead of focusing on their actual projects. It can take developers multiple hours to figure out what to put into a call, taking a toll on their productivity and creativity and all adding up to integration time.</p>
<p id="e3da" class="">What code samples do is put there calls together for them, in languages of their choice, so they don’t have to do it. Nicely done samples can get developers to&nbsp;<strong>the first Hello World</strong>&nbsp;with an API without writing a single line of code. Samples that go beyond that can be put straight into production. Which now leads to our next question.</p>
<h3 id="0d90">How many code samples can you write?</h3>
<p id="cae9">Not enough! Especially if you are looking for coverage of every endpoint. APIs tend to change and evolve and to update the samples manually with every iteration, even you somehow managed to produce them is not feasible.</p>
<p id="226a" class="">A viable approach here is to auto-generate these samples using an out of the box documentation solution. Different tools have different ideas on how to package deliver these samples. While some do the bare minimum, others go the extra mile to see developers have to put in as little work to get them running. It’s important for API owners to select the right tool to provide the best samples to their consumers, it should be a top priority choosing a documentation solution.</p>
<h2 id="db1d">Part II : Code Samples — Several Different Styles</h2>
<p id="3b6d" class="">To help API owners make well-informed choices, we ran a study to compare this different style of samples, which we analyzed keeping in mind the following qualities:</p>
<ul class="">
<li><strong>Learning Objective</strong>&nbsp;— They demonstrate actual (non-theoretical) use of API</li>
<li><strong>Runnable</strong>&nbsp;— Are runnable out of the box on a console and IDEs</li>
<li><strong>Interactive</strong>&nbsp;— Come with a playground to tweak them around</li>
<li><strong>Language Idiomatic —&nbsp;</strong>Proper language Structure to gel in with production-ready applications</li>
</ul>
<p id="d76f" class="">We categorized our learning into 5 different styles, the summary of which is categorized in the table below:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_ciLtfA5TKB_gpe_Io6eBGg@2x.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="178f"><strong>Style 1: Static, Non- Runnable HTTP Snippets</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="alignnone" src="/wp-content/uploads/2021/12/1_utlmN5MUbvMqVh3hRBnOTw.png" alt="The Anatomy of API Code Samples" width="700" height="294"></p>
<figcaption>Code Sample on Postman</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>The first style is made of static samples, which are not runnable out of the box and required some tweaking done on them. The samples while easily navigable alongside the reference docs, come with no code playground and cannot be tried or tested on the portal.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_wNmdSk-xDCaLpftrbDJG8A.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="13bd" class="">We call the samples,&nbsp;<strong>HTTP snippets</strong>, because they essentially look like an HTTP call, without any proper language structure around them. Samples for some languages were copy-paste ready, while others took a bit of tweaking to run. In the case of Java, we had to configure maven dependencies for the build, and the generator could not pick some values such as the example body and the auth header, which have to be manually added.</p>
<p id="580c" class="">These samples were built upon the&nbsp;<a href="http://www.mashape.com/">Mashape</a>&nbsp;<code>httpsnippet</code> library, which has been made open source by Kong to be included within your documentation products. This specific sample was generated on the Postman platform. While there was no on-portal console, on the Postman app you can run a call using Postman collections.</p>
<h3 id="fc1d"><strong>Style 2: Dynamic, Non- Runnable HTTP Snippets</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_6UNsCWYCQM1Anwrbz6lLMQ.png" alt=""></p>
<figcaption>Code Sample on Stoplight.io</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">The second style of samples made of dynamic HTTP snippets. While the sample came along with a console, they were incomplete and had to be tweaked to be made runnable on the console and IDEs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-385 aligncenter" src="/wp-content/uploads/2021/12/1_WMUhQmNcXNDGLrkPLEfkYg.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="ec4f">After a few simple fixes, including the missing headers and entering a body, we got the samples running.</p>
<p id="1b16">The console, while getting the job done, made it a difficult task to add in these fields, offering no help on what goes inside the call. For somebody completely unaware of the API and starting new, making use of the console could prove to be a challenge.</p>
<p id="6bfc" class="">These samples, too, were built on the Mashape’s HTTP Snippet library and resembled barebone curl command lacking language structure.</p>
<p id="85db" class="">Samples in this style are available in Shell, Javascript, Node, C, Java, PHP, Objective-C, Swift, Python, Ruby, C#, GO and OCaml, covering pretty much all major platforms. We found this style on&nbsp;Stoplight.io.</p>
<h3 id="5646"><strong>Style 3: Dynamic, Runnable HTTP Snippets</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_4e7PmSXiQ1aKqaXKMbLluw.png" alt=""></p>
<figcaption>Code Sample on Readme.io</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="319f">The third style of samples made of dynamic snippets that were runnable out of the box. We had to add nothing to the samples to make them work, they came with all the required constructs.</p>
<p id="bed3">The samples come with an intuitive playground which lets you know what kind of field goes where with what data types. This makes it very easy to construct a sample.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img src="/wp-content/uploads/2021/12/1_FcRjxPahKOa71Z_fbu5vSw.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9218">Although the samples did a good job explaining what goes in and out of an API call, they were still not idiomatic and required work to be done on them. For instance, there is no body-serialization going on, all these different fields that have to go as arguments, go as one single string and there is no mechanism to put those values together in the form of one single string. These samples were found on Readme.io.</p>
<p id="7964" class="">What we also found missing in all three of these styles was lack of getting started guides, for instance, the HTTP client requires to be included as a dependency and then included as imports within the sample, something which has been left to the discretion of the user to figure out. For novice developers, setting up development environments may also prove to be a challenge, something which the samples or the documentation does not help with at all.</p>
<h3 id="384d"><strong>Style 4: Dynamic, Runnable HTTP snippets, with Proper Guides</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_Nys41hEwySBdPhLYQxYJGw-1.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p>The fourth style of samples, while also dynamic and runnable, came with an extra advantage. We found configuration instructions for them, which made it easier to work with them.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_0cK-QcLXleJ_VoBfOeTkXg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">The sample can be tried and tested on the in-product interactive console. Although the console was not as intuitive as the one found in Style 3, particularly making it tough to add arguments, you have to make sure to not mess up a single space of bracket when making up the JSON string, or the request won’t go.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_oelI4U_0KTc12oayvGuZHQ.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="d3c5">Style 5: Dynamic, Runnable &amp; Language Idiomatic snippets</h3>
<p id="86cf">These samples are different than the ones we saw above, you see no specifics of making an API call here, no URLs passed or methods declared or headers going in. Instead, you see some object-oriented code here, using proper crud mechanisms.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_DspO9rFjpbnhtLZjxYFZ0Q.png" alt=""></p>
<figcaption>Code Sample generated on APIMatic.io</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8cb9" class="">This is because these samples were generated alongside an SDK, an SDK abstracts out all the details about making an API call and generates additional language structure around these samples, so developers have to write as little communication code as possible. This includes body serialization and response deserializations, which makes it very easy to work with data points.</p>
<p id="266d" class="">The samples can be tried and tested out and tweaked using an interactive explorer, which comes with intuitive, form-based ways to input. The console validates every field, so no incorrect data goes in and helps you construct samples without touching code at all. With the console you can construct API calls with your sample arguments and authentication keys, and copy-paste the resulting samples in your production-ready applications.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_wcQclzK732E-djl-Ws-SlQ.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="279e">And all of that comes with proper documentation, the platform gives API providers the facility to document every parameter in each of the endpoints and data models. Providers can also auto-generate &#8220;getting started guides&#8221; for different IDEs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_bvvGJZTDaI0E2-k57HCWHg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="has-text-align-center" style="text-align: left;">Once set, the developers navigate to their desired use case, copy-paste the code, and start working on the business logic — letting the SDK and the sample take care of logistics.</p>
<h2 id="21f7">Part III: Making Code Samples Work in Production</h2>
<p id="77cf" class="">Looking at the different styles of samples, the question that now arises is how practical are these samples to use? Do they completely replace the need to code, or are they just a push towards the right direction? Do they fully demonstrate the use case for the endpoint? Or do they just explain the logistics of making an API call?</p>
<h3 id="d87e">Language Coded HTTP Snippets or More?</h3>
<p id="6704">If you closely look at many of the auto-generated samples, especially the styles 1 to 4, what they essentially do is eliminate the redundant work of configuring environments, and help consumers figure out what kind of syntax to use. However, when making real-world use of API, you need a lot more. Do these samples, which essentially lack language structure and look like language translated HTTP requests, cut it? The answer is<strong>&nbsp;NO&nbsp;</strong>and for the following reasons:</p>
<ul class="">
<li><strong>No Data Types:</strong>&nbsp;The samples takes input and output in the form of a string, leaving it to the consuming developers to write an efficient i/o mechanism to complete these requests. Often the fields inside the body are not documented.</li>
<li><strong>No Data Models:</strong>&nbsp;Modelling the JSON/XML as classes make it easier to deal with the data, both input, and output. These “models” add a whole different layer on top of the API, with your application having to interact with the model, instead of queried response in JSON or XML.</li>
<li><strong>No Validation and Error Handling:</strong>&nbsp;Since there is no proper I/O mechanism, and both inputs are taken and output returns in form of JSON strings, it’s impossible to validate the sent data and handle error cases to determine what went wrong with the request.</li>
</ul>
<p id="d900">To further demonstrate our point, we will write a&nbsp;<strong>Sample App&nbsp;</strong>to make a new&nbsp;<strong>pet&nbsp;</strong>entry to a store. The app will utilize Code Samples generated by&nbsp;<strong>Postman&nbsp;</strong>for the endpoint<strong>&nbsp;Add Pet.</strong></p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_utlmN5MUbvMqVh3hRBnOTw-1.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e759" class="">Copy-pasting the code straight away did not work. To configure the HTTP client, we had to include the maven dependency to the build. Following which we found the authentication header missing. We passed in the credentials:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><strong><code>.addHeader(&quot;api_key&quot;, &quot;special-key&quot;)</code></strong></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b89b" class="">And then had to build a JSON String to pass in the input, since the argument body is passed as a String. Constructing an argument body of the two required fields, this is how the sample looked like:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>package TestApp.Testapp123;
import java.io.*;
import okhttp3.*;

 class main {
  public static void main(String []args) throws IOException{
     
	 OkHttpClient client = new OkHttpClient().newBuilder()
	 .build();
	  MediaType mediaType = MediaType.parse(&quot;application/json&quot;);
	  RequestBody body = RequestBody.create(mediaType, &quot;{\&quot;name\&quot;:\&quot;doggie\&quot;,\&quot;photoUrls\&quot;:[\&quot;photoUrls1\&quot;]}&quot;);
	  Request request = new Request.Builder()
	 .url(&quot;https://petstore.swagger.io/v2/pet&quot;)
	 .method(&quot;POST&quot;, body)
	 .addHeader(&quot;Accept&quot;, &quot;application/json, application/xml&quot;)
	 .addHeader(&quot;Content-Type&quot;, &quot;application/json&quot;)
	 .addHeader(&quot;api_key&quot;, &quot;special-key&quot;)
	 .build();	  
	  Response response = client.newCall(request).execute();
	  System.out.println(response.body().string()); 	
	    }
	  }</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">We ran the code after this tweaking, and it worked like a charm. So how do this sample further translates to real-world usage? If we were to take inputs for the Pet entry from a user, how do we send that as arguments? And before that how do we ensure the data taken from the user is the of the correct type? To tackle that we wrote a model class for the Pet Object, with all the underlying attributes including getters and setters.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted"><code>package TestApp.SimpleConsoleAppFix;

import java.util.List;

import io.swagger.petstore.models.Category;
import io.swagger.petstore.models.StatusEnum;
import io.swagger.petstore.models.Tag;

public class PetModel {
	
	    public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public Category getCategory() {
		return category;
	}
	public void setCategory(Category category) {
		this.category = category;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public List&lt;String&gt; getPhotoUrls() {
		return photoUrls;
	}
	public void setPhotoUrls(List&lt;String&gt; photoUrls) {
		this.photoUrls = photoUrls;
	}
	public List&lt;Tag&gt; getTags() {
		return tags;
	}
	public void setTags(List&lt;Tag&gt; tags) {
		this.tags = tags;
	}
	public StatusEnum getStatus() {
		return status;
	}
	public void setStatus(StatusEnum status) {
		this.status = status;
	}
	    Long id;
	    Category category;
	    String name;
	    List&lt;String&gt; photoUrls;
	    List&lt;Tag&gt; tags;
	    StatusEnum status;

}</code></pre>
<!-- /wp:preformatted -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e551" class="">Following which we wrote the code to take in input values for these attributes. Now that we ensured we took in these values, with their correct data types, how do we pass these in the request, since the request passes the arguments in the form of a string. Manually doing this was, of course, unfeasible and out of the question, so we had to write in an object to string mapper to do the job for us. This took in these various attribute fields and put them together in the form of a JSON string.</p>
<p id="b586" class="">It was at this point that we were able to achieve a business use case out of the sample. We could pass in the input parameters, with their correct types, concatenated as a JSON string and passed along with the argument. The model allowed us to keep local records of the sent values as well.https://blog.devapi.dream.press/media/a6a1ace16d322eaaf541f83acf4905f9</p>
<p id="4294" class="">Working with multiple endpoints and multiple models would have taken us even more time, depending on the use case and business logic. For instance, for the GET endpoints, we would have to write a string to object mapper to parse values from the response string back to our model. While the sample does a great job pushing developers in the right direction, it is clear that it is not a plug and play situation. Developers have to put in a lot of code to get the calls running, and have to figure out on their own what goes before or comes after the API call.</p>
<p><em>Now imagine if there were samples that could take care of all these logistics, you had to write no communication code at all, and could just plug and play a sample into action. The good news is, you no longer have to imagine. The language idiomatic samples generated alongside an SDK already do that for you.</em></p>
<h2 id="21e8">Language Idiomatic Code Samples — The Way To Go</h2>
<p id="b15b">SDKs have often been labeled as the cornerstone of the API developer experience. What SDKs essentially do is that they abstract out all underlying details of making an API call, making your API look like a library. They provide developers a complete framework to model their applications, including all the necessary dependencies, referenced libraries, system libraries, i/o mechanisms, and class models.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter" src="/wp-content/uploads/2021/12/1_ncYb-AnKZ5JZxOytMwp1PA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="4ce3" class="">Furthermore SDKs automatically format API responses to match the data types used in the programming language. They add an interface on top of the API, so your app interacts with the modeled data from SDK, instead of raw API arguments and responses. By providing SDKs, you can help developers focus on the business logic while taking care of API communication code.</p>
<p id="933e">Code samples generated with SDKs have a lot more work done on them. Since the SDK abstracts out request construction, none of the construction bit makes part of the sample, making the sample look very lean. Such samples can easily fit in with your applications in a very scalable manner, you only have to add minimal communication code, since there exist mechanisms to access, manipulate and work around with all the data fields, that go in and come out of an API call.</p>
<h2 class="has-text-align-center">. . .</h2>
<p id="308d" class="">Concluding this all, we strongly recommend that developers make use of code samples to consume APIs. No matter what style, design, or approach. Code samples will help you get started easily and save you tons of time. While for most people, the simple HTTP snippets may do the job, it is samples with more language structure that help with real-world use and can fit in straight with your applications.</p>
<p id="8467" class="">Again we emphasize the fact that the developer experience is a key driver for an API adoption. APIs are meant to execute integrations, and the easier to integrate, the better the API. Luckily for you, we at APIMatic hold all sorts of expertise to help improve the experience you deliver to developers. Reach out to us today at&nbsp;<a href="https://apimatic.io/contact">https://apimatic.io/contact</a>&nbsp;and let’s discuss what can be done to enhance your offerings today.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/the-anatomy-of-api-code-samples/">The Anatomy of API Code Samples</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/the-anatomy-of-api-code-samples/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Serving The Senior Living Industry with Caremerge API</title>
		<link>/blog/serving-the-senior-living-industry-with-caremerge-api/</link>
					<comments>/blog/serving-the-senior-living-industry-with-caremerge-api/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Wed, 01 Apr 2020 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[Case Studies]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Documentation]]></category>
		<category><![CDATA[Software]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=398</guid>

					<description><![CDATA[<p>According to the United States Department of Health and Human Services, there are over 39.6 million elderly people in the US, out of which 1 Million are being actively served an elderly care facility. Today’s seniors want to better leverage technology to enhance their quality of life. The industry, estimated at $740 billion, is full [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/serving-the-senior-living-industry-with-caremerge-api/">Serving The Senior Living Industry with Caremerge API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="398" class="elementor elementor-398" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-144a492c elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="144a492c" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-72f7b65c" data-id="72f7b65c" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-6bc5822 elementor-widget elementor-widget-text-editor" data-id="6bc5822" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="alignnone wp-image-399" src="/wp-content/uploads/2021/12/1_aYem2QZt6J4QK6bCUJh3OA-1024x519.png" alt="Serving The Senior Living Industry with Caremerge API - APIMatic Success story" width="1024" height="519"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="c78a" class="">According to the United States Department of Health and Human Services, there are over 39.6 million elderly people in the US, out of which 1 Million are being actively served an elderly care facility. Today’s seniors want to better leverage technology to enhance their quality of life. The industry, estimated at $740 billion, is full of challenges and is ready for disruption.</p>
<p id="c45a" class=""><a href="https://caremerge.com/">Caremerge</a>&nbsp;is one of the companies providing tools for modern elder care, including an API platform to drive apps and integrations. Partnering with APIMatic saved the Caremerge team lots of time and made it easy for others to build with their API.</p>
<p id="5757" class="">The company aims to provide an all in one platform to address all problems that challenge the demographic including Family Engagement, Community Engagement, Calendar Central, and Chronic Care Management. Additionally, they bring in various pre-existing services from the market and make them more accessible for these senior citizens, for instance with voice commands. Something which they manage using multiple internal microservices and a public API.</p>
<p id="9806" class="">Caremerge API powers much of the communication between the facilities and services they offer, and allows them to build integrations with various third-party vendors and services. Building those integrations requires the documentation for the API to be always upto the mark, meeting all modern standards, so developers spend less time figuring out how to integrate.</p>
<p id="364b" class="">But maintaining and producing documentation is a challenge of its own, something which took them valuable resource and time. Since the product is very technical, they had a senior engineer working on documentation. To save time for that resource they decided to automate documentation and started looking for an out of the box documentation solution. Trying multiple open source and paid solutions including Swagger UI, they found a lot of them hard to maintain. Until they came across APIMatic, which not only did the job for them by producing better than ever documentation, but did it in record saving time, while completely minimising the effort at their end.</p>
<blockquote class="wp-block-quote">
<p>“APIMatic helps us save 20–30% of the time it took us to manage documentation for our API”</p>
<cite>Fahad Aziz, Co-Founder and CTO, Caremerge</cite></blockquote>
<p id="d696" class="">Often documentation can get too wordy and hard to navigate, but according to Caremerge, their customers and partners loved the way information was laid out for them.</p>
<blockquote class="wp-block-quote">
<p>“ APIMatic has made integrating so easy for us. Whenever our partners go through the documentation, they know just what to do.”</p>
<cite>Muneeb Khawaja, VP Engineering, Caremerge</cite></blockquote>
<p id="f915" class="">What added wow factor to the documentation, was the interactive console, which allowed developers to test inputs and outputs, within the docs, allowing developers to back and forth with the API. Today CareMerge is working on more integrations that ever, helping seniors through out America live reasonably enhanced lives.</p>
<blockquote class="wp-block-quote is-style-default">
<p>“Integrations built with APIMatic Documentation are benefitting over 30 thousand senior citizens ”</p>
<cite>Fahad Aziz, Co-Founder and CTO, Caremerge</cite></blockquote>
<p id="4050" class="">For us at APIMatic, it has always been a motto to make lives of developers easy, to make things comfortable for them, and those developers in turn contributing to enhance the quality of lives of our s<em>enior citizens,&nbsp;</em>is something which makes us really happy. Just like the medicare and healthcare industry, we are excited to see the senior living industry go through such a shift, and are delighted to be a part of it.</p>
<p class="">Thanks to&nbsp;Adam DuVander.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/serving-the-senior-living-industry-with-caremerge-api/">Serving The Senior Living Industry with Caremerge API</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/serving-the-senior-living-industry-with-caremerge-api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>State of Developer Experience: SMS APIs 2020</title>
		<link>/blog/state-of-developer-experience-sms-apis-2020/</link>
					<comments>/blog/state-of-developer-experience-sms-apis-2020/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Mon, 02 Dec 2019 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Communication APIs]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Sms]]></category>
		<category><![CDATA[Sms Marketing]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=436</guid>

					<description><![CDATA[<p>Every day, 23 billion SMS messages are sent worldwide, which is equivalent to 16 million messages per minute, exchanged between 7 billion mobile subscribers across the world — (CTIA) The SMS industry is huge, and the bulk SMS industry huger. Wide adoption and availability of the technology has made it the number one choice of [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/state-of-developer-experience-sms-apis-2020/">State of Developer Experience: SMS APIs 2020</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="436" class="elementor elementor-436" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-21c95151 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="21c95151" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-33c470a0" data-id="33c470a0" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-188ddceb elementor-widget elementor-widget-text-editor" data-id="188ddceb" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-437 aligncenter" src="/wp-content/uploads/2021/12/1_9S0vdIiVL9SvUXrR4vLH8w-1024x512.jpg" alt="State of Developer Experience: SMS APIs 2020" width="1024" height="512"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<blockquote class="">
<p id="16fa" class="">Every day, 23 billion SMS messages are sent worldwide, which is equivalent to 16 million messages per minute, exchanged between 7 billion mobile subscribers across the world — (CTIA)</p>
</blockquote>
<p id="4cab" class="">The SMS industry is huge, and the bulk SMS industry huger. Wide adoption and availability of the technology has made it the number one choice of communication for businesses, who can now reach out to millions of people across the globe with the minimum of effort. Businesses today are making use of SMS messages to send alerts of all kinds, and for a very good reason.</p>
<blockquote class="">
<p id="d3ad" class="">SMS messages are more likely to be opened than Emails, a typical message is read within 3 minutes with a CTR of 19% versus 2% for email.</p>
</blockquote>
<p id="b46e" class="">A lot of that is being done over (A2P), Application-to-Person, where an application is programmed to trigger messages at particular intervals or events. There are a number of tools available to run these campaigns, but none as customizable and powerful as SMS APIs which give direct control to businesses to build messaging facilities straight into their systems.</p>
<p id="9dc1" class="">As of now, they are more than&nbsp;<strong>750 Messaging APIs</strong>&nbsp;currently listed on Programmable Web, with more and more services being listed daily. Using SMS APIs, companies can send complex 2-Way SMS messages, marketing messages, verification messages, notifications, alerts and warnings of all kinds.</p>
<p id="0f97" class="">To see what makes some of these APIs so popular, we shortlisted a pool of them, analyzed what they had to offer, and what really makes them so popular in this age and time. The APIs that we analyzed include:</p>
<ul class="">
<li>Twilio</li>
<li>Nexmo</li>
<li>Plivo</li>
<li>Telstra</li>
<li>AT&amp;T</li>
<li>Bandwidth</li>
<li>ClickSend</li>
<li>MessageMedia</li>
</ul>
<p id="db07" class="">For the analysis, we started off by looking at the features these APIs have to offer, followed by the compliances they meet, and then their Developer Experience programs. By the end of the blog, you would know what does it take to stand out in the industry and compete with the giants we know today.</p>
<h2 id="9de9"><strong>Essential Features — SMS APIs 2019</strong></h2>
<p id="53af" class="">Analyzing these APIs in terms of the functionality they provide, we recognized that there are a set of features that are common to most of them. These features are the bare essentials if you want to make it in the SMS APIs space. They include:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-438 aligncenter" src="/wp-content/uploads/2021/12/1_OVg9CFI3FVS4MJiJUYoohA.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8d87" class="">Many of the APIs included in this study go beyond that and have added more value, building on these features. For instance Twilio allows sending of MMS messages, allowing senders to attached pictures or other forms of media. Furthermore, they have a mechanism to recognize the optimum routes to send out messages, ensuring guaranteed delivery in record time. Nexmo features a persistent sending ID, using the same number to send messages to one person. Plivo features number pooling, to distribute campaign loads and ensure quicker delivery.</p>
<h2 id="3099"><strong>Compliance Requirements — SMS APIs 2019</strong></h2>
<p id="8c9e" class="">For the telecommunication industry, one of the biggest challenges faced is being compliant with local and international regulations. Often continents, countries, states and even specific carrier networks, have a set of rules they abide with, and unless an SMS API caters to these rules, messages may never be delivered as intended and campaigns may go in vain.</p>
<p id="6064" class="">For most top SMS APIs, all these regulations are met and precautions are implemented, some important regulations and guides include:</p>
<ul class="">
<li><a href="https://www.fdic.gov/regulations/compliance/manual/8/viii-5.1.pdf">The TCPA (<em>Telephone Consumer Protection Act)</em></a></li>
<li><a href="https://api.ctia.org/wp-content/uploads/2019/07/190719-CTIA-Messaging-Principles-and-Best-Practices-FINAL.pdf">CTIA Messaging Principles and Best Practices</a></li>
<li><a href="https://docs.wixstatic.com/ugd/9456a5_72a6056a11f5401c95d29181e850625b.pdf">CTIA Short Code Monitoring Handbook</a></li>
</ul>
<p id="9a39">Some common practices to be globally compliant by most regulations include:</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-439 aligncenter" src="/wp-content/uploads/2021/12/1_X_kTbzcew9iAPJo5qvqq4A.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="57e4" class=""><strong>What Really Makes Great SMS APIs?</strong></h2>
<p id="6b08" class="">So by now, if you are trying to rate one SMS API over the other, you probably would run into too many of them offering the same set of features, with different implementations, all offering them one way or the other, leaving you guessing that which of them is really worth it?</p>
<p id="ecc8" class="">And for that, we take you to the question,&nbsp;<strong>what makes a great API?</strong></p>
<p id="5e94" class="">And the unanimous answer to that is great&nbsp;<strong>Developer Experience.</strong>&nbsp;All the best APIs are easy to consume and require shorter development time to integrate. At the end of the day, each API is supposed to facilitate interoperability, and the easier is it to integrate, the better the API.</p>
<p id="a149" class="">To see how these SMS APIs stood out, we analyzed their publicly available Docs and Developer Portals and came up with the matrix below, which summarizes our findings.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-440 aligncenter" src="/wp-content/uploads/2021/12/1_q_AESiXsFaY4P0uKPSMWHg-1024x640.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="4f3d">Where each of these API providers fills in quite a number of checks on the Developer Experience Checklist, each of them stood out in some respective fields.</p>
<p id="481b" class="">Twilio, Nexmo and ClickSend do a wonderful job with their Landing Pages, which do a great job onboarding users with what facilities they offer, what features does the API come with and how can they help them solve problems with tons of uses cases, tutorials, and Sample Apps. Almost all API Providers have made use of visuals and diagrams to explain the inner workings of an API.</p>
<p id="ef3a" class="">Bandwidth offers a Sandbox environment where users could play around with the API, similarly, MessageMedia offers an API console where Code Samples can be tried around with. Telstra has a run in postman button, where you can try out sample calls, the click of a button takes you to the postman tool.</p>
<p id="ec68">Both Twilio and Nexmo offer a dedicated API Service Status page, with intuitive layout structures that help consumers get to their desired bit of information faster.</p>
<p id="d7b9" class="">SDKs and Code Samples are also something that all these popular APIs have to offer, popular languages being: Ruby, PHP, Python, JavaScript, C# and Node.</p>
<h2 id="1752" class=""><strong>Great Developer Experience: A Challenge</strong></h2>
<p id="d64f" class="">If you are out at this making an SMS API, it’s essential that you miss out on none of these offerings, or you will stand no chance against the competition. Often smaller teams come up with brilliant technology but lack the numbers to focus on anything else except the core offering. It is just as essential to focus on material revolving around the API, the marketing pages, documentation, client libraries and much more, all of which take a lot of time, effort and energy, but without none of which your API will see success or adoption.</p>
<p id="54e5" class="">While companies like Twilio, Nexmo, and AT&amp;T can afford to heavily invest in programs like that, for startups and smaller companies it becomes impossible to spare time or money. With the cost and time it takes to produce all of this material, it’s not scalable with evolution, often Docs and SDKs lag far behind when APIs are multiple versions ahead, and this is the reason.</p>
<p id="4f0d" class="">So the challenge here is how do you take your brilliant API out to developers when you don’t have the means to keep it developer-friendly for long?</p>
<p id="050f" class="">And the answer lies in automation, while a human developer may take several days to produce and maintain all of these components, Code-Gen Engines can take an API Spec as input to automatically generate all of these components and all of it within a few minutes. Want to make updates to your API? Don’t worry, build the engine into your CI/CD pipeline and generate new components with every new push, release or update.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-441 aligncenter" src="/wp-content/uploads/2021/12/0_UFKse1UtCEOQwgJr.gif" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="691f" class="">All you now have to do is, add more and more features to your API, make it compliant to the point you can rollover your competition, while a Code-Gen Engine takes care of the material you need to put it out in front of Developers.</p>
<p id="7373" class="">Need to talk more about automating Developer Experience?&nbsp;<a href="https://www.apimatic.io/contact">Speak to us</a>&nbsp;today and we’ll help you get started.</p>
<p class="">Thanks to&nbsp;Adam DuVander.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/state-of-developer-experience-sms-apis-2020/">State of Developer Experience: SMS APIs 2020</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/state-of-developer-experience-sms-apis-2020/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>6 Practices to Achieve Consistency across API Specifications</title>
		<link>/blog/6-practices-to-achieve-consistency-across-api-specifications/</link>
					<comments>/blog/6-practices-to-achieve-consistency-across-api-specifications/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Fri, 20 Sep 2019 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api Design]]></category>
		<category><![CDATA[Open Api]]></category>
		<category><![CDATA[Raml]]></category>
		<category><![CDATA[Swagger]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=666</guid>

					<description><![CDATA[<p>This blog is based on a talk presented at APIMatic’s meet-up&#160;&#160;in San Francisco earlier in the year.&#160; API specifications have become a crucial part of the API life cycle, acting as a gateway to better design, documentation and tooling for your API. Due to the growing popularity of API specifications, more and more organizations are [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/6-practices-to-achieve-consistency-across-api-specifications/">6 Practices to Achieve Consistency across API Specifications</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="666" class="elementor elementor-666" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-e60d326 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="e60d326" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1fa8c7cd" data-id="1fa8c7cd" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-2d4278a2 elementor-widget elementor-widget-text-editor" data-id="2d4278a2" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-667 aligncenter" src="/wp-content/uploads/2021/12/1_BYxuxcs43uZuq_Dwuti2ZQ-1024x512.jpg" alt="6 Practices to Achieve Consistency across API Specifications" width="1024" height="512"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<blockquote>
<p class="">This blog is based on a talk presented at APIMatic’s <a href="https://youtu.be/hBDDc_qhnU4">meet-up&nbsp;&nbsp;in San Francisco</a> earlier in the year.&nbsp;</p>
</blockquote>
<p id="fe62" class="">API specifications have become a crucial part of the API life cycle, acting as a gateway to better design, documentation and tooling for your API.</p>
<p id="5660" class="">Due to the growing popularity of API specifications, more and more organizations are moving towards spec-driven development. In this process, API are designed before built, so that any flaws and inconsistencies are recognized early on and fixed before the development. The approach ensures you stay on budget and avoid snags that can come from miscommunication.</p>
<p id="e125" class="">While a spec may ensure that there are no hiccups while developing APIs, the document itself is prone to inconsistencies and errors. Multiple stakeholders including developers, product owners, and technical writers contribute to the spec, and with all of them bringing in their own flavor and style, it often ends up looking like a mess.</p>
<p id="6a58" class="">Moreover, a spec is more than just a design artifact, it serves as a gateway to various API tooling throughout the API lifecycle. Many of the API Design, Management, Testing, Deployment, and Documentation tools today take API Specifications as input to work on the API, and unless free of flaws and contradictions, a spec can never be rendered in an efficient or effective manner.</p>
<p id="e314" class="">It’s therefore essential to have a set of guidelines to ensure the document remains free of conflicting styles and formats and is produced in one cohesive manner. This blog will cover a few of these guidelines and practices that you can follow to achieve consistency across the API Specification workflow while keeping it functional and agile.</p>
<h2 id="358a"><strong>1. Create a Style Guide</strong></h2>
<p id="8a35">Often organisations have a style guide for designers and writers to follow when producing branding content and material. In a similar fashion, all API teams should develop a style guide for writing API Specifications. And it should be enforced as a uniform practise throughout the organisation. The guide should recommend what sort of conventions and practices are to be used when contributing to the specification.</p>
<p id="e581" class="">For instance, often it’s unclear if:</p>
<ul class="">
<li>Schemas should have examples</li>
<li>In-line schemas are permissible</li>
<li>Operations must have descriptions</li>
<li>Parameters and responses restricted to certain types or numbers</li>
</ul>
<p id="8cdd" class="">Similarly, in many more cases like that, contributors whenever in doubt, just work with a style they are used to or comfortable with. The easy way out is to standardize these practices, and recommend a way which guides contributors from all departments to make additions in a uniform manner.</p>
<p id="35a2" class="">To ensure that the recommended practices are being followed, and no conflicts make through to the actual document, validators should be set up that verify if the addition is aligned with the recommended style. This can be executed with Linters, a popular linting tool for specs is “<a href="https://github.com/wework/speccy">Speccy</a>”, which takes your custom rules and runs the specs against it, validating it against those rules.</p>
<p id="c2bc" class="">Building validation into the CI/CD cycle further streamlines the process, so whenever updates are pushed to your API, they first go through these checks so that nothing of varying nature is added to your specification.</p>
<h2 id="4a8c"><strong>2. Promote Visibility and Reusability</strong></h2>
<p id="26b6" class="">Another common practice and really a nice one is to publish your API specs to Version Control for across board visibility. Make them available on a master repository and create a pull request mechanism, allowing nothing to pass to the central repository without a review, while still allowing contributors to view and make use of each and every contribution.</p>
<p id="9d76" class="">A big part of the specification is the schema itself, many organizations today are using JSON schema to define those specifications, even though OpenAPI has a schema that is subset of JSON schema, but JSON schema has very good tooling around it and in many more numbers. Defining models in JSON schema would make the spec very versatile and open-ended.</p>
<p id="892e" class="">You can again use Speccy to convert JSON schema to OAS schemas. This would allow you two things:</p>
<ul class="">
<li><strong>Keeping your schema separate from API specifications</strong></li>
</ul>
<p id="f7de">You have a new team and they want to use the same object the other team is using, from going to actually write it from hand again, and having discrepancies, you can use the same schema, just refer it in your spec.</p>
<ul class="">
<li><strong>Validating API specifications</strong></li>
</ul>
<p id="725f" class="">With JSON Schema Linting, you can write better tests. Resulting in better validation of schema.</p>
<p id="4ffb" class="">And for every artifact you are creating, schema or the spec, version them, so once your program scales, you know what version your API team is dependent on.</p>
<h2 id="5493"><strong>3. Separate API Design from Documentation</strong></h2>
<p id="f93c" class="">A specification is normally maintained by API developers, they are the people responsible for putting in what the requests are, what the endpoints are, how the responses would look like, basically the people turning an API into reality, but there is also a team of tech writers who work on the spec to add documentation, sample code, guides and tutorials, and all sort of help material to make sure that the API human-readable and usable.</p>
<p id="350e">To allow both the development and documentation team to work simultaneously, you can maintain documentation and tutorials as a separate project while the developers work on the spec to make changes to design</p>
<p id="6948" class="">There’s a concept of&nbsp;<strong>overlays</strong>, which has already been introduced in RAML and is still being talked about in OpenAPI Spec, and we here at APIMatic are actually building this out in our own format. What Overlays essential does is allow separation of these two concerns, letting your tech writers work independently so that any drastic change made to the specification does not affect them. The two can be merged later to make a comprehensive API reference.</p>
<h2 id="1af4" class=""><strong>4. Tag your Operations</strong></h2>
<p id="9fdc" class="">Another great practice is tagging your operations with groups and status and creating multiple versions of the same spec, for instance: Dev, Public, Partner, and Internal for different stakeholders. With this, a team can work on the same spec without creating multiple versions, and expose only the portions of that spec to the people they want it to be exposed. While exposing an Internal API, out of many hundreds of endpoints, choose the ones you want to make public while keeping the original spec as a single source of truth.</p>
<h2 id="8cbb" class=""><strong>5. Merge your API Specifications</strong></h2>
<p id="a227" class="">As your API team expands, you have multiple teams working on different services, the recommended practice is that specs for those services are maintained independently. Developers working on those services, as soon as they are done the building, update the spec and get it out. However, maintaining these services and specs separately does not mean they have to be exposed to the user in a similar fashion. Merging these different specs into a single unified one can provide the advantage of presenting a single view, single documentation, single library, and a single mock service.</p>
<p id="6a5c" class="">Few specification formats, especially the OpenAPI format is flexible enough to achieve this and anybody get a pipeline running by just writing a script. But the tool that we are working on at APIMatic will be able to merge any specification into a single one regardless of the format and the nature of it.</p>
<h2 id="8879" class=""><strong>6.</strong> Generate<strong> Changelogs</strong></h2>
<p id="b808" class="">This is another form of validation that you can achieve before making your specification public. Let’s say a developer comes in and makes an optional parameter, required. Now that would make things different for the user, and would not want this released without a version bump or release notes.</p>
<p id="bdb6" class=""><a href="https://github.com/Sayi/swagger-diff">Swaggerdiff</a>&nbsp;is a tool that can help you avoid that. Although it can work with just OpenAPI formats, for now, you can always make use of API Transformer to convert your spec to the format it supports and then run rests for your specifications to detect breaking and minor changes, which can be rendered in form of change-logs. A little work by your documentation team and they’d be good to go for your audiences as well.</p>
<h2 id="cee6" class="">What’s Next?</h2>
<p id="ca0a" class="">Now that you know what practices you need to follow to make sure the Spec is produced in a neat, clean and well-organized manner, it’s now time to consider the big question. What can you do with that spec, or why do you need such a well-rounded spec in the first place? Stay tuned for the next blog in line, which will discuss what can be done with a great-looking API specification.</p>
</div>
</div>
</div>
</div>
<!-- /wp:embed -->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/6-practices-to-achieve-consistency-across-api-specifications/">6 Practices to Achieve Consistency across API Specifications</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/6-practices-to-achieve-consistency-across-api-specifications/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Moving to GraphQL from SOAP or REST</title>
		<link>/blog/moving-to-graphql-from-soap-or-rest/</link>
					<comments>/blog/moving-to-graphql-from-soap-or-rest/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 12 Jul 2019 11:27:02 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Blog]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SOAP]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[GraphQL]]></category>
		<category><![CDATA[Graphql Schema]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=624</guid>

					<description><![CDATA[<p>This blog is the fourth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&#160;API Transformer into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/moving-to-graphql-from-soap-or-rest/">Moving to GraphQL from SOAP or REST</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="624" class="elementor elementor-624" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-5fc28771 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="5fc28771" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1d7582c7" data-id="1d7582c7" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4f627216 elementor-widget elementor-widget-text-editor" data-id="4f627216" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-625" src="/wp-content/uploads/2021/12/1_R4yFQi_9PINp_LHuwRsVag-1024x512.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e10f" class=""><em>This blog is the fourth part of the series called “API Transformer Recipes”. The series aims to highlight numerous ways in which developers can integrate&nbsp;</em><a href="https://www.apimatic.io/transformer"><em>API Transformer</em></a><em> into their workflow in order to gain access to a wide range of tools and frameworks. Hopefully, it will help eliminate any assumptions that they have about being restricted to a particular set of tools just because they use a certain API specification format.&nbsp;</em></p>
<h2 id="8e77" class="">Announcing support for GraphQL Schema</h2>
<p id="4d39" class="">Oh yes, you heard it right. You can now&nbsp;<a href="https://docs.apimatic.io/changelog/support-for-exporting-graphql-schema-files-now-available/">export GraphQL Schema from APIMatic</a>&nbsp;using&nbsp; API Transformer! Previously, we provided our users means of&nbsp;<a href="https://blog.apimatic.io/api-transformer-recipes-facilitating-migration-from-soap-to-rest-72b8248432d8">migrating from SOAP to REST</a>, and now also aim to facilitate those SOAP/REST users looking to migrate to GraphQL.</p>
<p id="c99b" class="">Why GraphQL, you wonder? Without going into details, GraphQL is known for being simpler, faster and efficient allowing users to fetch exactly the data they need. Many strongly believe that GraphQL is the future of APIs. So if you are one of them and are considering moving to GraphQL, read on.</p>
<p id="2a57" class="">Our support for GraphQL schema is currently in beta so we are open to any feedback/suggestions that you might have.</p>
<h2 id="512e" class="">Role of GraphQL Schema</h2>
<p id="7f3a" class="">GraphQL schemas for a service are defined using&nbsp;<a href="https://graphql.org/learn/schema/">GraphQL SDL</a>&nbsp;(schema definition language) having a pretty simple syntax for defining various components like types, queries, mutations etc. We’ll take a look at some examples later in this blog.</p>
<p id="50c9">A GraphQL schema is at the core of any GraphQL server implementation. It describes the functionality available to the client applications that connect to it. So having this schema file will serve as a key starting point for migrating your API to GraphQL. You can then easily generate server code, resolver signatures, etc. from it using various tools available out there.</p>
<h2 id="109f">Export GraphQL Schema Files with API Transformer</h2>
<p id="d41a" class="">Bring your API files and export them to GraphQL schema using&nbsp;<a href="https://www.apimatic.io/transformer">API Transformer</a>. All major input formats (e.g. OpenAPI, RAML, API Blueprint, etc.) are supported.</p>
<p id="5919">The following features of the schema are supported:</p>
<ul class="">
<li>Object types</li>
<li>Scalar and Enumeration types</li>
<li>Input types</li>
<li>Arguments</li>
<li>Queries</li>
<li>Mutations</li>
<li>Lists and Non-null fields</li>
</ul>
<p id="8a1e" class="">GraphQL itself does not impose any strict naming conventions other than a list of allowed characters mentioned in their&nbsp;<a href="https://graphql.github.io/graphql-spec/June2018/#sec-Names">spec</a>. However, keeping in mind some of the best practices highlighted for&nbsp;<a href="https://graphqlmastery.com/blog/graphql-best-practices-for-graphql-schema-design">GraphQL schema design</a>,&nbsp;<a href="https://blog.apollographql.com/designing-graphql-mutations-e09de826ed97">mutations</a>&nbsp;and&nbsp;<a href="https://graphqlmastery.com/blog/how-to-use-graphql-enum-type-and-its-best-practices">GraphQL enum types</a>, we follow some conventions to make the migration process for our users easier. These conventions aim to facilitate development and interoperability.</p>
<p id="2c5f"><strong>Conventions</strong></p>
<ul class="">
<li>The names of various components will obey the rules specified in the spec.</li>
<li>Object/Input and Enumeration type names will be&nbsp;<code>pascal</code>&nbsp;cased.</li>
<li>All field names will be&nbsp;<code>camel</code>&nbsp;cased.</li>
<li>Enumeration field names will be&nbsp;<code>upper</code>&nbsp;cased to represent their nature as constants.</li>
<li>HTTP verb will be prepended with query/mutation names to represent the action that will be performed upon calling it.</li>
</ul>
<h2 id="2593">For SOAP Users — Migrating to GraphQL</h2>
<p id="04e6" class="">With&nbsp; API Transformer, SOAP users can start migrating to GraphQL by obtaining a GraphQL schema file from their service WSDL file. This involves a conversion of all WSDL types to GraphQL schema types, operations to mutations and attributes to arguments. The example below illustrates this:</p>
<p id="7774" class="">WSDL example:</p>
<pre class=""><code class="language-xml">&lt;definitions name=&quot;HelloService&quot; targetNamespace=&quot;http://www.examples.com/wsdl/HelloService.wsdl&quot; xmlns=&quot;http://schemas.xmlsoap.org/wsdl/&quot; xmlns:soap=&quot;http://schemas.xmlsoap.org/wsdl/soap/&quot; xmlns:tns=&quot;http://www.examples.com/wsdl/HelloService.wsdl&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:s=&quot;http://www.examples.com/schema1&quot;&gt;
  &lt;types&gt;
      &lt;schema xmlns=&quot;http://www.w3.org/2001/XMLSchema&quot; targetNamespace=&quot;http://www.examples.com/schema1&quot; elementFormDefault=&quot;qualified&quot;&gt;
        &lt;element name=&quot;GreetingMessage&quot;&gt;
            &lt;complexType&gt;
                &lt;sequence&gt;
                    &lt;element name=&quot;senderName&quot; type=&quot;xsd:string&quot;/&gt;
                    &lt;element name=&quot;greeting&quot; type=&quot;xsd:string&quot;/&gt;
                &lt;/sequence&gt;                
            &lt;/complexType&gt;
        &lt;/element&gt;
      &lt;/schema&gt;
  &lt;/types&gt;
  &lt;message name=&quot;SendMessageRequest&quot;&gt;
      &lt;part name=&quot;message&quot; type=&quot;s:GreetingMessage&quot;/&gt;
  &lt;/message&gt;
  &lt;message name=&quot;SendMessageResponse&quot;&gt;
      &lt;part name=&quot;message&quot; type=&quot;s:GreetingMessage&quot;/&gt;
  &lt;/message&gt;
  &lt;portType name=&quot;Hello_PortType&quot;&gt;
      &lt;operation name=&quot;sendMessage&quot;&gt;
         &lt;input message=&quot;tns:SendMessageRequest&quot;/&gt;
         &lt;output message=&quot;tns:SendMessageResponse&quot;/&gt;
      &lt;/operation&gt;
  &lt;/portType&gt;
  &lt;binding name=&quot;Hello_Binding&quot; type=&quot;tns:Hello_PortType&quot;&gt;
      &lt;soap:binding style=&quot;rpc&quot;
         transport=&quot;http://schemas.xmlsoap.org/soap/http&quot;/&gt;
      &lt;operation name=&quot;sendMessage&quot;&gt;
         &lt;soap:operation soapAction=&quot;sendMessage&quot;/&gt;
         &lt;input&gt;
            &lt;soap:body encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;
               namespace=&quot;urn:examples:helloservice&quot;
               use=&quot;encoded&quot;/&gt;
         &lt;/input&gt;    
         &lt;output&gt;
            &lt;soap:body encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;
               namespace=&quot;urn:examples:helloservice&quot;
               use=&quot;encoded&quot;/&gt;
         &lt;/output&gt;
      &lt;/operation&gt;
   &lt;/binding&gt;
   &lt;service name=&quot;Hello_Service&quot;&gt;
      &lt;documentation&gt;WSDL File for HelloService&lt;/documentation&gt;
      &lt;port binding=&quot;tns:Hello_Binding&quot; name=&quot;Hello_Port&quot;&gt;
         &lt;soap:address location=&quot;http://www.examples.com/SayHello/&quot; /&gt;
      &lt;/port&gt;
   &lt;/service&gt;   
&lt;/definitions&gt;</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row" style="padding-top: 0px;">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="d1fc" class="">GraphQL schema obtained by converting above WSDL file using&nbsp; API Transformer:</p>
<pre class=""><code class="language-cs"># API Name: &quot;HelloService&quot;
# Host: http://www.examples.com/SayHello/
# WSDL File for HelloService

type GreetingMessage {
    senderName: String!
    greeting: String!
}

type SendMessageRequest {
    greetingMessage: GreetingMessage!
}

type SendMessageResponse {
    greetingMessage: GreetingMessage!
}

input GreetingMessageInput {
    senderName: String!
    greeting: String!
}

input SendMessageRequestInput {
    greetingMessage: GreetingMessageInput!
}

input CreateSendmessageInput {
    body: SendMessageRequestInput!
}

type Query {
    _: Boolean
}

type Mutation {
    createSendmessage(input: CreateSendmessageInput!): SendMessageResponse!
}

schema {
    mutation: Mutation
    query: Query
}</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="8674">For REST Users — Layering GraphQL on top</h2>
<p id="91f0" class="">Instead of completely migrating to GraphQL, users generally prefer to add a GraphQL layer on top of REST and enjoy benefits of both. The choice is yours depending on your service and system needs.</p>
<p id="841a" class="">You can convert your RESTful API defined in one of the popular formats like OpenAPI/Swagger, RAML, etc. to GraphQL schema with&nbsp; API Transformer. The conversion process will:</p>
<ul class="">
<li>Convert GET operations to GraphQL queries while other operations involving server-side changes to GraphQL mutations.</li>
<li>Convert complex types in the API to GraphQL object and enumeration types.</li>
<li>Wrap operation parameters in a GraphQL input type and link that input type to respective query/mutation arguments.</li>
</ul>
<p id="fce7">The example below shows the conversion:</p>
<p id="1f1d" class="">OpenAPI 3.0 example:</p>
<pre class=""><code class="language-yaml">openapi: 3.0.0
info:
  title: Calculator
  description: Simple Calculator API
  version: &#039;1.0&#039;
servers:
- url: https://examples.devapi.dream.press/apps/calculator  
paths:
  /{operation}:
    get:
      description: Calculates the expression based on the x and y operator
      operationId: Calculate
      parameters:
      - name: operation
        in: path
        required: true
        schema:
          $ref: &#039;#/components/schemas/OperationType&#039;
      - name: x
        in: query
        required: true
        schema:
          type: number
          format: double
      - name: y
        in: query
        required: true
        schema:
          type: number
          format: double
      responses:
        200:
          description: &#039;Returns the result of operation&#039;
          content:
            text/plain:
              schema:
                type: number
                format: double      
components:
  schemas:
    OperationType:
      enum:
      - SUM
      - SUBTRACT
      - MULTIPLY
      - DIVIDE
      type: string
      description: Possible operations are sum, subtract, multiply, divide</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="2920" class="">GraphQL schema obtained by converting above OpenAPI 3.0 file using&nbsp; API Transformer:</p>
<pre class=""><code class="language-cs"># API Name: &quot;Calculator&quot;
# Host: https://examples.devapi.dream.press/apps/calculator
# Simple Calculator API

&quot;Possible operations are sum, subtract, multiply, divide&quot;
enum OperationType {
    DIVIDE
    MULTIPLY
    SUBTRACT
    SUM
}

input GetCalculateInput {
    operation: OperationType!
    x: Float!
    y: Float!
}

type Query {
    &quot;Calculates the expression based on the x and y operator&quot;
    getCalculate(input: GetCalculateInput!): Float!
}

type Mutation {
    _: Boolean
}

schema {
    mutation: Mutation
    query: Query
}</code></pre>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:table -->
<figure class="wp-block-table"></figure>
<!-- /wp:table -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="5c1b">Conclusion</h2>
<p id="0841" class="">We hope you found our migration guide to GraphQL useful. If you have any feedback for our GraphQL schema export feature, feel free to reach out.</p>
<p id="28a8" class="">Continue reading more API Transformer Recipes:</p>
<ul class="">
<li><a href="https://apimatic.io/blog/2018/11/api-transformer-recipes-enabling-postmans-team-sharing-features-for-openapi-users" target="_blank" rel="noreferrer noopener">Enabling Postman’s Team Sharing Features for OpenAPI Users</a></li>
<li><a href="https://apimatic.io/blog/2018/12/api-transformer-recipes-facilitating-migration-from-soap-to-rest" target="_blank" rel="noreferrer noopener">Facilitating Migration from SOAP to REST</a></li>
<li><a href="https://apimatic.io/blog/2019/01/api-transformer-recipes-opening-ways-into-ibm-api-connect" target="_blank" rel="noreferrer noopener">Opening ways into IBM API Connect</a></li>
<li><a href="https://apimatic.io/blog/2020/06/the-whys-and-hows-of-exposing-a-soap-service-using-your-rest-api">The Whys and Hows of Exposing a SOAP Service Using Your REST API</a></li>
</ul>
<p class="">Thanks to&amp;nbsp;Adeel Ali.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/moving-to-graphql-from-soap-or-rest/">Moving to GraphQL from SOAP or REST</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/moving-to-graphql-from-soap-or-rest/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Popular Developer Experience Practices: FinTech and Banking APIs</title>
		<link>/blog/popular-developer-experience-practices-fintech-and-banking-apis/</link>
					<comments>/blog/popular-developer-experience-practices-fintech-and-banking-apis/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Tue, 09 Jul 2019 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[FinTech APIs]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Banking]]></category>
		<category><![CDATA[Fintech]]></category>
		<category><![CDATA[Open Banking]]></category>
		<category><![CDATA[Psd2]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=627</guid>

					<description><![CDATA[<p>FinTech Startups have leveraged upon the utility of Web APIs to dominate the financial services industry, and traditional financial institutes are following suit, executing strategies like the&#160; Open Banking&#160; initiative, to expose their services. When so many options are available, putting out an API is never enough, it’s essential to make sure developers can actually [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/popular-developer-experience-practices-fintech-and-banking-apis/">Popular Developer Experience Practices: FinTech and Banking APIs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="627" class="elementor elementor-627" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-68285476 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="68285476" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-31224221" data-id="31224221" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-44df238c elementor-widget elementor-widget-text-editor" data-id="44df238c" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="alignnone wp-image-628" src="/wp-content/uploads/2021/12/1_sBXfWZNYodHGMEjtg17YKQ-1024x512.jpg" alt="Popular Developer Experience Practices in FinTech and Banking APIs" width="1024" height="512"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="743e" class="">FinTech Startups have leveraged upon the utility of Web APIs to dominate the financial services industry, and traditional financial institutes are following suit, executing strategies like the&nbsp;<a href="https://www.investopedia.com/terms/o/open-banking.asp"> Open Banking&nbsp; </a>initiative, to expose their services.</p>
<p id="a8fb" class="">When so many options are available, putting out an API is never enough, it’s essential to make sure developers can actually make use of the API in an effective and efficient manner. And for this, we have analyzed some popular APIs from both the Open Banking and FinTech Space. We evaluated these APIs using our Developer Experience checklist as a reference, which has been endorsed by industry experts like Kin Lane, Adam Duvander and more</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="aligncenter wp-image-630" src="/wp-content/uploads/2021/12/1_Sd1gAl5zc8GjfcY3Mi4MCw-1.jpg" alt="" width="567" height="441"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b918">The list of APIs derived from multiple resources, including RapidAPI, GoMedic, etc. include:</p>
<ul class="">
<li><em>Barclays APIs</em></li>
<li><em>Nordea Bank</em></li>
<li><em>Citi APIs</em></li>
<li><em>Deutsche Bank</em></li>
<li><em>Stripe</em></li>
<li><em>Square</em></li>
<li><em>Visa</em></li>
<li><em>CoinAPI</em></li>
</ul>
<p id="afad">For the study, we analyzed, their publicly available resources, including their developer portals, product pages, and all underlying documentation and components.</p>
<p id="49a0">We have summarized our research in the form of a table to give you a quick overview of both Banking and FinTech APIs in terms of what they are offering.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-631 aligncenter" src="/wp-content/uploads/2021/12/1_buxsZK1nfOKAtciwSwysOg.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="6743">And then further discuss in depth and detail, how each of these vendors has gone about with individual components.</p>
<h2 id="1a0c" class="">1. Citibank</h2>
<p id="e44a" class=""><a href="https://sandbox.developerhub.citi.com/us/home">Citibank’s</a>&nbsp;API program comprises of 11 APIs in total, the documentation for all of which they have available on a single developer portal. Their developer portal which they call the “Developer Hub” comes with a beautiful Landing Page, which features their API Catalog, Getting Started Guides, Use Cases and Success Stories.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-632 aligncenter" src="/wp-content/uploads/2021/12/1_Z1wTN5ipavKTJKGh8kSbBw.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="46c1">This is followed by a brief preview of some sample API Calls and Responses, which they do rather intuitively.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-633 aligncenter" src="/wp-content/uploads/2021/12/1_JxdaUGEX-QsGevwEbgSxpA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b6a0">Landing pages are where consumers usually make their choice and it’s important you help them make it by selling a value proposition, and Citibank builds on that beautifully.</p>
<p id="5ecd">Signing Up is pretty easy, straightforward, and requires just a username and passwords, upon activation, you are allowed to generate your own API keys. Most of the portal is accessible without logging in, which is essential for a portal of any nature in this age.</p>
<p id="cc95" class="">The API Catalog page displays all their APIs in a very organized manner, classified according to function and location, they are easy to search and browse. Each API has an in detailed Overview Page, which explains what an API does and how does it do it. Since Citi Banks serves different markets, their pages and documentation is specifically curated for each region.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-634 aligncenter" src="/wp-content/uploads/2021/12/1_oNnGMYt60NKEZc09o5h4hw.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="5871" class="">Citi Bank’s API Playground lets you play around with their APIs in a really intuitive manner. It takes in your Client ID and Secret to generate an access token, following which you chose an app to make a sample call, with parameters you want to experiment with.</p>
<p id="72ee">The Documentation pages start with a short summary of what the API does, followed by authorization instructions. The endpoints are grouped according to function and can be accessed via sidebar navigation.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-635 aligncenter" src="/wp-content/uploads/2021/12/1_VAqtcC1IU74RrJ-vX7xmJw.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="bcbc">The endpoints for each group are first listed, and then explained in detail. The descriptions are accompanied by Code Samples in 8 languages. CitiBank adds a really interesting touch to how these samples are displayed by offering a light and dark mode and making them copy-paste ready. For each API call, they also list and explain the possible responses and error messages in cases applicable. They also give out a swagger specification for each API.</p>
<p id="41a9" class="">The FAQs section covers all topics from registration to security in detail and tries to answer as many questions as possible. The Sales and Support pages provide an email interface to request help from their teams.</p>
<p id="8de5">Their portal overall looks really neat and clean is simple to use and looks like it does belong from the CitiBank line of products.</p>
<h2 id="89c6">2. Deutsche Bank</h2>
<p id="8015" class=""><a href="https://developer.db.com/">Deutsche Bank&nbsp; </a>offers around 9 APIs, grouped by function and all cataloged on their Developer Portal, which in their navy blue and grey colors, looks beautiful. On the landing page of the portal, they communicate important announcements, updates, and features straight at the top, which is followed by a listing of their API Products.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-636 aligncenter" src="/wp-content/uploads/2021/12/1_U844WNNZStZlgZYom7PPoA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="05c5" class="">Deutsche then builds on trust by highlighting their advanced security protocols, since that’s a big concern for developers before working with any kind of financial gateway. Addressing potential interests as such, early on, can help you hook visitors even before they explore your code. Deutsche understands that and builds on it by exhibiting their beautiful API Explorer next.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-637 aligncenter" src="/wp-content/uploads/2021/12/1_8tGFG4yeRr7DwuoCuDuF5Q.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8840">Following that they present a customer story to explain a common use case, and then display the ideal user journey with the help of visuals. Deutsche makes use of visuals to explain workflows and inner workings of their APIs at various places.</p>
<p id="d679" class="">Their portal also features news and events channels, where they highlight latest releases, new features, publish their events and talk about new ideas. This sort of engagement plays a crucial role in connecting with the community, which they successfully do.</p>
<p id="ce02">Each API has a pretty rich Overview page, which talks about the features of an API, explains what it does, pricing plans, and then links to the API Explorer so developers can get to experiment with it straight away.</p>
<p id="af18">Getting started guides are really thorough and explain how to register an account and apply for authorization keys. Reference Docs are beautiful, with endpoints for each API grouped together and each endpoint with every parameter is explained in detail.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-638 aligncenter" src="/wp-content/uploads/2021/12/1_eW6RhLBKzYUHyWWTu_fJ-A.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="2553">The interactive API explorer allows to make sample calls straight away and displays potential responses according to the type of call made.</p>
<p id="7730">Deutsche goes an extra mile with support and allows users to request features, contact them for general inquiries, seek troubleshooting support, or report bugs all from the same page. The FAQs page pretty much explain everything and serve as an excellent self-servicing support option.</p>
<p id="aaec">We love the slick UI, and the use of visuals that Deutsche makes, everything is pretty easy to understand, although they lack a few basic components, that could have elevated their developer experience even further.</p>
<h2 id="7821">3.&nbsp; Nordea Open Banking</h2>
<p id="3238" class=""><a href="https://developer.nordeaopenbanking.com/app/">Nordea Bank</a>&nbsp;offers one of the best onboarding techniques we have seen in any portal across any industry, they take users across the entire journey from registering, setting up an app, to generating API keys and everything, with beautiful visuals and step by step content.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-639 aligncenter" src="/wp-content/uploads/2021/12/1_fvgKszBdWB74IMHiel2mfA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="0e2d" class="">With that, they also offer training videos for multiple scenarios, Swagger and Postman collections for all APIs and sample code, which can be accessed on their GitHub.</p>
<p id="1477">The Landing Page is beautiful and builds upon the value the bank delivers via their APIs, we loved how they have testimonials as social proof and then evangelize the open banking industry as a whole with articles and blogs straight on the Landing Page.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-640 aligncenter" src="/wp-content/uploads/2021/12/1_04n0Xe9uX_aBFB65UHvxgQ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="1d3d">Nordea also deals with multiple APIs, each with an Overview Page, that helps customers understand what they can achieve with it, Nordea uses visuals to explain how their APIs work. To build up trust further, they have their API roadmaps up, so evaluating developers can foresee what the future would look like, helping them make a solid well-informed decision.</p>
<p id="381f" class="">Documentation for APIs starts with Change Logs and Version release notes. We believe that is a really important practice, early on educating users, what preliminary actions they have to take before going on with implementation are really important. We love how they set out the context, and answer any sort of considerations such as security concerns, terminology, rate limiting and all other queries a user may have before they actually get to documentation.</p>
<p id="7c35">The Reference docs are beautiful, come with a detailed description of parameters, sample call request, and responses and an API Console where those calls can be tried out and tested.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-641 aligncenter" src="/wp-content/uploads/2021/12/1_UUS5QtbansjtDK7MWt-nTw.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="9fa3" class="">The endpoints are listed on the sidebar, from where they are easily navigable. Nordea gives out OpenAPI spec for each API and recommend to generate client libraries on Swagger CodeGen but do not have that listed as an offering anywhere on their portal, and have a few languages agnostic code samples listed on their GitHub.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-642 aligncenter" src="/wp-content/uploads/2021/12/1_mVoY-OQjtIvfZCVWBb5yRQ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="5f7c">The support section once again does a great job, covers up pretty much everything with FAQs and provides an option to seek help by raising tickets or discussing issues with the community.</p>
<h2 id="eff2" class="">4. Barclays’s API</h2>
<p id="ed81" class=""><a href="https://developer.barclays.com/">Barclay’s API&nbsp; </a>program is one of the largest in the industry, with over 12 well-maintained APIs and more in experimental phases, they have made sure they deliver a great developer experience.</p>
<p id="c59d" class="">Their developer portal is the face of their API program and they have managed the entire project beautifully.</p>
<p id="57ac" class="">On the Landing Page, they send out a very bold message about their mission, and with that list their APIs, customer stories, use cases and talk about open banking overall. Building upon the value of their offering is something that all API providers have done in this space and we cannot stress how important that is considering the competition in this fast-paced industry.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-643 aligncenter" src="/wp-content/uploads/2021/12/1_rVKQVWYGDJVClxHLGuyOBw.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="65e8" class="">The next most important thing on a portal is an API Overview Page and Barclay’s does a wonderful job, making use of video content to explain the offering. They highlight all key features and benefits and explain what customers would need to get started.</p>
<p id="ad0f">Registering an account is standard practice and takes no longer than a minute, getting started guides are in fair detail and depth as well, covering everything from key features, version history, to prerequisites.</p>
<p id="35f8">The Reference Docs do a fair job in explaining what an endpoint does and comes with code samples in some cases. Barclay’s also gives out an API Specification in RAML format for their APIs, so that you can make use of complementary tooling and take maximum advantage out of it.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-644 aligncenter" src="/wp-content/uploads/2021/12/1_hAKD7gXoFC516OVW1bLg4Q.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="470f" class="">The FAQs section which they call their knowledge Base does a decent job explaining the ins and outs of the program on top of which they have to get in touch option, so consumers can approach them at any given time.</p>
<h2 id="4fc7">5.&nbsp; Square</h2>
<p id="c05e"><a href="https://squareup.com/us/en/developers">Square</a>&nbsp;is one of the leading payment processing companies in the US, and they made that possible, with easy to integrate services and great developer experience. With an API first model, they have enabled both hardware and software to seamlessly integrate and provide a butter smooth experience.</p>
<p id="9192" class="">To make their APIs easy to consume, they tick almost all major things on the developer checklist. Their developer portal looks great, is easy to navigate, and makes use of visuals for explanations where necessary.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-645 aligncenter" src="/wp-content/uploads/2021/12/1_jp1Bs05rOfDwpyyX7p96jA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e657" class="">The Landing Page highlights all major features, benefits, pricing plans, customer stories, sample apps and support channels that a visitor may require to begin with.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-646 aligncenter" src="/wp-content/uploads/2021/12/1_ZRb7WbHCLFasEkBavOAI9w.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="2a40">The Documentation Page begins with a step by step guide on how to get started on their platform, registering an account, generating authorization keys and handling errors, etc. Square strongly believes that developers get help implementing their APIs in languages they are comfortable with and hence give out multiple SDKs in multiple platforms, which they proudly present on their portal before everything. This is followed by a few sample applications where developers can take inspiration from. They then list out their APIs, each API has an Overview Page, where they talk about how to use it, work with it, prerequisites and pricing.</p>
<p id="829c">The Reference Docs which they call, Technical References, are put out in a three — column architecture, the in-app postman button allows testing out Sample Requests and views their responses.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-647 aligncenter" src="/wp-content/uploads/2021/12/1_jLci1f78TTheTq3QgqXbbA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="ca97">The docs are really well done and coupled together with SDKs, make it very easy to integrate their services into any system, no matter what the platform. A reason that many modern companies chose to go with services as such, saving implementation time and cost at their end.</p>
<p id="d7e9">Square has a developer blog, newsletter, a dedicated slack channel and an email widget built into their portal, so any developer can reach out to them anytime.</p>
<h2 id="4ffd" class="">6.&nbsp; Stripe</h2>
<p id="1332"><a href="https://stripe.com/">Stripe</a>&nbsp;offers one of the best if not the absolute best developer experience, not only in the FinTech space but in the entire API industry. They offer everything that makes API consumption easy and hence comes as no surprise that they are one of the most popular payment processing platforms today.</p>
<p id="5bd6" class="">Stripe deal in several APIs, and on their landing page catalog them in a way which makes it really easy for developers to figure out what they need. Developers can check out these APIs straight away on their try it out section which comes straight after. This is followed by development guides and other tips which may help developers jump-start their platforms.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-648 aligncenter" src="/wp-content/uploads/2021/12/1_qNBkJK3isl3rHINeDli3gQ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="af6e" class="">Where Stripe wins is that they on-board non-developer decision makers as well, and have a comprehensive guide explaining their offering in a non-technical way and not only that, they have pre-built plug-ins and extensions which can be configured to trigger their APIs, allowing non-developer users take advantage of what they have to offer.</p>
<p id="bc42">Each API has an Overview Page which thoroughly explains what consumers can achieve from that API. Stripe goes an extra mile and helps users implement APIs in a number of ways, including pre-built UI components for both Web and Mobile, along with SDKs in multiple platforms. The guides section is full of code samples and instructions for each kind of implementation, including the necessary CSS or styling files that go with it.</p>
<p id="69be">The Getting Started Guides are platform specific, so users have no trouble setting up their environments or IDEs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-649 aligncenter" src="/wp-content/uploads/2021/12/1_xUDhmY2weHITfL_Ti1-XIQ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="30d5">They make use of visuals where they can to explain workflows and journeys, which they present in a very engaging manner.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-650 aligncenter" src="/wp-content/uploads/2021/12/1_ZMPqddEakPYNg8l2urEsDA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="97ed">The Reference Docs give a really clean look and very easy to go through, there’ s no clutter or confusion, each endpoint in explained in detail, and come with Code samples in multiple languages including Ruby, Python, PHP, Java, Node, .NET and GO.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-651 aligncenter" src="/wp-content/uploads/2021/12/1_meK6rJlTjqgS2VbtsfHHSA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="f2c0">They have forums and discussion boards where developers can engage with the community anytime to solve their queries, on top of which representatives from Stripe are always on the look around to guide anyone in need. Alternatively, their team can also be reached out via email, chat or phone. With their Developer digest, they effectively communicate any changes and updates to their users, which is an opt-in service, with the widget available on the landing page.</p>
<p id="0f93" class="">We love how they have made their platform accessible to global communities and render all of their documentation it in around 7 languages, earning them bonus accessibility points.</p>
<p id="9e64">Stripe completes everything that is on our Developer Experience checklist and it should come as no surprise that it is the number 1 choice for so many businesses when it comes to payment processing.</p>
<h2 id="e101">7. Visa</h2>
<p id="baf5"><a href="https://developer.visa.com/">Visa</a>&nbsp;is one of the largest payment networks across the world, that facilitates millions of electronic transactions per minute. The service is made available to vendors and businesses through a number of APIs and plug-ins.</p>
<p id="7286">Visa’s Developer Center is one of the most beautiful Developer Experience platforms we have seen, it encompasses all their values, branding and visuals to deliver a delightful experience. On the Landing Page, straight on the top, they have a scroll where they advertise their devrel events, ask for feedback and present their tutorials.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-652 aligncenter" src="/wp-content/uploads/2021/12/1_-afTH4rlFSJLIFTLeoQBsQ.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="fa88" class="">After that, they list their API catalog, which can be further browsed in detail, along with that they mention multiple use cases over various verticals and industries. We love how they present their Customer Stories, which they do in the form of videos, which are engaging and beautiful captivate the attention of landing visitors.</p>
<p id="08c1">On the catalog page, the APIs are grouped together according to function and can be browsed using filters on the left. Each API has an in detail Overview Page, which explains what the API is for, who can use it, how are they supposed to priced and their regional availability.</p>
<p id="3183">They make use of visuals were required to explain key features, workflows and supporting APIs.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-653 aligncenter" src="/wp-content/uploads/2021/12/1_3vqm1iafbyh-I10K_AjCjA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="8c7e">The Getting Started Guides are really through and explains step by step how to make use of APIs, the reference docs are presented in a three column architecture, with sample calls and responses, that can be tried out on their interactive API Explorer.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-654 aligncenter" src="/wp-content/uploads/2021/12/1_qtfBVr8xMyG9LcKRT1a-Gg.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="cea7" class="">Where we found Visa to be leading, is how they communicate with users, all types of messaging are really rich, vibrant and deliver their point across in a beautiful manner.</p>
<p id="2b21">They have separate pages for Release Notes, Glossary, Support where they have FAQs, a whole About Us page where they explain why to use any of Visa APIs at all and a Contact Us page which directs you to an email widget.</p>
<p id="8fac">On top of that, they have a Developer blog, where they keep posting the latest news, updates and tips about their services, and a community page where users can come discuss and solve each other’s problems.</p>
<p id="4b10" class="">Developer Experience is more than just Docs and Visa treating their APIs like products truly proves that, no wonder they are where they stand today.</p>
<h2 id="1678"><strong>8. CoinAPI</strong></h2>
<p id="2b30" class="">CoinAPI is a unique cryptocurrency API that combines data from all virtual currency exchanges and makes it available through a single platform. The API provides incredible utility to cryptocurrency traders and has become a huge hit in the space. What has made the API so successful is the ease when it comes to consuming it. Through their documentation practices, they have made it really easy to work with the many endpoints and terabytes of data they have to offer.</p>
<p id="987e">When you land on their site, you are taken straight away to the product pages which are beautifully done.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-655 aligncenter" src="/wp-content/uploads/2021/12/1_n-cQwQ7AAzORIaWaZAy7ew.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="19c4">The pages cover everything, from the exceptional value the API provides, to the social proof, uses cases and how client libraries are available in multiple languages.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-656 aligncenter" src="/wp-content/uploads/2021/12/1_gXfChIGczKqlDoaWQUSi2g.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="893d" class="">The documentation site is done in the same branding and looks striking in their navy blue. The landing page for the documentation site gives a thorough explanation of their API programs, which is divided into three distinct protocols, REST, WebSocket and FIX. This ensures they keep developers across all boards happy since REST is a popular API format overall and other two popular in the finance space.</p>
<p id="278d">After that, they talk about the SDKs which the offer in 15 languages. For them the SDKs are an integral part of their offerings, hence are well tested and well maintained and they encourage the use of it, while also accepting suggestions to their main repository from the community.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-657 aligncenter" src="/wp-content/uploads/2021/12/1_52_Xw6Ldw9JIRTNiPhBB1w.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b77f">This is followed by security protocols, and the standards and conventions the APIs follow.</p>
<p id="bda5">CoinAPI does a wonderful job educating users, on how and where to get started with their APIs, before they nosedive into development and we give them full points for that. All three APIs have a short overview which explains how to work with that particular format, along with necessary details such as authorization, request limits, etc.</p>
<p id="a921">The Reference Docs are presented in a really neat manner, have nicely done descriptions, and come with code samples in 9 languages. We love the way they do their warnings, disclaimers, and tips, making them extremely legible.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-658 aligncenter" src="/wp-content/uploads/2021/12/1_EUHWgbjJSOmdgnoGLKdevA-1024x343.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="0e8b">They have a dedicated page for support, where they have separate tabs for FAQs, Security &amp; Privacy, Announcements, Billing and Subscriptions, answering every potential query a user might run across. CoinAPI gets full marks for communication as well, the support page is easy to navigate, has a search function and serves as an effective communication channel between them and consuming developers.</p>
<p id="a8dd">Coming from an industry that is still emerging, it’s impressive how they check most of the things from the Developer Experience checklist. And their wide adoption should come as no surprise.</p>
<p id="c17a">Summarizing the research we found out, although most of these APIs offer a number of components from the Developer Experience checklist, it’s FinTech APIs that has taken the lead by offering SDKs and investing more in thier documentation practises. A developer coming in for a payment solution is more likely going to choose an API, which has an implementation available in a language they are comfortable with and is more convenient to use, hence no wonder Stripe and Square are global leaders today.</p>
<p id="889f" class="">If you are in the Finance industry, you too can offer an amazing developer experience for your API, and without putting in the hard work, time or dedicating resources. We can help you get started with your developer experience program from the Landing Pages, to Docs, Code Samples, SDKs, and everything.&nbsp;</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/popular-developer-experience-practices-fintech-and-banking-apis/">Popular Developer Experience Practices: FinTech and Banking APIs</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/popular-developer-experience-practices-fintech-and-banking-apis/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>State of Developer Experience: Banking and FinTech 2019</title>
		<link>/blog/state-of-developer-experience-banking-and-fintech-2019/</link>
					<comments>/blog/state-of-developer-experience-banking-and-fintech-2019/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Tue, 09 Jul 2019 11:02:52 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[FinTech APIs]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Banking]]></category>
		<category><![CDATA[Fintech]]></category>
		<category><![CDATA[Software Development]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=660</guid>

					<description><![CDATA[<p>The Banking and Finance industry is one of the most heavily regulated sectors of the world. The regulations, although important to protect the integrity of the system and customer interest, come at the cost of hindered advancement and such had been the case for the industry. This was until the rise of FinTech companies, who [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/state-of-developer-experience-banking-and-fintech-2019/">State of Developer Experience: Banking and FinTech 2019</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="660" class="elementor elementor-660" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-34f857ff elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="34f857ff" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-4aea8260" data-id="4aea8260" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4a141574 elementor-widget elementor-widget-text-editor" data-id="4a141574" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-661 aligncenter" src="/wp-content/uploads/2021/12/1_AwRHHaXNeo1O2pu7hQz8ag-1024x512.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="d6ac" class="">The Banking and Finance industry is one of the most heavily regulated sectors of the world. The regulations, although important to protect the integrity of the system and customer interest, come at the cost of hindered advancement and such had been the case for the industry.</p>
<p id="db59" class="">This was until the rise of FinTech companies, who leveraged APIs as gateways to expose traditional financial services so that third-party developers could build custom solutions on top of them. There’s a lot you can achieve with FinTech APIs, without having to go through the labor of manually implementing any functionality.</p>
<blockquote class="wp-block-quote">
<p>A simple query on&nbsp;<a href="https://www.programmableweb.com/search/financial"> ProgrammableWeb</a>shows there are&nbsp;<em>1956</em>&nbsp;APIs listed under the tag of Financial APIs, with around&nbsp;<em>290</em>&nbsp;listed this very year.</p>
</blockquote>
<p id="e432" class="">FinTech APIs are putting immense pressure on Traditional Banking and Financial Organisations, who are actively trying to catch up. Customers today expect advanced, frictionless experiences and banks with traditional business models are failing to provide them.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-662 aligncenter" src="/wp-content/uploads/2021/12/1_o6g31nFwrWSkx9twG7rzOw.jpg" alt=""></p>
<figcaption>A stat from EY’s FinTech Adoption Index shows that globally, 64% of “Digitally active consumers” are using FinTech applications in favor of traditional banking ones.</figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="d65f" class="">When <a href="https://assets.ey.com/content/dam/ey-sites/ey-com/en_gl/topics/banking-and-capital-markets/ey-global-fintech-adoption-index.pdf">Ernst and Young&nbsp; </a>conducted their first study on FinTech adoption in 2015, they found adoption rates for FinTech as low as 10% amongst the consumers they surveyed. The number rose to 33% in 2017 and now stands at 64%. More and more individuals especially millennials, are shying away from traditional banking and instead are inclined more towards digital solutions put out by these FinTech companies.</p>
<p id="4c55" class="">It’s clearly time for banks to explore newer business models and to expose data and functionality in a similar fashion, acting as the infrastructure or platform on which financial services of the future are built. Else tech giants or startups in the space will ultimately wipe them over.</p>
<h2 id="d558" class="">Open Banking and Europe’s PSD2</h2>
<p id="9911" class="">In 2015 the European Parliament adopted new legislation, Payment Services Directive 2 better known as <a href="https://www.ecb.europa.eu/paym/intro/mip-online/2018/html/1803_revisedpsd.en.html">PSD2</a>, to streamline the digitalisation of banks and financial services. The directive obligates banks across Europe to make banking data and services available to third-party developers, so they can build value-added services on top of them.</p>
<p id="dca9">The concept of Open Banking, on the other hand, has been around for much longer and it suggests that banks provide access to user data via Open APIs, so that they can partner with external entities to improve customer experience.</p>
<p id="0b6b" class="">The Open Banking Initiative is powering PSD2 today, for which deadlines are running out and banks are putting out APIs on a daily basis. The directive has provided Banks with an excellent opportunity to make their mark, tight deadlines have forced banks to work faster on API preparation, resulting in 529 Banking APIs publicly listed as of today.</p>
<p id="4a24">Banks, because of the initiative, and the legislation are on their way to make a comeback, but is just putting out an API enough?</p>
<h2 id="33c8" class="">Developer Experience Makes APIs Useable</h2>
<p id="5ca8" class="">Developers today have a wide array of choices. A number of Banking and Finance APIs today provide the same utility and services, some implementing them in a different manner, some adopting different technology stacks, but what truly sets these APIs apart is the ease when it comes to consumption.</p>
<p id="07ff" class="">Developers want to get started as soon as possible, spend as little time getting acquainted with the API, and focus more on building creative solutions on top of them. In order for an API to be widely adopted, it must have a great developer experience.</p>
<p id="0ba7" class="">Since Developer Experience is a huge deciding factor when it comes to adopting an API, we sat down and shortlisted 8 popular Banking and Finance APIs and analysed what they have to offer in terms of Developer Experience, and what makes them popular choices amongst developers.</p>
<p id="6fa9" class="">Using the famous Developer Experience checklist as criteria and point of reference, we noticed some common trends and practices, which are objectively summarised in the table below:</p>
<blockquote class="wp-block-quote">
<p>Read in detail what forms the Developer Experience Checklist for APIs: <a href="https://blog.apimatic.io/what-exactly-is-developer-experience-1646b813df14">What exactly is Developer Experience?</a></p>
</blockquote>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-663" src="/wp-content/uploads/2021/12/1_buxsZK1nfOKAtciwSwysOg-1.jpg" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="19ca" class="">Quickly skimming through the table you would notice that most of these APIs offer a number of components from the Developer Experience checklist, and hence comes as no surprise why they are doing so well. One area we saw FinTech APIs lead, was with offering API implementations in multiple languages, in the form of SDKs, so developers can instantly start making use of these APIs in languages they are comfortable with.</p>
<p id="91fc" class="">We further ran a detailed analysis to find out how these APIs have gone about with their Developer Experience and what sets them apart from each other and remaining of the competition, which you can go through here:&nbsp;<a href="https://blog.apimatic.io/popular-developer-experience-practices-fintech-and-banking-apis-a5474fe535e4"> Popular Developer Experience Practices: FinTech and Banking APIs.</a></p>
<h3 id="8e19"><strong>PSD2 is an Opportunity for Digital Transformation</strong></h3>
<p id="2287" class="">FinTech APIs have built popularity, cashing on the exemplary experiences they provide, both to developers and customers, and Banking APIs that have followed suit have done well. But this is not the case for every bank out there. PSD2, although very explicitly requires banks to open up data and banking functionalities, it does not specify how banks are supposed to meet these requirements, with many just checking them off with bare minimum implementations.</p>
<p id="8b13" class="">Banks that are looking to just adhere to regulatory requirements and not do more, may miss out on big opportunities to expand and grow new business models, and may not be able to put themselves on the map with FinTech APIs.</p>
<blockquote class="wp-block-quote">
<p>According to a survey, only 59% of Europe’s 442 banks met PSD2’s 14th March deadline, to have a publicly available testing facility or a sandbox environment .</p>
</blockquote>
<p id="a963">Of course, it is easier said than done and many banks are still struggling to prepare their APIs, with most of them slacking behind. In order to fulfill legal requirements, the API experience gets second fiddle. While understandable, it leads to a missed opportunity nonetheless</p>
<p id="adf4" class="">With the final 29th September deadline looming ahead, a number of Banking APIs are going to hit the markets, and only the ones that come with a developer experience will catch all the buzz, leaving the rest trailing on traction.</p>
<h2 id="32b5" class="">Automation is the Key to Scaling Developer Experience</h2>
<p id="0227" class="">So where does this leave API teams today who are still working on their API and have no time or resources to work on the consumption part of it?</p>
<p id="8a9a" class="">And the answer lies in&nbsp;<strong>Automation</strong>.</p>
<p id="833d" class="">With all hands busy on deck working on the core functionality of APIs, there is no reason that resources have to be dedicated to just work on producing the artifacts that make APIs easier to consume. Instead, let the machines do the working for you!</p>
<p id="3749">A lot can be done with an API Specification today. The document, when passed through CodeGen engines, can drive entire Developer Experience(DX) for APIs with automatic generation of DX components. And not just Documentation or Portals, but also complex components like SDKs, Code Samples, API Explorers and can even CI/CD pipelines so none of this has to be updated manually.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<figure id="attachment_664" aria-describedby="caption-attachment-664" style="width: 800px" class="wp-caption aligncenter"><img class="wp-image-664" src="/wp-content/uploads/2021/12/1_ZE_9hIZFJCH8to2mVeNeig.gif" alt="Generate DX Components with just an API Specification" width="800" height="450"><figcaption id="caption-attachment-664" class="wp-caption-text">Generate DX Components with just an API Specification</figcaption></figure>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="0f4d" class="">Get Started ASAP</h2>
<p id="5df6" class="">Where are you with Developer Experience for your APIs? Pushing for that 29th September Deadline and have no idea where to get started? Don’t worry about it.</p>
<p id="a7bb">Luckily for you, here at APIMatic, this is our specialty. We hold the necessary skills and expertise to help you set up an automated Developer Experience solution, and with our in-house technology, can get you running within weeks!</p>
<p id="f9ff" class="">You can always&nbsp;<a href="https://apimatic.io/contact">reach out to our team</a>&nbsp;to discuss Developer Experience and we’ll help you find an easy way out that fits your need. There’s no reason you have to stay behind and not compete with the top Banking and FinTech APIs of today.&nbsp;<a href="https://apimatic.io/account/register"> Get started&nbsp; </a>as soon as you can!</p>
<p class="">Thanks to&nbsp;Adam DuVander.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/state-of-developer-experience-banking-and-fintech-2019/">State of Developer Experience: Banking and FinTech 2019</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/state-of-developer-experience-banking-and-fintech-2019/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>API Transformer Insights 2018</title>
		<link>/blog/api-transformer-insights-2018/</link>
					<comments>/blog/api-transformer-insights-2018/#respond</comments>
		
		<dc:creator><![CDATA[Faria Rehman]]></dc:creator>
		<pubDate>Fri, 05 Apr 2019 10:53:46 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[2018]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[Trends]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=669</guid>

					<description><![CDATA[<p>Time sure flies and here we are — once again ready to analyze&#160;API Transformer&#160;over the course of one more year. We did a similar analysis back in 2017 as well. If you are interested, do check it out&#160;here. Interestingly, API Transformer’s usage appears to be doubling every year as can be seen from the figure [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/api-transformer-insights-2018/">API Transformer Insights 2018</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="669" class="elementor elementor-669" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-4f6c7104 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="4f6c7104" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-6bc3f95e" data-id="6bc3f95e" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-52e7b5e8 elementor-widget elementor-widget-text-editor" data-id="52e7b5e8" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-670 aligncenter" src="/wp-content/uploads/2021/12/1_-QjVR5w3yJnZrRwvS2QHzg-1024x469.png" alt="API Transformer Insights 2018" width="1024" height="469"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row" style="padding-bottom: 0px;">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class="">Time sure flies and here we are — once again ready to analyze&nbsp;<a href="https://www.apimatic.io/transformer">API Transformer</a>&nbsp;over the course of one more year. We did a similar analysis back in 2017 as well. If you are interested, do check it out&nbsp;<a href="https://apimatic.io/blog/2018/04/a-year-with-api-transformer">here</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-671 aligncenter" src="/wp-content/uploads/2021/12/1_bnA_aAeKqhAC1lSj6RRwvg.png" alt=""></p>
<figcaption><em>API Transformer conversions over the past 3 years</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="1f91">Interestingly, API Transformer’s usage appears to be doubling every year as can be seen from the figure above. 2018 has seen an all-time high — 217,388 transformations in total.</p>
<p id="0d35" class="">So why are so many people using&nbsp; API Transformer? What in fact is&nbsp; API Transformer?</p>
<p id="66d8" class="">Today, with an ever increasing number of APIs, more and more developers are recognizing the need to have machine-readable descriptions alongside these APIs. Some of these descriptions are maintained and exposed by the API providers themselves while others are created and maintained by third-party contributors. Format preferences tends to vary due to which a major issue with these descriptions is their heterogeneity. Given that each format has limitations of its own and a different set of tools and frameworks associated with it, anybody looking to utilize a description to its maximum capacity will feel the need to transform between available formats based on their requirements. This is where <strong>API Transformer</strong> comes in. It breaks all format barriers by enabling users to convert an API description easily into any format of their choice. It supports all popular formats e.g. OpenAPI (previously known as Swagger), RAML, API Blueprint, WSDL etc. which is what makes it an ideal tool for many.</p>
<h2 id="e028"><strong>What was new in 2018?</strong></h2>
<p id="00d8" class="">As promised at the end of 2017, we finally&nbsp;<a href="https://docs.apimatic.io/changelog/announcing-support-for-insomnia-export-format/">introduced support for Insomnia</a>&nbsp;in December, 2018.</p>
<p id="cbc3" class="">In addition to this, <a href="https://docs.apimatic.io/changelog/long-awaited-major-transformer-improvements/">many improvements were added to API Transformer</a>&nbsp;with focus on three key aspects: stability, consistency and accuracy.</p>
<h2 id="7bc6"><strong>Total vs Unique</strong></h2>
<p id="fe81">For each aspect of API Transformer that we analyze below, calculations are performed over two kinds of data which are:</p>
<p id="6c85"><strong>Total &#8211;</strong>&nbsp;This data takes into account all events that occurred irrespective of the users performing these events.</p>
<p id="028d" class=""><strong>Unique &#8211;</strong>&nbsp;This data only considers unique events per user. This helps eliminate the skewness that arises in the previous case because of users who performed thousands of conversions every month.</p>
<h2 id="3d62"><strong>Which formats developers brought most as input?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-672 aligncenter" src="/wp-content/uploads/2021/12/1_5Ueg0Ii4RZuXXdi6w_Z2jg-1024x492.png" alt=""></p>
<figcaption><em>Total vs Unique Analysis of Most Common Formats Imported</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3><strong>Total</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-673" src="/wp-content/uploads/2021/12/1_ZWZnG-k1GeN-BO4HG4BWFA.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p class="">Out of the total imported files on Transformer (approximately 217,388), 55% were Postman files (versions 1.0, 2.0 and 2.1) while 35% were OpenAPI files (versions 1.x, 2.0 and 3.0). The rest fell under much smaller chunks. Unlike 2017, it can be seen that OpenAPI v.3.0 usage finally rose above v.2.0: 56% of the OpenAPI transformations belonged to v.3.0, 33% to v.2.0 and 11% to v.1.x.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3><strong>Unique</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-674" src="/wp-content/uploads/2021/12/1_jPKfFx0zj19XLt1vIG_JUw.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p id="c523" class="">The second graph considers only unique formats per user e.g. if a user converted 50 Postman and 10 OpenAPI files, he converted two unique format files (one Postman and one OpenAPI).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="6d55" class="">The unique data shows that 38% of the imported files were OpenAPI files (all versions included) while 31% of the imported files were Postman files (all versions included). Around 9% of the users brought in WSDL files.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="fc00"><strong>Overall</strong></h3>
<p id="2869" class="">As can be seen from above, much like 2017, the two formats that stood out as the most imported formats on API Transformer in 2018 were still&nbsp;<strong>OpenAPI</strong>&nbsp;and&nbsp;<strong>Postman</strong>.</p>
<strong>Which formats developers most converted to?</strong></div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-675 aligncenter" src="/wp-content/uploads/2021/12/1_im1ngI_IhCmlPmLv9wzzog.png" alt=""></p>
<figcaption><em>Total vs Unique Anaylsis of Most Common Formats Exported</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3><strong>Total</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-676" src="/wp-content/uploads/2021/12/1_3LZR__Z-XObf7mUJv9A1ww.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p>43% of the conversions were to OpenAPI (versions 1.2, 2.0, 3.0). API Blueprint and Postman (versions 1.0, 2.0) were the next two major exported formats. They both appeared to be in a neck to neck race each sharing 25% of the complete chunk.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3><strong>Unique</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-677" src="/wp-content/uploads/2021/12/1_47E-GMFbXiPuYkgK5w7ETw.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p id="c746">Eliminating multiple exports to the same format per user, we observed that 72% of the files were exported to OpenAPI (versions 1.2, 2.0, 3.0). 77% of this OpenAPI chunk consisted of v.2.0 files. This shows that although v.3.0 was a popular input format, much of the developers used API Transformer to export v.2.0 files instead of v.3.0.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p id="3aba">Apart from OpenAPI, 8% files were exported to RAML (versions 0.8, 1.0) and 7% to Postman (versions 1.0, 2.0).</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="5b90"><strong>Overall</strong></h3>
<p id="c393" class="">Like 2017,&nbsp;<strong>OpenAPI v.2.0</strong>&nbsp;was again found to be the most popular exported format in 2018. This comes as no suprise since it is the most stable version of OpenAPI, being used for many years now. It boasts strong community support and a wide range of tools and frameworks. The adoption rate for its latest version v.3.0 is still relatively slower. However, it can be expected to rise with the passing time as more and more tools start supporting it.</p>
<p id="8e01"><strong>Postman v.2.0</strong>&nbsp;was another major exported format which is largely popular with users aiming to test or document their APIs. Very few users prefer to export to WADL or WSDL because of limited usage and tooling.</p>
<h2 id="6fbd" class=""><strong>What were the top 10 conversions?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-678 aligncenter" src="/wp-content/uploads/2021/12/1_hGfH3Ac2UQ2vjnXXBWmjzw-1024x437.png" alt=""></p>
<figcaption>Total vs Unique Analysis of Top Ten Format Conversions</figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b00a" class="">Here we analyze the import-export relationship in conversions and identify the top ten pairs for each kind of data.</p>
<h3 id="d400" class=""><strong>Total</strong></h3>
<p id="c73a">For the total conversions performed, the most common conversion seen was from&nbsp;<strong><em>Postman v.1.0 to API Blueprint</em></strong>&nbsp;(approx 51,526 conversions).</p>
<h3 id="111a"><strong>Unique</strong></h3>
<p id="808d">By eliminating non-unique mappings per user, import from&nbsp;<strong><em>Postman 2.X to OpenAPI 2.0</em></strong>&nbsp;was found to be the most common (approx 3,751 conversions).</p>
<h3 id="5cca"><strong>Overall</strong></h3>
<p id="fac5">Based on above data it can be seen that, much like 2017, developers still preferred Transformer for converting&nbsp;<strong>from Postman to other API description formats</strong>.</p>
<h2 id="afc5"><strong>Where were the developers performing conversions geographically based?</strong></h2>
<p id="7e66">In this section, we aim to analyze the geographical usage of API Transformer.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-679" src="/wp-content/uploads/2021/12/1_lG74YLk8JylPB3JlVLMwYw-1024x474.png" alt=""></p>
<figcaption><em>Total vs Unique Analysis of Geographical Usage of Formats</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="ad28"><strong>Total</strong></h3>
<p id="85e6">A large number of conversions were performed from India (36%), US (28%) and UK (5%) while the rest of the conversions were distributed across other parts of the world.</p>
<h3 id="802c"><strong>Unique</strong></h3>
<p id="6969">Ignoring multiple conversions from the same location per user, the results we got showed that 22% of the conversions were performed from US, 11% from India while 6% were from UK.</p>
<h3 id="d0e7"><strong>Overall</strong></h3>
<p id="6591">As can be clearly seen, majority of our users using Transformer in 2018 were based in&nbsp;<strong>US, India and UK.&nbsp;</strong>Note that for these graphs we eliminated data of conversions in which the locations were unknown.</p>
<h2 id="c109" class=""><strong>Which formats failed to transform most (and why)?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-680 aligncenter" src="/wp-content/uploads/2021/12/1_nhiPX8M-pswsB3RY44MTSg-1024x444.png" alt=""></p>
<figcaption><em>Total vs Unique Analysis of Most Common Format Failures</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e1e9" class="">With the increasing number of transformations, a rise in the number of failed transformations was also seen (approx. 41,569 which is roughly 19% of the total conversions performed).</p>
<h3 id="c862"><strong>Total</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-681" src="/wp-content/uploads/2021/12/1_DYsVs0uEXAanztwABMwR3g.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p class="">56% of the total failed transformations involved OpenAPI files (versions 1.x, 2.0, 3.0) as input while 34% of the failures occurred when users tried converting invalid/unsupported files.</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="4ea5" class=""><strong>Unique</strong></h3>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:columns -->
<div class="wp-block-columns"><!-- wp:column -->
<div class="wp-block-column"><!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-682" src="/wp-content/uploads/2021/12/1_IH9YotSH65XF-HqGyYxidg.png" alt=""></p>
</figure>
<!-- /wp:image --></div>
<!-- /wp:column -->

<!-- wp:column -->
<div class="wp-block-column"><!-- wp:paragraph -->
<p class="">After removing redundant format failures per user, 49% of the total failed transformations were found to be from invalid/unsupported files while only 27% were due to OpenAPI files (versions 1.x, 2.0, 3.0). 13% were attributed to RAML files (versions 0.8, 1.0).</p>
<!-- /wp:paragraph --></div>
<!-- /wp:column --></div>
<!-- /wp:columns -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="7d13"><strong>Overall</strong></h3>
<p id="7366">As you can see, a large portion of failures constituted of the&nbsp;<strong>invalid/unsupported files</strong>. Following are the kinds of files that fall under this category:</p>
<ol class="">
<li>Not valid API description files e.g. HTML files, JSON response data, XML schema files, etc.</li>
<li>Files that lacked necessary metadata, thus, preventing identification at the time of conversion e.g. API Blueprint files without “Format” and “Host” information.</li>
<li>Format files that contained some critical errors/ human mistakes preventing them from being identified properly e.g. invalid JSON, incomplete file, etc.</li>
</ol>
<p id="43bf" class="">The rest of the failed conversions mainly consisted of&nbsp;<strong>RAML or OpenAPI</strong>&nbsp;files. These transformations failed largely due to errors/human mistakes while a small portion of them failed due to bugs in our tool which were later fixed.</p>
<p id="efe3" class="">In 2018, we analyzed, in the form of a blog series, the common mistakes developers made resulting in failed transformations. If you are interested to learn more, please head over to the following:</p>
<ol class="">
<li><a href="https://apimatic.io/blog/2018/09/common-mistakes-developers-make-in-their-api-blueprint-files">Common Mistakes Developers Make in Their API Blueprint Files</a></li>
<li><a href="https://apimatic.io/blog/2018/04/common-mistakes-developers-make-in-their-raml-files">Common Mistakes Developers Make in Their RAML Files</a></li>
<li><a href="https://apimatic.io/blog/2018/03/common-mistakes-developers-make-in-their-openapi-3-files">Common Mistakes Developers Make in Their OpenAPI 3 Files</a></li>
</ol>
<h2 id="7198" class=""><strong>Did developers prefer to transform via the website or via our API?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->

<!-- wp:list /-->

<!-- wp:heading /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-683" src="/wp-content/uploads/2021/12/1_abnhHqigDqnDnUI07snfDQ-1024x408.png" alt=""></p>
<figcaption><em>Total vs Unique Comparison of Transformer Web and API Conversions</em></figcaption>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="b449" class="">&nbsp;API Transformer&nbsp; not only provides a web UI to users for performing conversions but also facilitates them by providing a simple <a href="https://www.apimatic.io/apidocs/apimatic">Transformation API</a>&nbsp;that offers the same functionality as the UI.</p>
<h3 id="b1d4" class=""><strong>Total</strong></h3>
<p id="f312" class="">In 2018, 80% of the total conversions were performed by users over the API while only 20% were performed via the web UI. The data here is skewed largely due to several of our users performing thousands of conversions via the API every month. This skewness is ignored in the second data discussed below.</p>
<h3 id="e66a"><strong>Unique</strong></h3>
<p id="9f3c">In contrast to what the results from the Total data shows, if we consider unique conversions per user, 95% of the conversions were performed via web while only 5% were performed via the API.</p>
<h3 id="5284"><strong>Overall</strong></h3>
<p id="2f49">Ignoring the skewness, it can be safely concluded that&nbsp;<strong>majority of the conversions were performed using the web UI.</strong></p>
<h2 id="18cd"><strong>What trends could be seen in terms of size of APIs?</strong></h2>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large">
<p class="mod-reset"><img class="wp-image-684 aligncenter" src="/wp-content/uploads/2021/12/1_YHagzghl3fcmBJtTquZlBw.png" alt=""></p>
<figcaption><em>Analysis of Size of API for Total Conversions</em></figcaption>
</figure>
</div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="a7f8" class="">For measuring the size of an API, we considered the number of endpoints in an API. 97% of the APIs involved in the conversions had less than 100 endpoints while 3% of the APIs had endpoints ranging between 100 and 500. The remaining small portion of APIs had endpoints greater than 500. It can be concluded that, with a few exceptions,&nbsp;<strong>APIs with less than 100 endpoints are the most common.</strong></p>
<h2 id="3294" class=""><strong>Conclusion</strong></h2>
<p id="7ab6" class="">2018 undoubtedly turned out be quite an important year for API Transformer both in terms of its growth and stability. We hope to make API Transformer even better and stronger in the days to come. You can also play a big role in that! If you have any feedback or ideas that you want to share with us or have any queries, please don’t hesitate to reach out to <a href="mailto:support@apimatic.io">support@apimatic.io</a>.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:paragraph /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/api-transformer-insights-2018/">API Transformer Insights 2018</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/api-transformer-insights-2018/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
