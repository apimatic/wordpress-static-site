
<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>APIMatic</title>
	<atom:link href="/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description>APIMatic is an API documentation tool that provides a complete set of DX components such as autogenerated SDKs, API portal, API docs, live code samples, and more.</description>
	<lastBuildDate>Wed, 02 Feb 2022 08:08:24 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.3</generator>

<image>
	<url>/wp-content/uploads/2021/10/cropped-cropped-apimaticio-favicon-1-32x32.png</url>
	<title>APIMatic</title>
	<link>/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Automating Developer Experience with APIMatic CLI</title>
		<link>/blog/automate-dx-with-apimatic-cli/</link>
					<comments>/blog/automate-dx-with-apimatic-cli/#respond</comments>
		
		<dc:creator><![CDATA[Nida I Zamir]]></dc:creator>
		<pubDate>Fri, 21 Jan 2022 11:15:14 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Automation]]></category>
		<category><![CDATA[CLI]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API portal]]></category>
		<category><![CDATA[APIMatic CLI]]></category>
		<category><![CDATA[automation]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1627</guid>

					<description><![CDATA[<p>APIs act as a bridge to multiple tiers in distributed software systems. However, reflecting the changes of fast-evolving APIs among these connected tiers is a huge drain in productivity, and increases the time to market. This means that your software tiers must always remain in sync, and in an ideal world also minimize the redundancy [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/automate-dx-with-apimatic-cli/">Automating Developer Experience with APIMatic CLI</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p><img class=" wp-image-9666 aligncenter" src="/wp-content/uploads/2022/01/Dev-Cycle-1024x690-1.png" alt="" width="549" height="370" srcset="/wp-content/uploads/2022/01/Dev-Cycle-1024x690-1.png 1024w, /wp-content/uploads/2022/01/Dev-Cycle-1024x690-1-300x202.png 300w, /wp-content/uploads/2022/01/Dev-Cycle-1024x690-1-768x518.png 768w" sizes="(max-width: 549px) 100vw, 549px" /></p>
<div class="boldgrid-section">
<div class="container">
<p class=""><span style="font-weight: 400;">APIs act as a bridge to multiple tiers in distributed software systems. However, reflecting the changes of fast-evolving APIs among these connected tiers is a huge drain in productivity, and increases the time to market. </span><span style="font-weight: 400;">This means that your software tiers must always remain in sync, and in an ideal world also minimize the redundancy of generating documentation and SDKs on each update. </span></p>
<p class=""><span style="font-weight: 400;">The <a href="https://docs.apimatic.io/apimatic-cli/intro-and-install/">APIMatic CLI</a> ensures that your developer experience checklist is in check at all times by automating the redundant, time and resource-consuming tasks of API validation, documentation, and SDK maintenance. The APIMatic CLI offers feature parity by providing automation in the form of: </span></p>
<ul class="">
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">API Validator</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">API Transformer </span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">SDK Generator</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">API Portal Generator</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<hr />
</div>
</div>
</div>
</div>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div><span style="font-weight: 400;">You can integrate the APIMatic CLI into your CI/CD pipelines for a seamless and automated experience. For example, every time your pipeline detects a change in the API, it can trigger </span><a href="https://www.apimatic.io/continuous-code-generation/"><span style="font-weight: 400;">automatic code generation</span></a><span style="font-weight: 400;"> for the API without any human intervention and you can ship updated SDKs as soon as the API is updated. </span></div>
</div>
</div>
</div>
</div>
<p class=""><span style="font-weight: 400;">For a quick walkthrough of the newly introduced CLI, we’ll be using the Uber API specification.</span></p>
<h2 class=""><span style="font-weight: 400;">Installing the APIMatic CLI</span></h2>
<p class=""><span style="font-weight: 400;">Installing the CLI is quick and painless. You only need </span><b>Node.JS</b><span style="font-weight: 400;"> and </span><b>npm </b><span style="font-weight: 400;">as a pre-requisite to execute the following command, and you’re good to go:</span></p>
<pre class=""><code class="language-bash">npm install -g @apimatic/cli</code></pre>
<h2 class=""><span style="font-weight: 400;">Validating the API for Unforeseen Errors</span></h2>
<p class=""><span style="font-weight: 400;">Validating the API definition against robust internal checks ensures you have a smooth experience using APIMatic’s services. Fixing these validation issues before proceeding to generate portals or SDKs helps save debugging time. The </span><a href="https://docs.apimatic.io/rulesets/overview/"><span style="font-weight: 400;">validation output</span></a><span style="font-weight: 400;"> is categorized into three categories defined below:</span></p>
<ul class="">
<li style="font-weight: 400;" aria-level="1"><b>Errors</b><span style="font-weight: 400;">: Any syntax/semantic issues found in the API definition.</span></li>
<li style="font-weight: 400;" aria-level="1"><b>Warnings</b><span style="font-weight: 400;">: Any unexpected behavior that may affect the output.</span></li>
<li style="font-weight: 400;" aria-level="1"><b>Info</b><span style="font-weight: 400;">: Recommendations or suggestions that can help enhance your API definition and its completeness.</span></li>
</ul>
<p>&nbsp;</p>
<p class=""><span style="font-weight: 400;">To validate your API definition, run the </span><b>apimatic api:validate</b><span style="font-weight: 400;"> command by providing the path to the file:</span></p>
<p class=""><img class="aligncenter wp-image-1634 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/validation.png" alt="validate using CLI" width="637" height="91" /></p>
<p class=""><span style="font-weight: 400;">The API definition validated here does not seem to have any critical errors and warnings that need fixing, so we can move forward to either generate SDKs and API Portals or transform the API specification into another format.</span></p>
<h2 class=""><span style="font-weight: 400;">Generating SDKs to Speak in the Language of Developers</span></h2>
<p class=""><span style="font-weight: 400;">Once the API is validated, you can proceed to generate multi-language SDKs from the API definition, directly via the command line. The </span><b>apimatic sdk:generate</b><span style="font-weight: 400;"> command generates an SDK in a specified language and downloads it to the specified destination folder.</span></p>
<p class=""><span style="font-weight: 400;">For example, I generated a Python SDK from the Uber API using the APIMatic CLI: </span></p>
<p class=""><span style="font-weight: 400;"><img class="aligncenter wp-image-1631 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/sdk.png" alt="" width="742" height="102" /></span></p>
<p class=""><span style="font-weight: 400;">Now check the destination folder, where the SDK has been downloaded in .zip form. Extracting the .zip file shows the complete SDK files, including a comprehensive README to use the SDK:</span></p>
<p class=""><img class="aligncenter wp-image-1632 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/sdk-downloaded.png" alt="sdk generation using cli" width="661" height="323" /></p>
<p class=""><span style="font-weight: 400;">You can use your favorite IDE to start building applications using the Uber API SDK straightaway. To read more about APIMatic SDKs, please refer to the </span><a href="https://docs.apimatic.io/generate-sdks/overview-sdks/"><span style="font-weight: 400;">APIMatic SDK documentation</span></a><span style="font-weight: 400;">.</span></p>
<h2 class=""><span style="font-weight: 400;">Generating API Portal for Higher Adoption</span></h2>
<p class=""><span style="font-weight: 400;">APIMatic embraces the ‘documentation as code’ philosophy, allowing you to specify all aspects of the API documentation as code. The </span><a href="https://www.apimatic.io/developer-experience-portal/"><span style="font-weight: 400;">API Portal</span></a><span style="font-weight: 400;"> bundles API documentation, SDKs, and code samples into a static website. Just like with all products of APIMatic, the API Portal can be generated right from the terminal as well, letting the entire process be made part of the release pipeline.</span></p>
<p class=""><span style="font-weight: 400;">In order to generate an API Portal, the CLI expects inputs to be provided in a specific format:</span></p>
<ul class="">
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">A </span><i><span style="font-weight: 400;">content </span></i><span style="font-weight: 400;">directory containing Markdown guides.</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">A </span><i><span style="font-weight: 400;">spec </span></i><span style="font-weight: 400;">directory containing API specifications.</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">A </span><i><span style="font-weight: 400;">static </span></i><span style="font-weight: 400;">directory containing images or any other static content referenced in the documentation.</span></li>
<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">A configuration file called </span><i><span style="font-weight: 400;">APIMATIC-BUILD.json</span></i><span style="font-weight: 400;">.</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<hr />
</div>
</div>
</div>
</div>
<p class=""><span style="font-weight: 400;">Place all the artifacts in a directory, including the Uber API under the </span><i><span style="font-weight: 400;">spec </span></i><span style="font-weight: 400;">directory:</span></p>
<p class=""><img class="aligncenter size-full wp-image-1629" src="https://devapi.dream.press/wp-content/uploads/2022/01/portal-directory.png" alt="" width="281" height="194" /></p>
<p class=""><span style="font-weight: 400;">The </span><b>apimatic portal:generate</b><span style="font-weight: 400;"> command takes the contents of this directory to convert it into a static portal’s components.</span></p>
<p class=""><img class="aligncenter wp-image-1630 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/portal-generated.png" alt="portal generation using cli" width="624" height="80" /></p>
<p class=""><span style="font-weight: 400;">The static website can now be hosted on a hosting service of your choice, let’s say by creating a website on Netlify, and the Uber API portal is live:</span></p>
<p class=""><img class="aligncenter wp-image-1628 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/cli-portal.gif" alt="APIMatic CLI Portal" width="1346" height="634" /></p>
<h2 class=""><span style="font-weight: 400;">Transforming the API into Multiple API Formats</span></h2>
<p class=""><span style="font-weight: 400;">You can also automatically transform your API into more than </span><a href="https://www.apimatic.io/transformer/"><span style="font-weight: 400;">10 popular API specification formats</span></a><span style="font-weight: 400;"> including OpenAPI, RAML, API Blueprint, WSDL, Postman, and more. Many APIMatic users integrate automated transformations into their CI/CD pipelines via the Transformer API, which helps them take away the pain of having to manually rewrite the APIs. The same process can be replicated with a script that executes the CLI command for Transformer as well.</span></p>
<p class=""><span style="font-weight: 400;">The following example shows how the </span><b>apimatic api:transform</b><span style="font-weight: 400;"> command converts the Uber API (in OpenAPI 3.0 format) to RAML, and saves it to a specific directory: </span></p>
<p class=""><img class="aligncenter wp-image-1633 size-full" src="https://devapi.dream.press/wp-content/uploads/2022/01/transformed.png" alt="transform using cli" width="682" height="130" /></p>
<h2 class=""><span style="font-weight: 400;">Conclusion</span></h2>
<p><span style="font-weight: 400;">Automation lets developers concentrate on business objectives and innovative solutions instead of diverting their time and efforts towards redundant tasks like maintaining documentation and building SDKs for each API update. Hence, the APIMatic CLI has been introduced as yet another automation option </span><a href="http://apimatic.io/"><span style="font-weight: 400;">among our growing toolset</span></a><span style="font-weight: 400;"> so you only need to focus on your API, while we take care of the rest.</span></p>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/automate-dx-with-apimatic-cli/">Automating Developer Experience with APIMatic CLI</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/automate-dx-with-apimatic-cli/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>APIMatic Java SDKs Protected Against Log4j Vulnerability</title>
		<link>/blog/protected-against-log4j-vulnerability/</link>
					<comments>/blog/protected-against-log4j-vulnerability/#respond</comments>
		
		<dc:creator><![CDATA[APIMatic]]></dc:creator>
		<pubDate>Tue, 14 Dec 2021 12:10:49 +0000</pubDate>
				<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[java]]></category>
		<category><![CDATA[log4j]]></category>
		<category><![CDATA[security]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1608</guid>

					<description><![CDATA[<p>Auckland, NZ – December 14, 2021: APIMatic has performed a detailed analysis of their Java SDKs and confirms that they do not contain direct Log4j v2 dependency, making the SDKs safe from the new zero-day vulnerability, CVE-2021-44228, also called as Log4Shell. Log4j &#62;= version 2.0 has become a global security threat as it allows attackers [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/protected-against-log4j-vulnerability/">APIMatic Java SDKs Protected Against Log4j Vulnerability</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><b>Auckland, NZ – December 14, 2021</b><span style="font-weight: 400;">: APIMatic has performed a detailed analysis of their Java SDKs and confirms that they do not contain direct Log4j v2 dependency, making the SDKs safe from the new zero-day vulnerability, <em>CVE-2021-44228</em>, also called as <em>Log4Shell</em>.</span></p>
<p class=""><span style="font-weight: 400;">Log4j &gt;= version 2.0 has become a global security threat as it allows attackers to execute remote code on their targetted servers. APIMatic ran checks for their Java SDKs and found that the SDKs use SLF4J  (1.7.30) for logging, hence the Java SDKs are not exposed to this vulnerability.</span></p>
<p class=""><span style="font-weight: 400;">APIMatic’s engineering and customer support teams are working to ensure that all users are informed about the latest updates regarding the Log4J vulnerability. </span></p>
<p class=""><span style="font-weight: 400;">APIMatic is a premium developer experience platform on a mission to ensure faster adoption of your API with autogenerated API documentation, multi-language SDKs, dynamic code samples, and more.</span></p>
<p class=""><span style="font-weight: 400;">Please direct any concerns or further inquiries to</span><a href="mailto:info@apimatic.io"><span style="font-weight: 400;"> info@apimatic.io</span></a><span style="font-weight: 400;">.</span></p>
</div>
</div>
</div>
</div>
<p>The post <a rel="nofollow" href="/blog/protected-against-log4j-vulnerability/">APIMatic Java SDKs Protected Against Log4j Vulnerability</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/protected-against-log4j-vulnerability/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Million Mile Views via a NASA API  (no coding required)</title>
		<link>/blog/million-mile-views-via-a-nasa-api/</link>
					<comments>/blog/million-mile-views-via-a-nasa-api/#respond</comments>
		
		<dc:creator><![CDATA[Adeel Ali]]></dc:creator>
		<pubDate>Fri, 03 Dec 2021 04:51:29 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[NASA]]></category>
		<category><![CDATA[NASA API]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1568</guid>

					<description><![CDATA[<p>APIs are meant to be used by developers, which means non-developers typically don’t get a chance to “directly access” the wealth of information provided by APIs. I faced a similar situation last week when I tried using a NASA API to observe our Earth via a satellite sitting a million miles far. The outcome: I [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/million-mile-views-via-a-nasa-api/">Million Mile Views via a NASA API  (no coding required)</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="5825" class="elementor elementor-5825" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-2caa2cfc elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="2caa2cfc" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1dac51b2" data-id="1dac51b2" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-13d7e0e6 elementor-widget elementor-widget-text-editor" data-id="13d7e0e6" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
			<style>/*! elementor - v3.5.6 - 28-02-2022 */
.elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap{background-color:#818a91;color:#fff}.elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap{color:#818a91;border:3px solid;background-color:transparent}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap{margin-top:8px}.elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter{width:1em;height:1em}.elementor-widget-text-editor .elementor-drop-cap{float:left;text-align:center;line-height:1;font-size:50px}.elementor-widget-text-editor .elementor-drop-cap-letter{display:inline-block}</style>				<div class="boldgrid-section"><div class="container"><div class="row"><div class="col-md-12 col-xs-12 col-sm-12"><figure id="attachment_1570" aria-describedby="caption-attachment-1570" style="width: 3000px" class="wp-caption alignnone"><img class="wp-image-1570 size-full" src="/wp-content/uploads/2021/12/download-6.png" alt="Million Mile View via NASA API | APIMatic Blog" width="3000" height="1200" /><figcaption id="caption-attachment-1570" class="wp-caption-text">Moon transition caught by EPIC in Feb 2021</figcaption></figure><p class="" style="text-align: justify;"><span style="font-weight: 400;">APIs are meant to be used by developers, which means non-developers typically don’t get a chance to “directly access” the wealth of information provided by APIs. I faced a similar situation last week when I tried using a NASA API to observe our Earth via a satellite sitting a million miles far. The outcome: I did write some code, but ended up creating API docs for non-developers to see those gorgeous views without having to write any code.</span></p><h2 class=""><strong>Background</strong></h2><p class="" style="text-align: justify;"><span style="font-weight: 400;">On November 20th, I was observing </span><a href="https://www.facebook.com/groups/ExploreNewZealand/permalink/1525141897862733/"><span style="font-weight: 400;">the recent lunar eclipse</span></a><span style="font-weight: 400;"> with my 9 years old via a telescope. That reminded me of another telescope at DSCOVR (Deep Space Climate Observatory) which captures our Earth from a million miles (details are coming below). These images are available via an </span><a href="https://epic.gsfc.nasa.gov/about/api"><span style="font-weight: 400;">API</span></a><span style="font-weight: 400;">, but getting an image on a particular date required multiple API calls, and combining the images of a single day was not an option. Combined images help see a time-lapsed view of a whole day as well as give a side-by-side view of some rare occurrences such as the moving shadow of a solar eclipse, or the back-side of our moon in transition. Therefore, I wrote a small API on top of NASA’s API and published the relevant </span><a href="https://www.apimatic.io/apidocs/nasa-epic-demo"><span style="font-weight: 400;">documentation</span></a><span style="font-weight: 400;"> of both the APIs.</span></p><h2 class=""><strong>Fasten Your Seat Belts, We’re Going Deep in Space</strong></h2><p class="" style="text-align: justify;"><span style="font-weight: 400;">Hold tight as we’re going to see our beloved planet from some distance. You can start straight away by </span><a style="font-size: 16px;" href="https://www.apimatic.io/apidocs/nasa-epic-demo/v/1_0#/http/api-endpoints/natural-color/get-solar-eclipse-days"><span style="font-weight: 400;">watching a past solar eclipse</span></a><span style="font-weight: 400;"> (hit the Try It Out button, and change the date for different eclipses). Since the telescope stays at a </span><a style="font-size: 16px;" href="https://en.wikipedia.org/wiki/Lagrange_point"><span style="font-weight: 400;">Lagrange point</span></a><span style="font-weight: 400;"> (L1), it can see the sun-lit part of the Earth 24/7. Therefore, in the case of a solar eclipse, it captures the shadow of the moon passing through different parts of our planet. The following picture depicts this scenario and became my motivation for doing this exercise.</span></p><figure id="attachment_1579" aria-describedby="caption-attachment-1579" style="width: 699px" class="wp-caption aligncenter"><img class=" wp-image-1579" src="/wp-content/uploads/2021/12/Pasted-Graphic-1-1024x686.png" alt="" width="699" height="468" /><figcaption id="caption-attachment-1579" class="wp-caption-text">August 21st, 2017, a total solar eclipse over North America</figcaption></figure><div class="mceTemp"> </div><h3 class="">A Lunar Transit</h3><p class="" style="text-align: justify;"><span style="font-weight: 400;">As you might have guessed, at a million miles away, we go well past the moon, so it gives us a chance to see the rear or dark side of the moon. Since the moon is phase-locked with Earth, we never see this side of the moon from Earth. However, thanks to DSCOVR, we can now see this spectacular view of the moon when it transits between the telescope and Earth. <a href="https://www.apimatic.io/apidocs/nasa-epic-demo/v/1_0#/java/api-endpoints/natural-color/get-lunar-transit-days">Try It Out via an API call</a>.</span><span style="font-weight: 400;"> </span></p><h2 class=""><strong>Non-Developers – How’s Been The API Experience?</strong></h2><p class="" style="text-align: justify;"><span style="font-weight: 400;">If you’re not a developer and have clicked the “Try It Out” button in either of the above links, then congratulations! You successfully called an API </span><i><span style="font-weight: 400;">without writing any code</span></i><span style="font-weight: 400;">. The left column of the </span><a href="https://www.apimatic.io/developer-experience-portal/"><span style="font-weight: 400;">API Portal</span></a><span style="font-weight: 400;"> acts as a menu to select getting started guides, API functions (also known as endpoints), and API models’ information. In the middle column (the API Code Playground) there are multiple settings to configure the output image including </span><code><b>gridColumns</b></code><span style="font-weight: 400;">(to change the image grid) and </span><code><b>imageQuality</b></code><span style="font-weight: 400;">. Any change in these settings is also reflected in the code on the right-most column. That’s how developers build sample application code based on their own input. If the code seems overwhelming, you may safely ignore it and hit the “Try It Out” button on the bottom right to immediately get the output.</span></p><figure id="attachment_1584" aria-describedby="caption-attachment-1584" style="width: 1522px" class="wp-caption alignnone"><img class="wp-image-1584 size-full" src="/wp-content/uploads/2021/12/image-5.png" alt="APIMatic Developer Experience Portal showcasing NASA API" width="1522" height="908" /><figcaption id="caption-attachment-1584" class="wp-caption-text">APIMatic&#8217;s Developer Experience Portal showcasing NASA API</figcaption></figure><h2 class="">Developers – It’s Simple yet Effective</h2><p class="" style="text-align: justify;"><span style="font-weight: 400;">You might have guessed already that the combined images are being generated via chaining a few endpoint requests to NASA’s EPIC API. The top 3 endpoints are from EPIC API, while I added the bottom 3 endpoints. Interestingly, all 3 of my endpoints are hitting the same function at the server, while I am tweaking the input at the API level using APIMatic’s editor. I could have made an app to display the combined images but opted for an API because the use case was simple enough to be directly used from the API docs. Moreover, there are <a href="https://www.apimatic.io/blog/2021/09/the-great-sdk-battle-build-vs-buy/">SDKs and Code Samples</a> available for all the endpoints, so that the API could be used in different applications.</span></p><h2 class="" style="text-align: justify;"><strong>EPIC “Blue Marble” API &#8211; What’s So Special? </strong></h2><p class="" style="text-align: justify;"><span style="font-weight: 400;">The science behind Lagrange points is quite fascinating. Parking a space station right there, and continuously capturing the Earth&#8217;s atmosphere makes EPIC API quite special. According to </span><a href="https://solarsystem.nasa.gov/missions/DSCOVR/in-depth/"><span style="font-weight: 400;">NASA </span></a><span style="font-weight: 400;">:</span></p><ul class=""><li style="text-align: justify;"><span style="font-weight: 400;">DSCOVR orbits about a million miles from Earth in a unique location called Lagrange point 1, which basically allows it to hover between the Sun and our planet.</span></li><li style="font-weight: 400; text-align: justify;"><span style="font-weight: 400;">The EPIC API provides information on the daily imagery collected by DSCOVR&#8217;s Earth Polychromatic Imaging Camera (EPIC) instrument. Uniquely positioned at the Earth-Sun Lagrange point, EPIC provides full disc imagery of the Earth and captures unique perspectives of certain astronomical events such as lunar transits using a 2048&#215;2048 pixel CCD (Charge Coupled Device) detector coupled to a 30-cm aperture Cassegrain telescope. </span></li></ul><figure id="attachment_1573" aria-describedby="caption-attachment-1573" style="width: 939px" class="wp-caption aligncenter"><img class=" wp-image-1573" src="/wp-content/uploads/2021/12/dscovr.jpg" alt="" width="939" height="725" /><figcaption id="caption-attachment-1573" class="wp-caption-text">DSCOVR orbits about 1 million miles (1.5 million kilometers) from Earth. Positioned between the Sun and Earth, this location is called Lagrange point 1. (Illustration not to scale.) Credit: NOAA</figcaption></figure><h2 class=""><strong>Conclusions</strong></h2><p class="" style="text-align: justify;"><span style="font-weight: 400;">APIs have opened up new doorways to exciting information. That information is not available to common people until developers build “apps” using the APIs. However, some of the APIs, especially the ones providing data, can be accessed by both developers and non-developers via purpose-built API docs. And if the API is as exciting as NASA’s EPIC API, then we should not keep the non-coders away from such a nice experience, especially in the booming no-code and low-code times.</span></p><p class=""><span style="font-weight: 400;">Thanks for reading. Please feel free to reach out for any suggestions and feedback at adeel@apimatic.io.</span></p><h4 class=""> </h4></div></div></div></div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/million-mile-views-via-a-nasa-api/">Million Mile Views via a NASA API  (no coding required)</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/million-mile-views-via-a-nasa-api/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Introducing API Developer Experience Analytics</title>
		<link>/blog/introducing-api-developer-experience-analytics/</link>
					<comments>/blog/introducing-api-developer-experience-analytics/#respond</comments>
		
		<dc:creator><![CDATA[Adeel Ali]]></dc:creator>
		<pubDate>Thu, 28 Oct 2021 11:26:43 +0000</pubDate>
				<category><![CDATA[Analytics]]></category>
		<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[API analytics]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[API portal]]></category>
		<category><![CDATA[Apimatic Features]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1543</guid>

					<description><![CDATA[<p>&#160; How do you define the success of an API? Is it the number of developers using the API, the number of apps built using the API, the revenue stream it has created, or perhaps some other KPI? Whatever the criteria, the important bit is to constantly generate demand among the target audience, and keep [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/introducing-api-developer-experience-analytics/">Introducing API Developer Experience Analytics</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1543" class="elementor elementor-1543" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-5dad33c5 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="5dad33c5" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-6d6d6af3" data-id="6d6d6af3" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-5ec4bf46 elementor-widget elementor-widget-text-editor" data-id="5ec4bf46" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="wp-image-1560 aligncenter" src="/wp-content/uploads/2021/12/DX-Analytics-2_Facebook-copy-08-300x157.png" alt="" width="450" height="235"></p>
<p class="">&nbsp;</p>
<p class=""><span style="font-weight: 400;">How do you define the success of an API? Is it the number of developers using the API, the number of apps built using the API, the revenue stream it has created, or perhaps some other KPI? Whatever the criteria, the important bit is to constantly generate demand among the target audience, and keep measuring and aligning their activities towards the desired success criteria.</span></p>

<h2 class=""><strong>Knowing your Audience</strong></h2>
<p class=""><span style="font-weight: 400;">Defining an ideal customer profile is the first step of any demand generation strategy. Imagine after publishing a well-crafted API, you want to go out and start marketing it, but do you actually know what your ideal consumer/developer profile is? Do you want to target consumers of mobile or web or both? What developer community and platforms are important to you?&nbsp;</span></p>
<p class=""><img class="aligncenter wp-image-1545 size-full" src="/wp-content/uploads/2021/12/audience.png" alt="" width="810" height="323"></p>
<p class=""><span style="font-weight: 400;">Remember, your API is language-agnostic, but your targeted platforms and developers are not. Therefore, understanding the needs of a large diverse audience is as important as speaking their language. </span><a href="https://www.youtube.com/watch?v=WNeZxbc4dtI"><span style="font-weight: 400;">Here is a talk</span></a><span style="font-weight: 400;"> elucidating how Twilio has created a phenomenal API experience by supporting a variety of languages.</span></p>

<h2 class="">How are Developers Interacting with Your API?</h2>
<p class=""><span style="font-weight: 400;">After identifying the success criteria for your API, and knowing who your audience is, it’s time to measure how they perform once they have landed on your </span><a href="https://www.apimatic.io/developer-experience-portal/"><span style="font-weight: 400;">API portal</span></a><span style="font-weight: 400;">. For this purpose, we are introducing a novel kind of metrics at APIMatic.io, which we call “Developer Experience Analytics”.&nbsp;</span></p>
<p class=""><img class="aligncenter wp-image-1548 size-large" src="/wp-content/uploads/2021/12/overview-1024x285.png" alt="Performance Overview in API Developer Experience Analytics " width="1024" height="285"></p>
<p class=""><span style="font-weight: 400;">While there exist a bunch of solutions to analyze API traffic, APIMatic’s analytics are focused on the developer experience with respect to developers and programming platforms. For example, it can help in knowing </span><span style="font-weight: 400;">how many users get to make a successful call with your API before they even start coding. Or how many developers are running into problems while trying out an API, and the nature of their problems.</span><span style="font-weight: 400;">
</span></p>
<p class=""><span style="font-weight: 400;">There is a variety of metrics available, such as:</span><span style="font-weight: 400;">
</span></p>

<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><b>Time to First API Call (TTFC):</b><span style="font-weight: 400;"> shows the average time taken by different users to the first API call with the 2XX status code. Reaching the first successful API call means a developer has figured out the API communication setup and authentication requirements etcetera and is now ready to start integrating the API in production code. The time taken to reach the first call can help measure how intuitive and straightforward your&nbsp; API’s onboarding process is.</span>&nbsp;</li>
 	<li style="font-weight: 400;" aria-level="1"><b>API Portal Visits</b><span style="font-weight: 400;">: represents the traffic on your API portal, but at a more granular level based on the languages/platform documentation visited.&nbsp; The language distribution can help measure the popularity of a particular language or gauge the results of a demand generation effort being made to attract a particular developer community.</span></li>
</ul>
&nbsp;
<p class=""><img class="aligncenter wp-image-1544 size-large" src="/wp-content/uploads/2021/12/api-portal-visits-1024x417.png" alt="API Portal Visits in API Analytics" width="1024" height="417"></p>

<ul>
 	<li><b>Portal Page Views</b><span style="font-weight: 400;">: portrays the most popular pages visited by the developers of different languages. This could be a great indicator of the importance of a particular language, endpoint, use case, or a custom guide.</span><span style="font-weight: 400;">
</span></li>
</ul>
<p class=""><img class="aligncenter wp-image-1547 size-large" src="/wp-content/uploads/2021/12/image3-1024x415.png" alt="Portal Page Views in API Analytics" width="1024" height="415"></p>

<ul>
 	<li><b>API Code Playground calls:</b><span style="font-weight: 400;"> depicts the actual API calls made by users using their own data, right from the docs. The result of those calls, in terms of returned HTTP status codes, is quite insightful to fix any potential issues in the docs or in the developers’ understanding.</span><span style="font-weight: 400;">
</span></li>
</ul>
<p class=""><img class="aligncenter wp-image-1546 size-large" src="/wp-content/uploads/2021/12/direct-api-calls-1024x425.png" alt="Direct API Calls in API Analytics" width="1024" height="425"></p>
<p class=""><span style="font-weight: 400;">Moreover, the API code playground also generates dynamic code samples, so analyzing the calls with respect to languages would also help identify the efforts and struggles of the developers of different languages.</span><span style="font-weight: 400;">
</span></p>
<p class=""><img class="aligncenter wp-image-1549 size-large" src="/wp-content/uploads/2021/12/trends-api-calls-1024x336.png" alt="Developer Experience Analytics " width="1024" height="336"></p>
<p class=""><span style="font-weight: 400;">For further details and a complete list of available metrics, please visit our detailed documentation on the </span><a href="https://docs.apimatic.io/publish-apis/analytics-dashboard/"><span style="font-weight: 400;">Developer Experience Analytics</span></a><span style="font-weight: 400;">.</span><span style="font-weight: 400;"> We aim to add more metrics in the future, including a few from the SDKs usage on the client-side. Please feel free to </span><a href="https://www.apimatic.io/contact/"><span style="font-weight: 400;">reach out</span></a><span style="font-weight: 400;"> for any feedback and suggestions.</span></p>
<p class="">&nbsp;</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/introducing-api-developer-experience-analytics/">Introducing API Developer Experience Analytics</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/introducing-api-developer-experience-analytics/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>DX of SDKs vs Direct API Calls</title>
		<link>/blog/dx-of-sdks-vs-direct-api-calls/</link>
					<comments>/blog/dx-of-sdks-vs-direct-api-calls/#respond</comments>
		
		<dc:creator><![CDATA[Adam DuVander]]></dc:creator>
		<pubDate>Mon, 11 Oct 2021 10:32:19 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[API Portal]]></category>
		<category><![CDATA[Code Samples]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API Calls]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Direct API Calls]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1519</guid>

					<description><![CDATA[<p>What&#8217;s it like to call your API? Developers want to use your API to accomplish something, and you want to make it as easy as possible for them to incorporate your service. To allow developers to call your API directly from any technology, your docs provide DIY instructions. To go a step further and give [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/dx-of-sdks-vs-direct-api-calls/">DX of SDKs vs Direct API Calls</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1519" class="elementor elementor-1519" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-7825289e elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="7825289e" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-5ad04015" data-id="5ad04015" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-687f92af elementor-widget elementor-widget-text-editor" data-id="687f92af" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter wp-image-1552 " src="/wp-content/uploads/2021/12/dx-of-sdks-vs-api-calls-1024x459.png" alt="" width="771" height="346"></p>
<p class=""><span style="font-weight: 400;">What&#8217;s it like to call your API? Developers want to use your API to accomplish something, and you want to make it as easy as possible for them to incorporate your service. To allow developers to call your API directly from any technology, your docs provide DIY instructions. To go a step further and give developers additional conveniences and tooling, you can provide Software Development Kits (SDKs). SDKs include code to call your API so that developers don&#8217;t have to write it themselves from scratch.</span></p>
<p class=""><span style="font-weight: 400;">While calling an API directly vs. using an SDK does not change the ultimate functionality of the API, it can dramatically affect the developer experience. In most cases, one method will be preferred over the other, varying according to each developer’s needs, preferences, and skills. An SDK offers simplicity and speedier development but applies only to a particular development framework. SDKs require resources to develop and maintain. Direct calls offer platform flexibility and are available to all developers, but are harder to use without expertise.</span></p>
<p class=""><span style="font-weight: 400;">In this article, we&#8217;ll be looking at why your developer experience may focus on direct API calls, SDKs, or both.</span></p>

<h2 class=""><span style="font-weight: 400;">Direct API Calls: The Basics</span></h2>
<span style="font-weight: 400;">For communicating with a service, sending API calls directly to URL endpoints is the simplest way. Of course, when we say </span><i><span style="font-weight: 400;">simplest</span></i><span style="font-weight: 400;">, we mean in terms of program complexity, not ease of use.</span>
<p class=""><span style="font-weight: 400;">When using an API without an SDK, you make calls to its URL endpoints directly using standard internet protocol commands for transferring packets of information over the network. There&#8217;s no abstraction between you and the service, so every parameter must be written into the call. It must also conform to a standard format.</span></p>
<p class=""><span style="font-weight: 400;">An example of how to construct a direct API call using Python is shown in the code snippet below. Notice the URL for the API endpoint is specified explicitly, alongside required header parameters that describe the request. This information is bundled and transmitted using the <code>requests</code> library, which then receives any response data returned by the API and stores it in the <code>resp</code> variable. Note that the cost of deserialization is added here for the API call.</span></p>

<pre class=""><code class="language-python">import requests
from requests.structures import CaseInsensitiveDict

url = &quot;https://connect.squareup.com/v2/payments&quot;

headers = CaseInsensitiveDict()
headers[&quot;Square-Version&quot;] = &quot;2021-06-16&quot;
headers[&quot;Authorization&quot;] = &quot;Bearer ACCESS TOKEN&quot;
headers[&quot;Content-Type&quot;] = &quot;application/json&quot;

resp = requests.get(url, headers=headers)
print(resp.status_code)

decoded = jsonpickle.decode(resp.text)
</code></pre>
<p class=""><span style="font-weight: 400;">Another example of a non-trivial API call can be seen here, pulled from the User Authentication documentation for the</span> <a href="https://www.dropbox.com/developers/documentation"><span style="font-weight: 400;">Dropbox API</span></a><span style="font-weight: 400;">:</span></p>


<figure id="attachment_1520" aria-describedby="caption-attachment-1520" style="width: 790px" class="wp-caption aligncenter"><img class="wp-image-1520 " src="/wp-content/uploads/2021/12/dropbox-1024x677.png" alt="dropbox user authentication" width="790" height="523"><figcaption id="caption-attachment-1520" class="wp-caption-text">Dropbox User Authentication Docs</figcaption></figure>

<span style="font-weight: 400;">For many developers, the need to specify every parameter is exactly what they want: the full power of the service at their fingertips.</span>
<p class=""><span style="font-weight: 400;">Low-level control can be unnecessary and overwhelming, though, especially for new developers. With just the basic building blocks, it can become a challenge for developers to perform more complicated tasks.</span></p>
<p class=""><span style="font-weight: 400;">Not only can direct API calls be complicated to do correctly, but they can also be frustrating to try to troubleshoot. API response codes aren&#8217;t particularly specific when providing error messages; Many developers may give up after countless generic 404 errors.</span></p>
<p class=""><span style="font-weight: 400;">Ultimately, many developers will wish they could have something a little more prepared for them. For those developers, you can please them by offering SDKs in their language.</span></p>

<h2 class=""><span style="font-weight: 400;">SDKs: What Are They?</span></h2>
<p class=""><span style="font-weight: 400;">SDKs are a compilation of environment-specific developer tools designed to access your API. SDKs make it more straightforward for developers to use your API using a programming language framework they prefer. For the developer who wants a little more guidance, SDKs will be the most appealing way for them to access your service.</span></p>
<p class=""><span style="font-weight: 400;">SDKs abstract away the minutiae of the API that often bog down implementation for developers. They can be thought of as an API wrapper that makes accessing that API more friendly to a particular type of developer. A developer has to download and install an SDK that matches the language of their development environment, where it will then provide a host of streamlined functionalities for interacting with your API. If the developer is using Python, for instance, they’ll most likely download an SDK through pip, such as this example from </span><a href="https://www.algolia.com/doc/guides/getting-started/quick-start/tutorials/quick-start-with-the-api-client/python/?client=python"><span style="font-weight: 400;">Algolia’s documentation</span></a><span style="font-weight: 400;">:</span></p>


<figure id="attachment_1521" aria-describedby="caption-attachment-1521" style="width: 721px" class="wp-caption aligncenter"><img class="wp-image-1521 " src="/wp-content/uploads/2021/12/algolia-1024x350.png" alt="Algolia Documentation" width="721" height="247"><figcaption id="caption-attachment-1521" class="wp-caption-text">Algolia SDK download through pip</figcaption></figure>
<p class=""><span style="font-weight: 400;">The example call to Dropbox&#8217;s API, shown earlier, constructed with their Python SDK is shown below. In contrast to a direct API call, it does not require the developer to hard code a URL and headers. Instead, the API token is passed to a provided client object that handles those details.</span></p>

<pre class=""><code class="language-python">import dropbox
token = &#039;My-API-Token&#039;
dbx = dropbox.Dropbox(token)

My_Field = dropbox.file_properties.PropertyField(&#039;Security Policy&#039;,&#039;Confidential&#039;)
My_Template_ID = &#039;ptid:1...&#039;
My_Property_Group = dropbox.file_properties.PropertyGroup(template_id=My_Template_ID, fields=[My_Field])

dbx.file_properties_properties_add(&quot;/my_awesome/word.docx&quot;, My_Property_Group)
</code></pre>
<span style="font-weight: 400;">While APIs aren&#8217;t language-specific, SDKs are. A developer will download the SDK for the specific language they want to work with. API providers that intend to offer SDKs have to research what languages most appeal to their core user base. Developers who have the use of an SDK will be incredibly satisfied by the bevy of tools made available for them, including, but not limited to:</span>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Autocomplete SDK commands inline</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Code samples for commands</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Example applications</span></li>
</ul>
<span style="font-weight: 400;">A beneficial everyday use case where SDKs are much easier to use than direct API calls is when developers need to perform complicated authentication procedures. Doing this correctly and securely with only direct API calls can be tricky, but most SDKs take these steps and make them easily implementable with just a few commands. The low-level API call parameters and structure are abstracted away from the developer and handled by the SDK.</span>

<span style="font-weight: 400;">In many ways, SDKs are the epitome of one of the main purposes of APIs: to give the developer the ability to build off existing technology as easily and quickly as possible.</span>
<p class=""><span style="font-weight: 400;">For many developers, SDKs are the preferred method of interacting with APIs. For others, there are cases for making direct API calls without an SDK. Now that we&#8217;ve looked at both options let&#8217;s see why developers would lean towards one or the other.</span></p>

<h2><span style="font-weight: 400;">Choosing Between SDKs and Direct API Calls</span></h2>
<p class=""><span style="font-weight: 400;">In an ideal world, there will be an SDK available to meet the developer’s exact needs. SDKs cost resources to produce and maintain, however. And even when SDKs are available, there are quite a few situations where the available SDKs might not work for what a developer wants to do. Just to list a few:</span></p>

<ul>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">An SDK may not be available in their desired language</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">The SDK may not be updated to incorporate new API features yet</span></li>
</ul>
<p class=""><span style="font-weight: 400;">In both of these situations, directly using the API might be the only option. After all, it takes time and effort for an API provider to build SDKs. If there&#8217;s only one Julia developer using your API who wants a Julia SDK, it might not justify the use of resources.</span></p>
<p class=""><span style="font-weight: 400;">Even for the SDKs of languages you deem popular enough to support, it takes time and effort to update those SDKs. Functionality added to an API yesterday may not be supported in the SDK by today.</span></p>
<p class=""><span style="font-weight: 400;">For the vast majority of use cases, developers will appreciate having SDKs available and will eagerly use them. This is especially true for those who are making use of multiple APIs in their applications. For that reason, SDKs are worth the time and effort to develop for your primary user groups. The effort it takes to provide up-to-date SDKs will save them effort as they can seamlessly incorporate API calls into their app code.</span></p>
<p class=""><span style="font-weight: 400;">And for those edge case developers, those who code in esoteric languages, those who need maximum security control over what the API is doing, and those who want to be on the cutting edge no matter what, direct API calls are most useful.</span></p>
<p class=""><span style="font-weight: 400;">A great example of a company showing both direct API and SDK calls in their documentation is </span><a href="https://stripe.com/docs/api/"><span style="font-weight: 400;">Stripe</span></a><span style="font-weight: 400;">:</span></p>


<figure id="attachment_1522" aria-describedby="caption-attachment-1522" style="width: 576px" class="wp-caption aligncenter"><img class="wp-image-1522 size-full" src="/wp-content/uploads/2021/12/stripe.gif" alt="Stripe API documentation showing both SDKs and API calls" width="576" height="296"><figcaption id="caption-attachment-1522" class="wp-caption-text">Stripe API documentation showing both SDKs and API calls</figcaption></figure>

<span style="font-weight: 400;">Both direct API calls and SDKs are tools that you should make available in your developers&#8217; toolboxes. And the more tools at their disposal, the more effective your developers will be.</span>
<p class=""><span style="font-weight: 400;">At the end of the day, the goal of your developer experience should be improving the accessibility of your product to developers of all backgrounds. Providing SDKs is the best way to make your API a little more manageable for them to implement.</span></p>
<p class=""><span style="font-weight: 400;">
</span>Have a look at how <a href="https://www.apimatic.io/developer-experience-portal">APIMatic enhances the developer experience</a> of your API with robust SDKs auto-generated in all popular languages from a single API definition file.</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/dx-of-sdks-vs-direct-api-calls/">DX of SDKs vs Direct API Calls</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/dx-of-sdks-vs-direct-api-calls/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>APIMatic v3: Your Biggest DX Game Changer [Webinar Follow-up]</title>
		<link>/blog/apimatic-v3-your-biggest-dx-game-changer-webinar-follow-up/</link>
					<comments>/blog/apimatic-v3-your-biggest-dx-game-changer-webinar-follow-up/#respond</comments>
		
		<dc:creator><![CDATA[Qurat-ul-Ain Ghazali]]></dc:creator>
		<pubDate>Fri, 08 Oct 2021 11:16:46 +0000</pubDate>
				<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[Developer Experience]]></category>
		<category><![CDATA[Webinar]]></category>
		<category><![CDATA[APIMatic Webinars]]></category>
		<category><![CDATA[Webinars]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1501</guid>

					<description><![CDATA[<p>In APIMatic v3 (codenamed Titan), our largest release to date, we have made some major improvements to the Code Generator and the API Portal to make your API’s developer experience seamless and further feature-rich. Developer experience is critical for smooth and rapid onboarding of your API which, in turn, leads to quicker API adoption and [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/apimatic-v3-your-biggest-dx-game-changer-webinar-follow-up/">APIMatic v3: Your Biggest DX Game Changer [Webinar Follow-up]</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1501" class="elementor elementor-1501" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-68f6a399 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="68f6a399" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-7eac4c7a" data-id="7eac4c7a" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4a4cef6 elementor-widget elementor-widget-text-editor" data-id="4a4cef6" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><span style="font-weight: 400;">In APIMatic v3 (codenamed Titan), our largest release to date, we have made some major improvements to the Code Generator and the <a href="https://www.apimatic.io/developer-experience-portal">API Portal</a> to make your API’s developer experience seamless and further feature-rich. Developer experience is critical for smooth and rapid onboarding of your API which, in turn, leads to quicker API adoption and higher ROI.</span></p>
<p class=""><span style="font-weight: 400;">The webinar &#8220;APIMatic v3: Your Biggest DX Game Changer&#8221; gave an overview of the new features and major improvements made in this release to help streamline your API&#8217;s developer experience. Mehdi, our Chief Product Architect, discussed updates to the Code Generator such as introducing immutable clients as SDKs for multi-threading, timeouts, and retries on API call errors, the support for latest dependencies, and language versions, and more. He also gave a walkthrough of the revamped API Portal that is more developer-friendly and intuitive and offers the updated WYSIWYG Markdown docs editor.</span></p>

<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3 class="">Notes:</h3>
<ul class="">
 	<li><strong>Introduction to APIMatic</strong>: D<span style="font-weight: 300;">eveloper experience platform that enables faster integrations of your API </span> [<a href="https://youtu.be/dj9LIdjFBIU?t=87">1.27</a>]</li>
</ul>
<ol class="">
 	<li style="list-style-type: none;">
<ol>
 	<li>SDK Generation: <span style="font-weight: 300;">&nbsp;PHP, Ruby, Python, C#, Java and TS/JS</span> [<a href="https://youtu.be/dj9LIdjFBIU?t=103">1.43</a>]</li>
 	<li><span style="font-weight: 300;">HTTP and Language-Specific Documentation</span>&nbsp;[<a href="https://youtu.be/dj9LIdjFBIU?t=130">2.10</a>]</li>
 	<li>API Portal and Code Playground [<a href="https://youtu.be/dj9LIdjFBIU?t=143">2.23</a>]</li>
 	<li>Dynamic Code Samples [<a href="https://youtu.be/dj9LIdjFBIU?t=168">2.48</a>]</li>
 	<li>Assisted Authentication [<a href="https://youtu.be/dj9LIdjFBIU?t=190">3.10</a>]</li>
</ol>
</li>
</ol>
<ul class="">
 	<li><strong>APIMatic v3</strong> [<a href="https://youtu.be/dj9LIdjFBIU?t=218">3.38</a>]</li>
 	<li><strong>Code Generator</strong>: U<span style="font-weight: 400;">pdated target language and runtime versions in all generated SDKs, the addition of TS</span>&nbsp;[<a href="https://youtu.be/dj9LIdjFBIU?t=316">5.16</a>]</li>
 	<li><strong>Immutable Clients</strong>: For <span style="font-weight: 400;">all languages [<a href="https://youtu.be/dj9LIdjFBIU?t=481">8.01</a>]</span></li>
 	<li><strong>API </strong><span style="font-weight: 400;"><strong>Timeouts and Retries, Support for XML, and other enhancements</strong> [<a href="https://youtu.be/dj9LIdjFBIU?t=566">9.26</a>]</span></li>
 	<li><strong>API Portal</strong>: Improved aesthetics and UX, new API Code Playground, pop-out code samples, and customizable table-of-contents ​[<a href="https://youtu.be/dj9LIdjFBIU?t=771">12.51</a>]</li>
 	<li><strong>Migrate to APIMatic v3</strong> [<a href="https://youtu.be/dj9LIdjFBIU?t=1134">18.54</a>]</li>
 	<li><strong>Q&amp;A</strong> [<a href="https://youtu.be/dj9LIdjFBIU?t=1261">21.01</a>]</li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3 class="">Watch the Webinar</h3>
<iframe title="Webinar - APIMatic v3: Your Biggest DX Game Changer" width="653" height="367" src="https://www.youtube.com/embed/dj9LIdjFBIU?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3 class="">Helpful APIMatic v3 Resources:&nbsp;</h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><a href="https://www.apimatic.io/blog/2021/06/whats-new-in-apimatic-v3/"><span style="font-weight: 400;">What’s New in APIMatic v3?</span></a></li>
 	<li style="font-weight: 400;" aria-level="1"><a href="https://docs.apimatic.io/account-management/migrate-to-v3/"><span style="font-weight: 400;">APIMatic v3 Migration Guide&nbsp;</span></a></li>
 	<li style="font-weight: 400;" aria-level="1"><a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan/"><span style="font-weight: 400;">Code Generator Changelog</span></a></li>
 	<li style="font-weight: 400;" aria-level="1"><a href="https://docs.apimatic.io/changelog/releasing-apimatic-v3-revamped-api-portal/"><span style="font-weight: 400;">API Portal Changelog</span></a></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">
<div>

<hr>

</div>
</div>
</div>
<p class=""><span style="font-weight: 400;">For any questions, comments, or feedback, please visit <a href="http://apimatic.io/">our website</a> or send an email to <a href="mailto:marketing@apimatic.io">marketing@apimatic.io</a>.</span></p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/apimatic-v3-your-biggest-dx-game-changer-webinar-follow-up/">APIMatic v3: Your Biggest DX Game Changer [Webinar Follow-up]</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/apimatic-v3-your-biggest-dx-game-changer-webinar-follow-up/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>OpenAPI 3.1 &#8211; What&#8217;s New, and How to Migrate to/from Other API Specs?</title>
		<link>/blog/migrating-to-and-from-openapi-3-1/</link>
					<comments>/blog/migrating-to-and-from-openapi-3-1/#respond</comments>
		
		<dc:creator><![CDATA[Ali Raza]]></dc:creator>
		<pubDate>Tue, 21 Sep 2021 12:40:43 +0000</pubDate>
				<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[OpenAPI]]></category>
		<category><![CDATA[Releases]]></category>
		<category><![CDATA[API Specification]]></category>
		<category><![CDATA[Api Specs]]></category>
		<category><![CDATA[APIMatic Supported Specs]]></category>
		<category><![CDATA[OpenAPI 3.1]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1461</guid>

					<description><![CDATA[<p>The OpenAPI Initiative announced the latest API specification format OpenAPI 3.1 earlier this year. OpenAPI 3.1 introduces multiple new functionalities and improvements compared to the previous OpenAPI versions, which is why this upgrade is expected to have a higher adoption rate.&#160; We are excited to announce the support for OpenAPI 3.1 as APIMatic’s latest supported [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/migrating-to-and-from-openapi-3-1/">OpenAPI 3.1 &#8211; What&#8217;s New, and How to Migrate to/from Other API Specs?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1461" class="elementor elementor-1461" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-2a51f48e elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="2a51f48e" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-30d8c0c6" data-id="30d8c0c6" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-6b60005c elementor-widget elementor-widget-text-editor" data-id="6b60005c" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12" data-wp-editing="1">
<p class=""><img class="aligncenter wp-image-1474" src="/wp-content/uploads/2021/12/introducing-openapi-3-1-in-apimatic-1024x538.png" alt="OpenAPI 3.1 - What's New and How to Migrate to/from Other API Specs? " width="535" height="281"></p>
<p class=""><span style="font-weight: 400;">The OpenAPI Initiative </span><a href="https://www.openapis.org/blog/2021/02/18/openapi-specification-3-1-released"><span style="font-weight: 400;">announced</span></a> <span style="font-weight: 400;">the latest API specification format </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md"><span style="font-weight: 400;">OpenAPI 3.1</span></a><span style="font-weight: 400;"> earlier this year. OpenAPI 3.1 introduces multiple new functionalities and improvements compared to the previous OpenAPI versions, which is why this upgrade is expected to have a higher adoption rate.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">We are excited to announce the support for OpenAPI 3.1 as APIMatic’s latest supported API specification format, which can be used throughout </span><a href="https://www.apimatic.io/"><span style="font-weight: 400;">APIMatic</span></a><span style="font-weight: 400;">’s solutions like API transformation, API Portal generation, and SDK generation.</span></p>

<h2 class=""><strong>How Does APIMatic Support OpenAPI 3.1?</strong></h2>
<p class=""><span style="font-weight: 400;">OpenAPI 3.1 can be used in APIMatic to perform any API transformation or to generate API portals and SDKs.</span></p>

<h3 class=""><strong>API Specification Transformation</strong></h3>
<p class=""><span style="font-weight: 400;">APIMatic supports transformations between different API specification formats. If you haven’t jumped on the OpenAPI 3.1 bandwagon yet, you can transform your existing API definition file into OAS 3.1, or convert an OpenAPI 3.1 file to any </span><a href="https://www.apimatic.io/transformer/#supported-formats"><span style="font-weight: 400;">supported format</span></a><span style="font-weight: 400;">.</span></p>

<h3 class=""><strong>API Portal and SDK Generation</strong></h3>
<p class=""><span style="font-weight: 400;">APIMatic’s Code Generator and Docs Generator also support OpenAPI 3.1 definition files. You can import your OpenAPI 3.1 file so as to generate the developer-friendly </span><a href="https://www.apimatic.io/developer-experience-portal/"><span style="font-weight: 400;">API Portal</span></a> <span style="font-weight: 400;">or to generate feature-rich SDKs in any </span><a href="https://docs.apimatic.io/generate-sdks/supported-sdk-version-dependencies/#supported-sdk-language-versions"><span style="font-weight: 400;">language supported</span></a> <span style="font-weight: 400;">by APIMatic.</span></p>

<h2 class=""><strong>Behind the Scenes of Mapping OpenAPI 3.0 to OpenAPI 3.1 in APIMatic</strong></h2>
<p class=""><span style="font-weight: 400;">Let’s dive in to see the process of how each component of OpenAPI 3.0 is actually mapped to the corresponding component in OpenAPI 3.1 with </span><a href="https://www.apimatic.io/transformer/"><span style="font-weight: 400;">APIMatic Transformer</span></a><span style="font-weight: 400;">.</span></p>
<p class=""><span style="font-weight: 400;">The major difference between both formats is related to the </span><b>Schema Object</b><span style="font-weight: 400;">. Previously, the </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md#schemaObject"><span style="font-weight: 400;">OpenAPI 3.0 Schema Object</span></a> <span style="font-weight: 400;">was an extended subset of JSON Schema Specification </span><a href="http://json-schema.org/"><span style="font-weight: 400;">Wright Draft 00</span></a><span style="font-weight: 400;">, however, the </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject"><span style="font-weight: 400;">OpenAPI 3.1 Schema Object</span></a><span style="font-weight: 400;"> is a superset of JSON Schema Specification </span><a href="https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00"><span style="font-weight: 400;">Draft 2020-12</span></a><span style="font-weight: 400;"> by default</span><span style="font-weight: 400;">.</span></p>
<p class=""><span style="font-weight: 400;">Having said that,</span><span style="font-weight: 400;"> you can also use any valid JSON Schema as a Schema Object in OpenAPI 3.1 with </span><a href="http://json-schema.org/understanding-json-schema/reference/schema.html#:~:text=A%20version%20of%20JSON%20Schema,new%20dialect%20of%20JSON%20Schema."><span style="font-weight: 400;">JSON Schema Dialect</span></a><span style="font-weight: 400;"> declared in either JSON Schema or in </span><code>jsonSchemaDialect</code><span style="font-weight: 400;">&nbsp;field in the root OpenAPI 3.1 specification, for that matter.</span></p>
<span style="font-weight: 400;">Now let’s start looking into the mapping of some of the most widely used components of OpenAPI 3.0 to OpenAPI 3.1 one by one:</span>
<h3 class=""><strong>Root Object</strong></h3>
<p class=""><span style="font-weight: 400;">OpenAPI 3.1 has two additional root components </span><code>jsonSchemaDialect</code><span style="font-weight: 400;"> and </span><code>webhooks</code><span style="font-weight: 400;">&nbsp;as shown in the diagram below.</span></p>
<p class=""><span style="font-weight: 400;">APIMatic Transformer sets <code>jsonSchemaDialect</code> </span><span style="font-weight: 400;">&nbsp;to “</span><a href="https://json-schema.org/draft/2020-12/schema"> <code>https://json-schema.org/draft/2020-12/schema</code></a><span style="font-weight: 400;">” in the exported OpenAPI 3.1 file since the exported file always contains Schema Objects which conform to JSON Schema Specification Draft 2020-12.</span></p>


<figure id="attachment_1467" aria-describedby="caption-attachment-1467" style="width: 581px" class="wp-caption aligncenter"><img class="wp-image-1467 " src="/wp-content/uploads/2021/12/root-objects.png" alt="Difference between Root Objects of OpenAPI 3.0 and OpenAPI 3.1" width="581" height="418"><figcaption id="caption-attachment-1467" class="wp-caption-text">Difference between Root Objects of OpenAPI 3.0 and OpenAPI 3.1</figcaption></figure>
<h3 class=""><strong>Info Object</strong></h3>
<p class=""><span style="font-weight: 400;">The </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#infoObject"><span style="font-weight: 400;">Info Object in OpenAPI 3.1</span></a><span style="font-weight: 400;"> is a superset of the </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md#infoObject"><span style="font-weight: 400;">Info Object in OpenAPI 3.0</span></a><span style="font-weight: 400;"> having an additional </span><span style="font-weight: 400;">summary</span><span style="font-weight: 400;"> field. The APIMatic Transformer maps the Info Object’s data from OpenAPI 3.0 to OpenAPI 3.1.</span></p>
<p class=""><span style="font-weight: 400;">Difference between Info Objects of OpenAPI 3.0 and OpenAPI 3.1</span></p>
<p class="mod-reset"><img class="aligncenter wp-image-1466 " src="/wp-content/uploads/2021/12/info-object-1.png" alt="Difference between Info Objects of OpenAPI 3.0 and OpenAPI 3.1" width="611" height="330"></p>
&nbsp;

<figure id="attachment_1465" aria-describedby="caption-attachment-1465" style="width: 605px" class="wp-caption aligncenter"><img class="wp-image-1465 " src="/wp-content/uploads/2021/12/info-object-2.png" alt="Difference between Info Objects of OpenAPI 3.0 and OpenAPI 3.1" width="605" height="265"><figcaption id="caption-attachment-1465" class="wp-caption-text">Difference between Info Objects of OpenAPI 3.0 and OpenAPI 3.1</figcaption></figure>
<h3 class=""><strong>Components Object</strong></h3>
<p class=""><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#componentsObject"><span style="font-weight: 400;">Components Object in OpenAPI 3.1</span></a><span style="font-weight: 400;"> is also a superset of the </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.0.md#componentsObject"><span style="font-weight: 400;">one in OpenAPI 3.0</span></a><span style="font-weight: 400;">, which contains an additional </span><code>pathItems</code><span style="font-weight: 400;">object. However, there is a major difference between both formats in terms of </span><span style="font-weight: 400;">Schema</span> <span style="font-weight: 400;">Objects</span><span style="font-weight: 400;"> inside </span><code>Schemas</code><span style="font-weight: 400;">, </span><code>Responses</code><span style="font-weight: 400;">, </span><span style="font-weight: 400;"><code>Parameters</code>, </span><span style="font-weight: 400;">and </span><code>RequestBodies</code><span style="font-weight: 400;"> Objects.</span></p>
<p class="mod-reset">&nbsp;</p>
<p class="mod-reset">&nbsp;</p>


<figure id="attachment_1464" aria-describedby="caption-attachment-1464" style="width: 576px" class="wp-caption aligncenter"><img class="wp-image-1464 " src="/wp-content/uploads/2021/12/component-objects.png" alt="Difference between Component Objects of OpenAPI 3.0 and OpenAPI 3.1" width="576" height="345"><figcaption id="caption-attachment-1464" class="wp-caption-text">Difference between Component Objects of OpenAPI 3.0 and OpenAPI 3.1</figcaption></figure>
<h3 class=""><strong>Schema objects</strong></h3>
<p class=""><span style="font-weight: 400;">As described above, the Schema Object in OpenAPI 3.0 is an extended subset of JSON Schema Specification Wright Draft 00 </span><span style="font-weight: 400;">that made it confusing for users as some things could follow JSON schema standards while others had to be done in OpenAPI&#8217;s style.</span><span style="font-weight: 400;"> However, the Schema Object of OpenAPI 3.1 (exported from APIMatic) is a superset of JSON Schema Specification Draft 2020-12.</span></p>
<p class=""><span style="font-weight: 400;">The new JSON Schema Draft 2020-12 has some major changes with respect to the old JSON Schema Draft 00. Thus, APIMatic Transformer converts this Schema Object from old to new JSON Schema Draft while mapping OpenAPI 3.0 to OpenAPI 3.1.</span></p>
<p class=""><span style="font-weight: 400;">Mappings of some widely used components from Json Schema Draft 00 to Draft 2020-12 are explained further:&nbsp;</span></p>

<h4 class=""><strong>Nullable flag</strong></h4>
<span style="font-weight: 400;">If your OpenAPI 3.0 Schema Object contains a </span><span style="font-weight: 400;">nullable</span><span style="font-weight: 400;"> field, it will be mapped to the “</span><span style="font-weight: 400;">null</span><span style="font-weight: 400;">” type in the list of types in OpenAPI 3.1’s Schema Object since the </span><span style="font-weight: 400;">nullable</span><span style="font-weight: 400;"> field is no longer allowed in JSON Schema Draft 2020-12 and must be declared as follows:</span>
<p class=""><strong>OpenAPI 3.0</strong></p>

<pre class=""><code class="language-yaml">requestBody: 
  content: 
    text/plain: 
      example: 3
      schema: 
        nullable: true
        type: integer
  required: true</code></pre>
<p class=""><strong>OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    text/plain:
      schema:
        type:
        - integer
        - &#039;null&#039;
        contentEncoding: int32
        contentMediaType: text/plain
      example: 3
  required: true</code></pre>
<h4 class=""><strong>ExclusiveMinimum and ExclusiveMaximum</strong></h4>
<p class=""><span style="font-weight: 400;">In OpenAPI 3.0, </span><code>exclusiveMinimum</code><span style="font-weight: 400;"> and </span><code>exclusiveMaximum</code><span style="font-weight: 400;"> are of </span><code>Boolean</code><span style="font-weight: 400;"> type and are used in conjunction with </span><code>minimum</code><span style="font-weight: 400;"> and </span><code>maximum</code><span style="font-weight: 400;">&nbsp;respectively. However, in OpenAPI 3.1, <code>exclusiveMinimum</code> and <code>exclusiveMaximum</code> are of type </span><span style="font-weight: 400;">Number</span><span style="font-weight: 400;"> and will convey the same meaning as <code>exclusiveMinimum</code> does in conjunction with minimum or <code>exclusiveMaximum</code> with <code>maximum</code> respectively.&nbsp;</span></p>
<p class=""><strong>OpenAPI 3.0</strong></p>

<pre class=""><code class="language-yaml"> requestBody: 
  content: 
    application/json: 
      schema: 
        exclusiveMaximum: true
        exclusiveMinimum: true
        maximum: 50
        minimum: 1.22
        type: number
      example: 3
  required: true</code></pre>
<p class=""><strong>OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    text/plain:
      schema:
        exclusiveMaximum: 50
        exclusiveMinimum: 1.22
        type: number
        contentEncoding: double
        contentMediaType: text/plain
      example: 3
  required: true</code></pre>
<h4 class=""><strong>Single-valued Enum and Const</strong></h4>
<p class=""><span style="font-weight: 400;">If you have a single-valued enum in your OpenAPI 3.0 file, the APIMatic Transformer maps this to a field called </span><code>const</code><span style="font-weight: 400;"> since in OpenAPI 3.1, you have the </span><span style="font-weight: 400;">const</span><span style="font-weight: 400;"> field to store the value for a single-valued enum.</span></p>
<p class=""><strong>OpenAPI 3.0</strong></p>

<pre class=""><code class="language-yaml">requestBody: 
  content: 
    text/plain:
      schema: 
        enum: 
          - 1
        type: integer
      example: 1
  required: true</code></pre>
<p class=""><strong>OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    text/plain:
      schema:
        const: 1
        type: integer
  required: true
</code></pre>
<h3 class=""><strong>File Upload</strong></h3>
<p class=""><span style="font-weight: 400;">In OpenAPI 3.0, you describe a file upload using </span><code>type</code> <span style="font-weight: 400;">set to <code>string</code> and </span><code>format</code> <span style="font-weight: 400;">set to <code>binary</code> or <code>base64</code> depending on how the file contents will be encoded. However, in OpenAPI 3.1, JSON Schema’s keywords </span><code>contentEncoding</code> <span style="font-weight: 400;">and </span><code>contentMediaType</code> <span style="font-weight: 400;">take care of how the contents will be encoded.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">Moreover, you don’t even need to use the Schema Object for a binary file in a POST request.</span></p>
<p class=""><strong>Binary File Upload in OpenAPI 3.0</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    application/octet-stream:
      schema:
        type: string
        format: binary</code></pre>
<p class=""><strong>Binary File Upload in OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    application/octet-stream: {}
</code></pre>
<p class=""><strong>Upload via Multipart Request in OpenAPI 3.0</strong></p>

<pre class=""><code class="language-yaml">requestBody:
content:
  multipart/form-data:
    schema:
      type: object
      properties:
        userId:
          type: integer
        fileName:
          type: string
          format: binary</code></pre>
<p class=""><strong>Upload via Multipart Request in OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    multipart/form-data:
      schema:
        type: object
        properties:
          userId:
            type: integer
          fileName:
            type: string
            contentMediaType: application/octet-stream</code></pre>
<p class=""><strong>Upload Image with base64 encoding in OpenAPI 3.0</strong></p>

<pre><code class="language-yaml">requestBody:
  content:
    image/png:
      schema:
        type: string
        format: base64</code></pre>
<p class=""><strong>Upload Image with base64 encoding in OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    image/png:
      schema:
        type: string
        format: base64</code></pre>
<h3 class=""><strong>Other Components of OpenAPI 3.0</strong></h3>
<span style="font-weight: 400;">All other components of OpenAPI 3.0 are mapped to OpenAPI 3.1 in APIMatic without any change in them.</span>
<h2 class=""><strong>Additional Changes in OpenAPI 3.1</strong></h2>
<p class="">OpenAPI 3.1 also offers additional updates like multiple examples and reference objects:</p>

<h3 class=""><strong>Multiple Examples inside Schema Object</strong></h3>
<p class=""><span style="font-weight: 400;">OpenAPI 3.0 allows multiple examples alongside Schema Object (i.e. as a sibling to Schema Object) but does not allow multiple examples inside Schema Object. Fortunately, the support for multiple examples inside Schema Object has been added in OpenAPI 3.1. But the structure of these multiple examples would be different from what we use for the examples alongside the Schema Object.</span></p>
<p class=""><span style="font-weight: 400;">Multiple examples can be defined as a list of examples as shown below, it is recommended to use examples rather than a single example in Schema Object for OpenAPI 3.1.</span></p>
<p class=""><strong>Example inside Schema Object for OpenAPI 3.0</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    text/plain:
      schema:
        type: integer
        example: 2</code></pre>
<p class=""><strong>Multiple Examples inside Schema Object for OpenAPI 3.1</strong></p>

<pre class=""><code class="language-yaml">requestBody:
  content:
    text/plain:
      schema:
        type: integer
        examples:
        - 1
        - 2
        - 3</code></pre>
<h3 class=""><strong>Reference Object</strong></h3>
<p class=""><span style="font-weight: 400;">In OpenAPI 3.1, <code>summary</code> and <code>description</code> keywords have been introduced in </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#reference-object"><span style="font-weight: 400;">Reference Object</span></a><span style="font-weight: 400;">. These <code>summary</code> and <code>description</code> fields by default should override the <code>summary</code> and <code>description</code> fields of the referenced component respectively and if the referenced component does not allow summary or description, the corresponding field will have no effect.</span></p>
<p class=""><span style="font-weight: 400;">For additional changes in OpenAPI 3.1, you can visit the </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#openapi-specification"><span style="font-weight: 400;">official OpenAPI 3.1 specification</span></a><span style="font-weight: 400;">.</span></p>

<h2 class=""><strong>Transforming OpenAPI 3.0 Files to OpenAPI 3.1 via APIMatic</strong></h2>
<p class=""><span style="font-weight: 400;">APIMatic takes care of all of these mappings behind the scenes. To actually transform a file to OpenAPI 3.1, is just a matter of a few steps. We will be using a sample Customer API</span><span style="font-weight: 400;">&nbsp;in <a href="https://github.com/aliraza1231/files/blob/main/CustomerAPI.yaml">OpenAPI 3.0</a> format for this example.</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Go to the </span><a href="https://www.apimatic.io/dashboard"><span style="font-weight: 400;">APIMatic Dashboard</span></a> <span style="font-weight: 400;">and click on </span><b>Transform API</b><span style="font-weight: 400;">.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Import the OpenAPI 3.0 specification linked above.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Select the export format as </span><b>OpenAPI 3.1</b><span style="font-weight: 400;">.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Click on </span><b>Convert.</b></li>
</ol>
<figure id="attachment_1477" aria-describedby="caption-attachment-1477" style="width: 1920px" class="wp-caption aligncenter"><img class="size-full wp-image-1477" src="/wp-content/uploads/2021/12/apimatic-transformer-openapi3-1.gif" alt="Transforming a OpenAPI 3.0 file to OpenAPI 3.1 in APIMatic" width="1920" height="1080"><figcaption id="caption-attachment-1477" class="wp-caption-text">Transforming a OpenAPI 3.0 file to OpenAPI 3.1 in APIMatic</figcaption></figure>
<p class=""><span style="font-weight: 400;">Yay! Great, you have successfully transformed an OpenAPI 3.0 file to the latest OpenAPI 3.1 format. You can look at the </span><a href="https://github.com/aliraza1231/files/blob/main/CustomerAPI31.yaml"><span style="font-weight: 400;">exported OpenAPI v3.1 specification here</span></a><span style="font-weight: 400;">.</span></p>

<h2 class=""><strong>To Summarize</strong></h2>
<p class=""><span style="font-weight: 400;">The features and improvements offered in OpenAPI 3.1 can open many avenues for API developers in the future as more products and services will move to support OAS 3.1. APIMatic offers a quick solution with </span><a href="https://www.apimatic.io/transformer/"><span style="font-weight: 400;">API Transformer</span></a> <span style="font-weight: 400;">to convert any API definition into OpenAPI 3.1 format within seconds so you can fully utilize all tools supporting this format, and eliminate the time spent on rewriting API definitions in new formats.</span></p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/migrating-to-and-from-openapi-3-1/">OpenAPI 3.1 &#8211; What&#8217;s New, and How to Migrate to/from Other API Specs?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/migrating-to-and-from-openapi-3-1/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Using Optional and Nullable Properties in API Requests</title>
		<link>/blog/using-optional-and-nullable-properties-in-api-requests/</link>
					<comments>/blog/using-optional-and-nullable-properties-in-api-requests/#respond</comments>
		
		<dc:creator><![CDATA[Maryam Adnan]]></dc:creator>
		<pubDate>Thu, 16 Sep 2021 09:00:51 +0000</pubDate>
				<category><![CDATA[API Documentation]]></category>
		<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[OpenAPI]]></category>
		<category><![CDATA[REST APIs]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[nullable]]></category>
		<category><![CDATA[OpenApi]]></category>
		<category><![CDATA[optional]]></category>
		<category><![CDATA[optional/nullable]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1436</guid>

					<description><![CDATA[<p>An essential part of an API endpoint is its parameters. While certain parameters must be included in each request, there may be some parameters that may or not may not be included in the request. The optional property was introduced to create unique combinations of such parameters in API requests. In other cases, some parameters [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/using-optional-and-nullable-properties-in-api-requests/">Using Optional and Nullable Properties in API Requests</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1436" class="elementor elementor-1436" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-4ea2926a elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="4ea2926a" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1c6630db" data-id="1c6630db" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-274d9c90 elementor-widget elementor-widget-text-editor" data-id="274d9c90" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="aligncenter wp-image-1451" src="/wp-content/uploads/2021/12/Using-OptionalNullable-Properties-in-API-Requests_Blog_Facebook-1-e1631787822746-1024x436.png" alt="Using Optional and Nullable Properties in API Requests | APIMatic Blog" width="623" height="265"></p>
<p class=""><span style="font-weight: 400;">An essential part of an API endpoint is its parameters. While certain parameters must be included in each request, there may be some parameters that may or not may not be included in the request. The </span><span style="font-weight: 400;"><code>optional</code> </span><span style="font-weight: 400;">property was introduced to create unique combinations of such parameters in API requests. In other cases, some parameters may be allowed to hold a null value, which is catered via <code>nullable</code> properties that help in coping with the errors if null is not handled correctly.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">While all endpoint parameter types (query, body, form, and path) can have optional nullable properties, we’ll be focusing on the optional nullable properties of a model’s fields being passed as request parameters in a </span><b>client SDK</b><span style="font-weight: 400;">.&nbsp;</span></p>
<p class=""><i><span style="font-weight: 400;">This blog is the first part of a series on how optional and nullable properties can be used flexibly and in multiple combinations to cater to each parameter of your API requests. </span></i></p>

<h2 class=""><strong>Required, Optional, and Nullable Properties in OpenAPI</strong></h2>
<p class=""><span style="font-weight: 400;">The </span><a href="https://github.com/OAI/OpenAPI-Specification:"><span style="font-weight: 400;">OpenAPI Specification</span></a> <span style="font-weight: 400;">is a simple yet powerful way of describing RESTful APIs, in a machine and human-readable format, using JSON or YAML.</span><span style="font-weight: 400;"> OpenAPI has some examples of Uber’s API listed down </span><a href="https://github.com/OAI/OpenAPI-Specification/blob/main/examples/v2.0/json/uber.json"><span style="font-weight: 400;">in their repository</span></a> <span style="font-weight: 400;">to help understand how the endpoint is specified with OpenAPI.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">The OpenAPI specification allows defining parameters for an operation or path. Parameters can be of different types i.e header, query, cookies, path parameters.</span></p>

<h3 class=""><b>Required Parameters</b></h3>
<p class=""><span style="font-weight: 400;">One of the attributes that can be defined for these parameters is</span><b> “required”</b><span style="font-weight: 400;"> which simply means whether it is a </span><i><span style="font-weight: 400;">required </span></i><span style="font-weight: 400;">parameter or an </span><i><span style="font-weight: 400;">optional </span></i><span style="font-weight: 400;">one. Let&#8217;s take a look at an example of Uber’s </span><a href="https://developer.uber.com/docs/riders/references/api/v1.2/products-get"><span style="font-weight: 400;">Get Products</span></a><span style="font-weight: 400;"> endpoint specification:</span></p>

<pre class=""><code class="language-json">&quot;paths&quot;: {
	&quot;/products&quot;: {
  	&quot;get&quot;: {
        ...
        &quot;parameters&quot;: [
            {
                &quot;name&quot;: &quot;latitude&quot;,
                &quot;in&quot;: &quot;query&quot;,
                &quot;description&quot;: &quot;Latitude component of location.&quot;,
                &quot;required&quot;: true,
                &quot;style&quot;: &quot;form&quot;,
                ...
            },
            {
                &quot;name&quot;: &quot;longitude&quot;,
                &quot;in&quot;: &quot;query&quot;,
                &quot;description&quot;: &quot;Longitude component of location.&quot;,
                &quot;required&quot;: true,
                &quot;style&quot;: &quot;form&quot;,
                ...
            }
    	]
  	    }
      }
  }</code></pre>
<p class=""><span style="font-weight: 400;">You can get more details </span><span style="font-weight: 400;">regarding </span><a href="https://swagger.io/docs/specification/describing-parameters/"><span style="font-weight: 400;">Required and Optional Parameters</span></a> <span style="font-weight: 400;">in the official OAS document.</span></p>

<h3 class=""><b>Nullable Parameters</b></h3>
<p class=""><span style="font-weight: 400;">OpenAPI supports values of data types to be null. To specify, one can use the </span><b>“</b><span style="font-weight: 400;">nullable: true</span><b>” </b><span style="font-weight: 400;">property while defining a data type in OAS version 3.0.0. Let&#8217;s look at the definition of the </span><code>Profile</code> <span style="font-weight: 400;">schema that is defined for the response that we receive for the endpoint </span><a href="https://developer.uber.com/docs/riders/references/api/v1.2/me-get#resource"><span style="font-weight: 400;">User Profile</span></a>. <span style="font-weight: 400;">The attribute </span><code>promo_code</code><span style="font-weight: 400;"> is nullable here:</span></p>

<pre class=""><code class="language-json">&quot;Profile&quot;: {
	&quot;title&quot;: &quot;Profile&quot;,
	&quot;required&quot;: [
  	&quot;middle_name&quot;,
  	&quot;rider-id&quot;
	],
	&quot;type&quot;: &quot;object&quot;,
	&quot;properties&quot;: {
        &quot;first_name&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;description&quot;: &quot;First name of the Uber user.&quot;
        },
        ...
        &quot;promo_code&quot;: {
            &quot;type&quot;: &quot;string&quot;,
            &quot;nullable&quot;: &quot;true&quot;,
            &quot;description&quot;: &quot;Promo code of the Uber user.&quot;
        }
    }
}</code></pre>
<p class=""><span style="font-weight: 400;">For more detail, please refer to the </span><a href="https://swagger.io/docs/specification/data-models/data-types/"><span style="font-weight: 400;">Null Property</span></a> <span style="font-weight: 400;">section in the OAS document.</span></p>

<h2 class=""><strong>Optional and Nullable Properties in APIMatic&#8217;s Client SDKs</strong></h2>
<p class=""><span style="font-weight: 400;"><a href="https://apimatic.io/">APIMatic</a> is a developer experience platform that focuses on increasing your API’s adoption with comprehensive documentation, multi-language SDKs, and much more. The SDKs are autogenerated for your API and contain support for optional and nullable properties, that are translated from your OpenAPI specification file. </span></p>
<p class=""><span style="font-weight: 400;">The client SDK is built up of a multitude of endpoints sending data from client to server with the help of parameters. Those parameters can be sent in different parts of a request and hence they are distinguished on the location in which they are sent. Endpoint parameters can be of four types:</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Query parameters</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Path parameters&nbsp;</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Body parameters</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Form parameters</span></li>
</ol>
<p class=""><span style="font-weight: 400;">These parameters can have multiple properties associated with them like their schema, description, summary, and more. </span><b>Required </b><span style="font-weight: 400;">and </span><b>nullable </b><span style="font-weight: 400;">are two of those properties that can be set for these parameters.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">During client and server communication, data is serialized from object to JSON string and gets deserialized from JSON string to an object. The data being passed in the parameters can be a simple field, or a model containing multiple fields. Model fields can have </span><em>required</em> <span style="font-weight: 400;">and </span><em>nullable</em> <span style="font-weight: 400;">properties in the same way as a request parameter itself. Regardless of the type of data being passed, </span><em>optional</em> <span style="font-weight: 400;">and </span><em>nullable</em> <span style="font-weight: 400;">is in context to the representation of that data in JSON string during serialization.</span></p>
<p class=""><span style="font-weight: 400;">An</span><strong> o</strong><span style="font-weight: 400;"><strong>ptional</strong> </span><span style="font-weight: 400;">property means that it may or may not be present in the resultant JSON string, while a </span><span style="font-weight: 400;"><strong>required</strong> </span><span style="font-weight: 400;">property means that it will always be present in the JSON string. </span><span style="font-weight: 400;"><strong>Nullable</strong> </span><span style="font-weight: 400;">means that if the property is present in JSON, it can hold a null value, and </span><strong>non-nullable</strong><span style="font-weight: 400;"> means that the value of that property cannot be null in the JSON string. Therefore, we can formulate a total of four combinations for this:</span></p>

<h3><b>1. Optional Nullable</b></h3>
<p class=""><span style="font-weight: 400;">If a field (whether it is a parameter or a part of a model) is uninitialized, i.e., not specified, then </span><span style="font-weight: 400;">it should be ignored in the JSON string during serialization. If it is initialized and assigned a null value explicitly, then it should be represented in the JSON string.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">Let&#8217;s consider the example of a model/definition </span><code>Profile</code><span style="font-weight: 400;"> which consists of the following fields:</span></p>

<pre class=""><code class="language-c">Profile
{
   string picture;
   string first_name;
   string middle_name;
   string last_name;
   string uuid;
   string rider_id;
   string email;
   bool mobile_verified;
   string promo_code;
}</code></pre>
<p class=""><span style="font-weight: 400;">Its OpenAPI specification looks like this:</span></p>

<pre class=""><code class="language-json">&quot;Profile&quot;: {
	&quot;title&quot;: &quot;Profile&quot;,
	&quot;required&quot;: [&quot;middle_name&quot;, &quot;rider-id&quot;],
	&quot;type&quot;: &quot;object&quot;,
	&quot;properties&quot;: {
  	&quot;first_name&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;description&quot;: &quot;First name of the Uber user.&quot;
  	},
  	&quot;last_name&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;description&quot;: &quot;Last name of the Uber user.&quot;
  	},
  	&quot;middle_name&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;nullable&quot;: &quot;true&quot;,
    	&quot;description&quot;: &quot;Last name of the Uber user.&quot;
  	},
  	&quot;email&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;description&quot;: &quot;Email address of the Uber user&quot;
  	},
        &quot;mobile_verified&quot;: {
    	&quot;type&quot;: &quot;boolean&quot;,
    	&quot;description&quot;: &quot;Mobile verification of Uber user&quot;
  	},
  	&quot;rider-id&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;description&quot;: &quot;Rider id of the Uber user&quot;
  	},
  	&quot;picture&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;description&quot;: &quot;Image URL of the Uber user.&quot;
  	},
  	&quot;promo_code&quot;: {
    	&quot;type&quot;: &quot;string&quot;,
    	&quot;nullable&quot;: &quot;true&quot;,
    	&quot;description&quot;: &quot;Promo code of the Uber user.&quot;
  	}
    }
}</code></pre>
<p class=""><span style="font-weight: 400;">During the instantiation of <code>Profile</code>, if &nbsp;</span><code>promo_code</code><b>&nbsp;</b><span style="font-weight: 400;">is initialized with a null value in the client SDK and sent in the request, the resultant JSON string after serialization will hold its null value as its nullable property:</span></p>

<pre class=""><code class="language-json">{
    &quot;picture&quot;: &quot;https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg&quot;,
    &quot;first_name&quot;: &quot;Uber&quot;,
    ...
    &quot;mobile_verified&quot;: true,
    &quot;promo_code&quot;: &quot;null&quot;
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><code>promo_code</code><b>&nbsp;</b><span style="font-weight: 400;">is uninitialized during the <code>Profile</code> instantiation for the request, the resultant JSON will ignore <code>promo_code</code>, as it was an </span><b>optional </b><span style="font-weight: 400;">field.</span></p>

<pre class=""><code class="language-json">{
    &quot;picture&quot;: &quot;https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg&quot;,
    &quot;first_name&quot;: &quot;Uber&quot;,
    ...
    &quot;mobile_verified&quot;: true,
}</code></pre>
<p class=""><span style="font-weight: 400;">If &nbsp;</span><code>promo_code</code><b>&nbsp;</b><span style="font-weight: 400;">is initialized with a proper value during the <code>Profile</code> instantiation for sending it in the request, the resultant JSON will include the field as specified:</span></p>

<pre class=""><code class="language-json">{
    &quot;picture&quot;: &quot;https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg&quot;,
    &quot;first_name&quot;: &quot;Uber&quot;,
    ...
    &quot;mobile_verified&quot;: true,
    &quot;promo_code&quot;: &quot;uberd340ue&quot;
}</code></pre>
<h3><b>2. Optional Non-Nullable</b></h3>
<p class=""><span style="font-weight: 400;">If a field (whether it’s a parameter or a part of the model) is uninitialized, i.e., not specified, then </span><span style="font-weight: 400;">it should be ignored in JSON string during serialization but as it can not be initialized with a null value, hence we should ignore it JSON. Let’s look at the </span><code>Profile</code> <span style="font-weight: 400;">JSON schema again, where the attribute </span><code>picture</code><b>&nbsp;</b><span style="font-weight: 400;">is optional non-nullable as specified in the OAS of Profile.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">If </span><code>picture</code><span style="font-weight: 400;">&nbsp;is initialized with a non-null value when sending it in a request, the resultant JSON string will look like this:</span></p>

<pre class=""><code class="language-json">{
    &quot;picture&quot;: &quot;https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg&quot;,
    &quot;first_name&quot;: &quot;Uber&quot;,
    &quot;middle_name&quot;: &quot;null&quot;,
    &quot;last_name&quot;: &quot;Developer&quot;,
    &quot;uuid&quot;: &quot;f4a416e3-6016-4623-8ec9-d5ee105a6e27&quot;,
     ...
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><b><code>picture</code>&nbsp;</b><span style="font-weight: 400;">is initialized with a <strong>null</strong> value, it can be ignored in the resultant JSON as it is an optional attribute.</span></p>

<pre class=""><code class="language-json">{
    &quot;first_name&quot;: &quot;Uber&quot;,
    &quot;middle_name&quot;: &quot;null&quot;,
    &quot;last_name&quot;: &quot;Developer&quot;,
    &quot;uuid&quot;: &quot;f4a416e3-6016-4623-8ec9-d5ee105a6e27&quot;,
     ...
}</code></pre>
<h3 class=""><b>3. Required Nullable</b></h3>
<p class=""><span style="font-weight: 400;">Required Nullable attributes will always become part of the resultant JSON string as they are required. It will always be included in the JSON, whether it has a null or non-null value.&nbsp;</span><span style="font-weight: 400;">Let&#8217;s consider the </span><code>middle_name</code><b>&nbsp;</b><span style="font-weight: 400;">as a </span><strong>required nullable </strong><span style="font-weight: 400;">attribute.</span></p>
<p class=""><span style="font-weight: 400;">If </span><code>middle_name</code><b>&nbsp;</b><span style="font-weight: 400;">is initialized with a null value or uninitialized in the request, its JSON output will be:</span></p>

<pre class=""><code class="language-">{
   ...
    &quot;middle_name&quot;: &quot;Software&quot;,
    &quot;last_name&quot;: &quot;Developer&quot;,
    &quot;uuid&quot;: &quot;f4a416e3-6016-4623-8ec9-d5ee105a6e27&quot;,
   ...
}</code></pre>
<p class=""><span style="font-weight: 400;">If </span><code>middle_name</code><b> </b><span style="font-weight: 400;">is initialized with a proper value, the resultant JSON will be:</span></p>

<pre class=""><code class="language-json">{
    ...
    &quot;middle_name&quot;: &quot;faloola&quot;,
    &quot;last_name&quot;: &quot;Developer&quot;,
    &quot;uuid&quot;: &quot;f4a416e3-6016-4623-8ec9-d5ee105a6e27&quot;,
    ...
}</code></pre>
<h3><b>4. Required Non-Nullable</b></h3>
<p class=""><span style="font-weight: 400;">Required Non-Nullable attributes are also a </span><b>must </b><span style="font-weight: 400;">in JSON string during serialization. A null value is not allowed to be specified as <em>required</em> so it cannot be ignored.&nbsp;</span></p>
<p class=""><span style="font-weight: 400;">The </span><code>rider_id</code><b>&nbsp;</b><span style="font-weight: 400;">is a non-nullable attribute in the </span><span style="font-weight: 400;">Profile </span><span style="font-weight: 400;">schema. The null value cannot be specified in this case, and with a non-null value its resultant JSON will be:</span></p>

<pre class=""><code class="language-json">{
    &quot;picture&quot;: &quot;https://d1w2poirtb3as9.cloudfront.net/f3be498cb0bbf570aa3d.jpeg&quot;,
    &quot;first_name&quot;: &quot;Uber&quot;,
    &quot;middle_name&quot;: &quot;null&quot;,
    &quot;last_name&quot;: &quot;Developer&quot;,
    &quot;uuid&quot;: &quot;f4a416e3-6016-4623-8ec9-d5ee105a6e27&quot;,
    &quot;rider_id&quot;: &quot;8OlTlUG1TyeAQf1JiBZZdkKxuSSOUwu2IkO0Hf9d2HV52Pm25A0NvsbmbnZr85tLVi-s8CckpBK8Eq0Nke4X-no3AcSHfeVh6J5O6LiQt5LsBZDSi4qyVUdSLeYDnTtirw==&quot;,
    &quot;email&quot;: &quot;uberdevelopers@gmail.com&quot;,
    &quot;mobile_verified&quot;: true,
    &quot;promo_code&quot;: &quot;uberd340ue&quot;
}</code></pre>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h2 class=""><strong>Conclusion</strong></h2>
<p class=""><span style="font-weight: 400;">It is entirely up to you how you incorporate the optional and nullable properties in your API calls. It is essential to handle null reference exceptions being thrown to the end-user, to avoid any unpleasant experience with your API. Learn more about what APIMatic offers for a comprehensive <a href="https://www.apimatic.io/features/">developer experience</a> and how you can generate feature-packed <a href="https://www.apimatic.io/account/register">SDKs with your API</a> in just a few clicks. Stay tuned for more blogs that go into detail on how optional and nullable properties can be implemented in Java, C#, Python, Ruby, PHP, and TypeScript.</span></p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/using-optional-and-nullable-properties-in-api-requests/">Using Optional and Nullable Properties in API Requests</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/using-optional-and-nullable-properties-in-api-requests/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>The Great SDK Battle: Build vs Buy</title>
		<link>/blog/the-great-sdk-battle-build-vs-buy/</link>
					<comments>/blog/the-great-sdk-battle-build-vs-buy/#respond</comments>
		
		<dc:creator><![CDATA[Mehdi Raza Jaffery]]></dc:creator>
		<pubDate>Wed, 08 Sep 2021 08:10:28 +0000</pubDate>
				<category><![CDATA[APIMATIC]]></category>
		<category><![CDATA[CodeGen]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Code Generation]]></category>
		<category><![CDATA[Sdks]]></category>
		<guid isPermaLink="false">https://apimatic.io/blog/?p=1407</guid>

					<description><![CDATA[<p>In this API-driven era, offering just an API won’t cut it anymore. The APIs need proper documentation, helping code samples, and SDKs to ensure that the end-user quickly gets to the first Hello World. While an SDK is a “make-it-or-break-it” deal for your API, it is just as difficult to get it right. Engineering the [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/the-great-sdk-battle-build-vs-buy/">The Great SDK Battle: Build vs Buy</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1407" class="elementor elementor-1407" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-1ed8f23b elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="1ed8f23b" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-694f00b6" data-id="694f00b6" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4dcf0310 elementor-widget elementor-widget-text-editor" data-id="4dcf0310" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p class=""><img class="wp-image-1431 aligncenter" src="/wp-content/uploads/2021/12/build-vs-buy-1024x367.png" alt="SDKs: Build vs Buy" width="700" height="251"></p>
<p class=""><span style="font-weight: 400;">In this API-driven era, offering just an API won’t cut it anymore. The APIs need proper documentation, helping code samples, and SDKs to ensure that the end-user quickly gets to the first </span><i><span style="font-weight: 400;">Hello World</span></i><span style="font-weight: 400;">. While an SDK is a “make-it-or-break-it” deal for your API, it is just as difficult to get it right. Engineering the SDK is only the first step of this cycle. Once your SDK is published, it needs to be maintained consistently with each bug fix, feature, or new API version.</span></p>
<p class=""><em><span style="font-weight: 400;">This blog is the first part of a series on what goes behind SDK creation and maintenance.&nbsp;</span></em></p>

<h2 class=""><b>What to Look Out For While Creating SDKs?</b></h2>
<p class=""><span style="font-weight: 400;">From an engineering perspective, each phase of building an SDK is crucial and comes with its own set of challenges. In time-critical situations, you may overlook some issues that can impact your SDK’s usability and maintainability in the long run. Hence, while creating SDKs, you need to address these issues for </span><b>each API, in each language</b><span style="font-weight: 400;">:</span></p>

<h3 class=""><b>&nbsp;Step 1: Designing an SDK</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><b>Structure: <span style="font-weight: 400;">Need to design SDKs for the user, for future extensibility.</span></b></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Language versions:</b><span style="font-weight: 400;"> What min/max versions to support? What are the version-specific issues and your upgrade policy?</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Dependencies: <span style="font-weight: 400;">This includes fixes, workarounds, limitations, quality, upgrade policy, language support.</span></b></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Guidelines: <span style="font-weight: 400;">The design, linting, and static analysis guidelines to apply throughout the codebase.</span></b></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3 class=""><b>Step 2: Implementing the SDK</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Translate schema to concrete types</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Implementing API calls</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Wrap HTTP implementation in an HTTP layer as HTTP clients come and go, so you may consider a middleware arch</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle cancellation of API calls</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle API/transient errors and recover gracefully</span><span style="font-weight: 400;">&nbsp;(timeout, retries)</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle concurrency via thread-safe calls or chaining</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle response caching</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handle API throttling</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Create interfaces for extension</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Log important events (integrate into system logging)</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3 class=""><b>Step 3: Testing the SDK</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Testing all parts of the SDK code</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Cross-platform/version testing against different language versions, OSes</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Integration tests (end-to-end testing of SDKs)</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Testing your code generator (if you&#8217;re using one)</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3><b>Step 4: Writing SDK Reference</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Writing getting started guides</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Writing usage examples for every endpoint</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Creating a reference website for the SDK user</span></li>
 	<li aria-level="1"><span style="font-weight: 400;">Creating sample applications (in addition to the code samples per endpoint) to get started quickly</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<h3 class=""><b>Step 5: Packaging/Publishing the SDKs</b></h3>
<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Publishing packages on package repositories</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Recreating bugs reports</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Handling customer issues and feedback related to SDK on GitHub or other forums</span></li>
</ul>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<p class=""><span style="font-weight: 400;">The engineering effort required to maintain the SDK program explodes with the number of supported languages, as all the steps mentioned above for creating <b>one</b> SDK will need to be done for <b>each API and each language, every time</b>. Careful planning can reduce some of this cost, but the perpetual maintenance cost will still exist.</span></p>
<p class=""><img class="aligncenter wp-image-1426 " src="/wp-content/uploads/2021/12/SDK-1024x676.png" alt="SDK Maintenance" width="381" height="252"></p>

<h2 class=""><b>Why Do SDKs Need Maintenance?</b></h2>
<p class=""><span style="font-weight: 400;">Once you’ve successfully implemented and published your SDK, the endless cycle of maintenance begins. Maintenance is required from an engineering as well as a business perspective, hence making the cost of maintenance much higher than the development cost, as again, this applies to the SDKs of <strong>each language per API</strong>.</span></p>

<h3 class=""><b>Maintenance From Engineering Perspective</b></h3>
<p class=""><span style="font-weight: 400;">If you think creating an SDK is enough, updating it is much more resource and time-intensive. Technology and APIs are continuously evolving, and SDKs need to keep up with them. You will need to update your SDKs (on time!) for the following reasons:</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><b>Updates to the API</b><span style="font-weight: 400;">: With every update to the API, the SDKs need to be updated for all languages simultaneously or the SDKs will lag behind the API updates.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>New language or framework versions: </b><span style="font-weight: 400;">This occurs more often than you realize and is a major operational burden.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Language ecosystem evolution:</b><span style="font-weight: 400;"> New IDEs, new build tools, major fragmentation in the ecosystem requires constant maintenance.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>New dependency versions</b><span style="font-weight: 400;">: This results in more fixes, updates, security fixes, development of supported features.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Bug fixes in the SDK:</b><span style="font-weight: 400;"> You need to test and fix bugs continuously to ensure no blockers occur at the user’s end, negatively impacting your API’s experience.</span></li>
</ol>
<h3 class=""><b>Maintenance From Business POV</b></h3>
<p class=""><span style="font-weight: 400;">Apart from the high maintenance required by your SDKs to tackle engineering concerns, you also need to consider business-oriented issues that may affect your SDK delivery and performance:&nbsp;&nbsp;</span></p>

<ol class="">
 	<li style="font-weight: 400;" aria-level="1"><b>Lock-in on internal SDK team: </b><span style="font-weight: 400;">A custom internal tool or process that requires maintenance and a lot of engineering time/resources.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Speed of update:</b><span style="font-weight: 400;"> SDKs and documentation lagging behind API releases unless you write a general-purpose code generator.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Opportunity cost:</b><span style="font-weight: 400;"> Can other areas in your API program use this engineering time?</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Time-to-market:</b><span style="font-weight: 400;"> If you&#8217;re just starting with building SDKs, when will they be available and what do you do in the meantime?</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Operational burden:</b><span style="font-weight: 400;"> Reduces developer velocity and happiness over time due to fighting fires, adds project risk to API program, increases costs for the organization.</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Operational excellence:</b><span style="font-weight: 400;"> Can you achieve the same level of quality and attention to detail compared to a company that exists only for creating SDKs?</span></li>
 	<li style="font-weight: 400;" aria-level="1"><b>Keeping the SDK program running:</b><span style="font-weight: 400;"> Maintaining SDKs takes time and energy. Building it isn’t where most of the expense lies. Instead, that comes with running and maintaining complicated processes and tools behind the SDK program.</span></li>
</ol>
<div class="row bg-editor-hr-wrap">
<div class="col-md-12 col-xs-12 col-sm-12">

<hr>

</div>
</div>
<p class=""><span style="font-weight: 400;">According to </span><a href="https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm"><span style="font-weight: 400;">bls.gov</span></a><span style="font-weight: 400;">, the median salaries in 2020 were as follows:</span></p>

<ul class="">
 	<li><span style="font-weight: 400;">Developer: $110,140 per year</span></li>
 	<li><span style="font-weight: 400;">Tester: $110,140 per year</span></li>
 	<li><span style="font-weight: 400;">Technical Writer: $74,650 per</span></li>
</ul>
<p class=""><span style="font-weight: 400;">To make things simple, let’s assume that building a <strong>single SDK for 1 API in just one language</strong> (including research, documentation, and testing) takes 4 weeks to build. This makes the upfront cost around $22,687. Now add in the maintenance time to 2-3 days per month, and SDK maintenance can go up to $29,089, bringing the total to $51,776. Hence, building and maintaining <strong>a single SDK</strong> in a fairytale situation, without any hiccups, can cost around $52,000.</span></p>
<p class=""><span style="font-weight: 400;">Now imagine if you&#8217;re building SDKs for 8 languages for 10 APIs, this will skyrocket this figure to almost $4M.&nbsp;</span></p>


<figure id="attachment_1434" aria-describedby="caption-attachment-1434" style="width: 601px" class="wp-caption aligncenter"><img class="wp-image-1434 " src="/wp-content/uploads/2021/12/TotalCost-01-2-1024x576.png" alt="Total Cost to Build 1 SDK in 1 Language" width="601" height="338"><figcaption id="caption-attachment-1434" class="wp-caption-text">Total Cost to Build 1 SDK in 1 Language per API</figcaption></figure>
<h2 class=""><b>APIMatic as a Code Generator</b></h2>
<p class=""><span style="font-weight: 400;">You can choose to address all of the aforementioned issues yourself and write the SDK code by hand, or even try to solve your problems using an in-house code generator, but the process itself is quite hard and can take up to years to streamline. Not to forget the time and resource overhead involved. However, </span><a href="https://apimatic.io/"><span style="font-weight: 400;">APIMatic</span></a> <span style="font-weight: 400;">can handle these issues automatically at the back-end for you, while you focus on building new solutions. APIMatic’s flagship code generator creates SDKs for multiple languages, including:</span></p>

<ul class="">
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">PHP&nbsp;</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Ruby</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Python</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">C# (.NET)</span></li>
 	<li style="font-weight: 400;" aria-level="1"><span style="font-weight: 400;">Java</span></li>
 	<li aria-level="1">Typescript (coming soon)</li>
</ul>
<p class=""><span style="font-weight: 400;">These SDKs are featured packed with thread-safe configurations, retries, logging, and more. The SDKs accurately map your API definition files into helper classes, model classes, exception classes, and controllers. APIMatic also creates comprehensive, language-specific guides with the SDKs that contain tailored tutorials based on your language and popular IDEs to help users easily get started with the SDK in their applications. For more detail, read here on </span><a href="https://docs.apimatic.io/generate-sdks/overview-sdks/"><span style="font-weight: 400;">APIMatic SDKs</span></a>.</p>
<p class=""><span style="font-weight: 400;">APIMatic creates SDKs from </span><b>OpenAPI 2.0 and 3.0, API Blueprint</b><span style="font-weight: 400;">, </span><b>RAML</b><span style="font-weight: 400;"> as well as several other popular </span><a href="https://www.apimatic.io/transformer/"><span style="font-weight: 400;">API specification formats</span></a><span style="font-weight: 400;">.</span></p>

<h3 class=""><b>Reduce Time to Market</b></h3>
<p class=""><span style="font-weight: 400;">Internal SDK programs can become costly to maintain over time due to churn (new API versions, language features, and library versions or API program engineering turnover). If you are forking open-source code generators, it means you will be maintaining all the custom templates and syncing your project with the upstream for fixes/bugs perpetually. Also, there is no customer support.</span></p>
<p class=""><span style="font-weight: 400;">APIMatic significantly cuts down on costs and time for creating and maintaining SDKs in any language. You only bring in your API specification file and roll out your updated</span><span style="font-weight: 400;"> SDKs in minutes, rather than weeks, months, or years.&nbsp;</span></p>

<h3 class="">Automate SDK Generation and Maintenance</h3>
<p class="">APIMatic offers programmatic access to their flagship Code Generator, which allows integrating the autogeneration of SDKs directly into your CI/CD pipelines. So every time the API is updated, the corresponding updated SDKs are automatically generated, without any manual interference. Learn more about how APIMatic offers <a href="https://www.apimatic.io/continuous-code-generation">CodeGen-as-a-Service</a>.</p>

<h3 class=""><b>Ensure Robustness with Battle-Tested SDKs</b></h3>
<p class=""><span style="font-weight: 400;">SDKs generated by APIMatic are already deployed by large companies and installed several million times, meaning that the SDKs are reviewed by a larger user base that helps us design better SDKs.</span></p>

<h2 class=""><strong>To Sum It Up</strong></h2>
<p class=""><span style="font-weight: 400;">Creating SDKs in multiple languages is quite resource-intensive and expensive. Apart from just development, a major chunk of time and resources is spent on maintaining the SDKs, both from an engineering and business point of view, for all languages for each API. APIMatic is a developer experience platform that takes care of all the SDK generation and maintenance work behind the scenes while your developers can focus on their applications and innovative solutions. See firsthand how APIMatic can help <a href="https://www.apimatic.io/account/register">enhance your developer experience</a>.</span></p>
<p class="">&nbsp;</p>

</div>
</div>
</div>
</div>						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/the-great-sdk-battle-build-vs-buy/">The Great SDK Battle: Build vs Buy</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/the-great-sdk-battle-build-vs-buy/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>What’s New in APIMatic v3?</title>
		<link>/blog/whats-new-in-apimatic-v3/</link>
					<comments>/blog/whats-new-in-apimatic-v3/#respond</comments>
		
		<dc:creator><![CDATA[Nida I Zamir]]></dc:creator>
		<pubDate>Fri, 18 Jun 2021 10:56:01 +0000</pubDate>
				<category><![CDATA[API Portal]]></category>
		<category><![CDATA[API Transformer]]></category>
		<category><![CDATA[Releases]]></category>
		<category><![CDATA[SDK]]></category>
		<category><![CDATA[API]]></category>
		<category><![CDATA[Api documentation]]></category>
		<category><![CDATA[Apimatic]]></category>
		<category><![CDATA[auto-generated SDKs]]></category>
		<category><![CDATA[Codegen]]></category>
		<category><![CDATA[Developer Portal]]></category>
		<guid isPermaLink="false">https://devapi.dream.press/?p=443</guid>

					<description><![CDATA[<p>With organizations going increasingly digital, it has become challenging for API providers to maintain API visibility amongst a plethora of APIs and ensure faster API adoption. This is where developer experience pivots the developer’s decision in your API’s favor. Keeping this challenge in mind, APIMatic has undergone numerous updates to get you the most out [&#8230;]</p>
<p>The post <a rel="nofollow" href="/blog/whats-new-in-apimatic-v3/">What’s New in APIMatic v3?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="443" class="elementor elementor-443" data-elementor-settings="[]">
							<div class="elementor-section-wrap">
							<section class="elementor-section elementor-top-section elementor-element elementor-element-6d794aaf elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="6d794aaf" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-2bd1a153" data-id="2bd1a153" data-element_type="column">
			<div class="elementor-widget-wrap elementor-element-populated">
								<div class="elementor-element elementor-element-4ecb43bb elementor-widget elementor-widget-text-editor" data-id="4ecb43bb" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
							<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-444 aligncenter" src="/wp-content/uploads/2021/12/1_YOxwTEYQH2n9iAsyN5T2og-1024x512.png" alt="APIMatic v3 " width="1024" height="512"></p>
</figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<p id="e1f5" class="">With organizations going increasingly digital, it has become challenging for API providers to maintain API visibility amongst a plethora of APIs and ensure faster API adoption. This is where developer experience pivots the developer’s decision in your API’s favor. Keeping this challenge in mind, APIMatic has undergone numerous updates to get you the most out of your API.</p>
<p id="c384" class="">With APIMatic v3, you can generate feature-rich and code-compliant SDKs as our flagship&nbsp;<strong>Code Generator</strong> includes new features and improvements as an overhaul. We have also completely revamped the&nbsp;<strong>API Portal</strong>&nbsp;with a more aesthetic and interactive API portal and a Markdown docs editor. Furthermore, the&nbsp;<strong>API Transformer</strong>&nbsp;now supports the much-awaited&nbsp;<code>anyOf</code>,&nbsp;<code>oneOf</code>,&nbsp;<code>not&nbsp;</code>constructs and union types and much more.</p>
</div>
</div>
</div>
</div>
<!-- /wp:paragraph -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-445 aligncenter" src="/wp-content/uploads/2021/12/1_GpHWeFNx4IB2CRG1ryZVgA.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h2 id="2146" class="">Generate Robust SDKs with Overhauled Code Generator</h2>
<p id="8646" class="">The APIMatic Code Generator contains numerous updates to its feature list along with improvements in the CodeGen Engine:</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-446 aligncenter" src="/wp-content/uploads/2021/12/1_0kwDu7p6QTlVUG4YL9Idmw.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="d6de"><strong>Updated Language Versions, Dependencies, and Adherence to Coding Standards</strong></h3>
<p id="7773" class="">To ensure SDK compatibility with the maximum user codebase, the SDKs have been refactored to target minimum language and runtime versions and updated dependencies. Moreover, we have applied the latest industry-accepted <a href="https://docs.apimatic.io/generate-sdks/sdk-coding-standards">coding standards</a> in all languages to the SDKs.</p>
<h3 id="cb43" class="">Immutable Clients for Multi-Threading</h3>
<p id="8e46" class="">We have refactored our SDKs to <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#new-immutable-clients-in-sdks">immutable clients</a>that make it easier to write network-related code dealing with concurrency, as immutable clients are thread-safe and do not require explicit synchronization or defensive copying.</p>
<h3 id="c83a" class="">Timeout and Retries on API Call Errors</h3>
<p id="ecc0" class="">All APIMatic SDKs now support handling <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#timeout-and-automatic-retries-on-api-call-errors">timeouts and automatic retries</a> if an API call is timing out, is unreachable, or returning API call errors.</p>
<h3 id="fe34" class="">Support for XML in API Calls</h3>
<p id="3a23" class="">All SDKs now come with the added support for <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#support-for-xml">sending and receiving XML</a>&nbsp;in the API calls. So if your API definition uses XML, it can be imported into APIMatic v3 to generate SDKs without having to worry about serializing and deserializing the XML data.</p>
<h3 id="30e8">Support for Nullable Properties in Models</h3>
<p id="247e" class="">Java and C# SDKs now <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan#nullable-properties-in-models">contain nullable properties in models</a>, so if a user does not assign any value to a property after model instance initialization, a null value will be sent in the HTTP request instead of being skipped altogether.</p>
<h3 id="1b2d" class="">More Updates to the Code Generator</h3>
<p id="d4e3" class="">Apart from these features, the APIMatic Code Generator generates SDKs that support numerous features and enhancements like deprecating endpoints, cancellable API calls, access to HTTP response data, and more.</p>
<blockquote class="wp-block-quote">
<p>For more in-depth detail on the updated features of the Code Generator, please head over to <a href="https://docs.apimatic.io/changelog/apimatic-code-generator-v3-titan">APIMatic Code Generator v3</a>.</p>
</blockquote>
<h2 id="21fd" class="">Enhance Developer Experience with Revamped API Portal</h2>
<p id="7c60" class="">The API Portal has been revamped in APIMatic v3 to make your documentation and code samples more readable and interactive, making API consumption even faster. We have also updated the Portal Editor for more flexibility in customization to the portal.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-447 aligncenter" src="/wp-content/uploads/2021/12/1_7-EKUeLckKyhjf_3f9QN2w.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="3b90" class="">Improved Aesthetics and UX</h3>
<p id="aa54" class="">Based on feedback from our customers, we updated the design of the API portal to a more modern and reader-friendly interface with new typography, layout, and UI components for a more intuitive experience.</p>
<figure id="attachment_1239" aria-describedby="caption-attachment-1239" style="width: 1890px" class="wp-caption aligncenter"><img class="wp-image-1239 size-full" src="/wp-content/uploads/2021/12/portal.gif" alt="Revamped API Portal in APIMatic v3" width="1890" height="931"><figcaption id="caption-attachment-1239" class="wp-caption-text">Revamped API Portal in APIMatic v3</figcaption></figure>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:image -->
<div class="wp-block-image">
<figure class="aligncenter size-large"></figure>
</div>
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="6333" class="">Merged API Explorer (API Playground)</h3>
<p id="9472" class="">We have merged the endpoint request documentation with the API Console into a unified <a href="https://docs.apimatic.io/publish-apis/api-console">API Explorer</a>, also called the “API Playground”, that allows your users to explore the endpoint documentation and edit the request data in one place.</p>
<h3 id="e773" class="">Updated Portal Editor</h3>
<p id="ecec" class="">The Portal Editor for customizing the API portal has been remodeled to make it as easy to use as possible while adding a WYSIWYG Markdown docs editor for custom guides. You can customize <a href="https://docs.apimatic.io/publish-apis/customizing-your-portal">portal settings</a> and version-specific <a href="https://docs.apimatic.io/publish-apis/customize-docs">documentation settings</a>, and also include auto-generated documentation for endpoints and models.</p>
<figure id="attachment_1240" aria-describedby="caption-attachment-1240" style="width: 1890px" class="wp-caption aligncenter"><img class="wp-image-1240 size-full" src="/wp-content/uploads/2021/12/portal-editor-1.gif" alt="Revamped Portal Editor in APIMatic v3" width="1890" height="931"><figcaption id="caption-attachment-1240" class="wp-caption-text">Revamped Portal Editor in APIMatic v3</figcaption></figure>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large"></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="a325" class="">More Features in the v3 API Portal</h3>
<p id="b6fe" class="">The API Portal contains more fun features like pop-out code samples, version-specific documentation, customizable table-of-contents, and much more!</p>
<blockquote class="wp-block-quote">
<p>For more information about what APIMatic v3 offers for the API portal in detail, check out <a href="https://docs.apimatic.io/changelog/releasing-apimatic-v3-revamped-api-portal">Revamped API Portal in APIMatic v3</a>.</p>
</blockquote>
<h2 id="3616" class="">Polish Your API Definition with Upgraded API Transformer</h2>
<p id="1533">The API Transformer includes various new features and improvements, so your API definitions can make the most out of APIMatic V3.</p>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:image -->
<figure class="wp-block-image size-large">
<p class="mod-reset"><img class="wp-image-450 aligncenter" src="/wp-content/uploads/2021/12/1_dkZodYI-qBbeus6CoJ7l5g.png" alt=""></p>
</figure>
<!-- /wp:image -->

<!-- wp:heading -->
<div class="boldgrid-section">
<div class="container">
<div class="row">
<div class="col-md-12 col-xs-12 col-sm-12">
<h3 id="c5a8">Faster OpenAPI v2.0 and v3.0 Imports</h3>
<p id="d2ba" class="">The OpenAPI/Swagger 2.0 and 3.0 import has been completely revamped and impacts your SDK and Docs/Portal generation and API Transformer output. The revamp includes faster imports, improved support for&nbsp;<code>$refs</code> , improved error messages, changes to null value handling, and much more.</p>
<h3 id="4bd6" class="">Support for anyOf, oneOf, not Constructs and Union Types</h3>
<p id="c39a" class="">Probably one of the most requested support for&nbsp;<code>anyOf</code>,&nbsp;<code>oneOf&nbsp;</code>and&nbsp;<code>not&nbsp;</code>constructs is now available in all major API specification formats including OpenAPI, JSON Schema, API Blueprint. Support for RAML and XML schema “union” types has also been added.</p>
<h3 id="23c6" class="">What’s More in the v3 API Transformer?</h3>
<p id="2a1d" class="">The API Transformer is packed with more features and settings like new configuration settings, more specification extensions for OAS and RAML annotations, and so on.</p>
<blockquote class="wp-block-quote">
<p>Read more about what the&nbsp;<a href="https://docs.apimatic.io/changelog/releasing-apimatic-v3-revamped-transformer">revamped API Transformer offers</a>&nbsp;in APIMatic v3.</p>
</blockquote>
<h2 id="2c4a" class="">How do I Migrate to APIMatic v3? <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/2708.png" alt="✈" class="wp-smiley" style="height: 1em; max-height: 1em;" /></h2>
<p id="6280" class="">Migrating to APIMatic v3 is easy. All your data is preserved during migration so you don’t have to worry about any data being lost or discarded. We have also ensured that everything remains backward compatible so if for any reason you revert to v2, no data is lost.</p>
<blockquote class="wp-block-quote">
<p>For more detail, please refer to our guide on&nbsp;<a href="https://docs.apimatic.io/account-management/migrate-to-v3">how to migrate to APIMatic v3</a>, or contact&nbsp;<a href="https://www.apimatic.io/contact/">support</a>.</p>
</blockquote>
</div>
</div>
</div>
</div>
<!-- /wp:heading -->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->

<!-- wp:heading /-->

<!-- wp:paragraph /-->

<!-- wp:quote /-->						</div>
				</div>
					</div>
		</div>
							</div>
		</section>
						</div>
					</div>
		<p>The post <a rel="nofollow" href="/blog/whats-new-in-apimatic-v3/">What’s New in APIMatic v3?</a> appeared first on <a rel="nofollow" href="/">APIMatic</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/whats-new-in-apimatic-v3/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
